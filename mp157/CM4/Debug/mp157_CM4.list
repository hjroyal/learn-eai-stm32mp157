
mp157_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d8  10000000  10000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  100027d8  100027d8  000227d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  10002828  10002828  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .ARM.extab    00000000  10002828  10002828  0003000c  2**0
                  CONTENTS
  5 .ARM          00000000  10002828  10002828  0003000c  2**0
                  CONTENTS
  6 .preinit_array 00000000  10002828  10002828  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  10002828  10002828  00022828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  1000282c  1000282c  0002282c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000000c  10020000  10002830  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002000c  1002000c  0003000c  2**0
                  CONTENTS
 11 .bss          00000024  1002000c  1000283c  0003000c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  10020030  10002860  0003000c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000875d  00000000  00000000  0003007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000135e  00000000  00000000  000387dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000005e0  00000000  00000000  00039b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000449  00000000  00000000  0003a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004420a  00000000  00000000  0003a569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00008ecc  00000000  00000000  0007e773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001bf5a3  00000000  00000000  0008763f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00001558  00000000  00000000  00246be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000059  00000000  00000000  0024813c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002000c 	.word	0x1002000c
1000001c:	00000000 	.word	0x00000000
10000020:	100027c0 	.word	0x100027c0

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020010 	.word	0x10020010
1000003c:	100027c0 	.word	0x100027c0

10000040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000040:	b480      	push	{r7}
10000042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000044:	4b0f      	ldr	r3, [pc, #60]	; (10000084 <SystemInit+0x44>)
10000046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
1000004a:	4a0e      	ldr	r2, [pc, #56]	; (10000084 <SystemInit+0x44>)
1000004c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000054:	4b0c      	ldr	r3, [pc, #48]	; (10000088 <SystemInit+0x48>)
10000056:	2200      	movs	r2, #0
10000058:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
1000005a:	4b0b      	ldr	r3, [pc, #44]	; (10000088 <SystemInit+0x48>)
1000005c:	2200      	movs	r2, #0
1000005e:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000060:	4b09      	ldr	r3, [pc, #36]	; (10000088 <SystemInit+0x48>)
10000062:	2200      	movs	r2, #0
10000064:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000066:	4b08      	ldr	r3, [pc, #32]	; (10000088 <SystemInit+0x48>)
10000068:	2200      	movs	r2, #0
1000006a:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
1000006c:	4b06      	ldr	r3, [pc, #24]	; (10000088 <SystemInit+0x48>)
1000006e:	2200      	movs	r2, #0
10000070:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000072:	4b05      	ldr	r3, [pc, #20]	; (10000088 <SystemInit+0x48>)
10000074:	2200      	movs	r2, #0
10000076:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000078:	bf00      	nop
1000007a:	46bd      	mov	sp, r7
1000007c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000080:	4770      	bx	lr
10000082:	bf00      	nop
10000084:	e000ed00 	.word	0xe000ed00
10000088:	5000d0c0 	.word	0x5000d0c0

1000008c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
1000008c:	b580      	push	{r7, lr}
1000008e:	b086      	sub	sp, #24
10000090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000092:	1d3b      	adds	r3, r7, #4
10000094:	2200      	movs	r2, #0
10000096:	601a      	str	r2, [r3, #0]
10000098:	605a      	str	r2, [r3, #4]
1000009a:	609a      	str	r2, [r3, #8]
1000009c:	60da      	str	r2, [r3, #12]
1000009e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
100000a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000a4:	2280      	movs	r2, #128	; 0x80
100000a6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
100000aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000ae:	2201      	movs	r2, #1
100000b0:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOG_CLK_ENABLE();
100000b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100000b8:	2240      	movs	r2, #64	; 0x40
100000ba:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
100000be:	2200      	movs	r2, #0
100000c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
100000c4:	4814      	ldr	r0, [pc, #80]	; (10000118 <MX_GPIO_Init+0x8c>)
100000c6:	f000 fd19 	bl	10000afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
100000ca:	2200      	movs	r2, #0
100000cc:	f44f 7180 	mov.w	r1, #256	; 0x100
100000d0:	4812      	ldr	r0, [pc, #72]	; (1000011c <MX_GPIO_Init+0x90>)
100000d2:	f000 fd13 	bl	10000afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
100000d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
100000da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
100000dc:	2301      	movs	r3, #1
100000de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
100000e0:	2301      	movs	r3, #1
100000e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
100000e4:	2303      	movs	r3, #3
100000e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
100000e8:	1d3b      	adds	r3, r7, #4
100000ea:	4619      	mov	r1, r3
100000ec:	480a      	ldr	r0, [pc, #40]	; (10000118 <MX_GPIO_Init+0x8c>)
100000ee:	f000 fb5b 	bl	100007a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
100000f2:	f44f 7380 	mov.w	r3, #256	; 0x100
100000f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
100000f8:	2301      	movs	r3, #1
100000fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
100000fc:	2301      	movs	r3, #1
100000fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
10000100:	2303      	movs	r3, #3
10000102:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
10000104:	1d3b      	adds	r3, r7, #4
10000106:	4619      	mov	r1, r3
10000108:	4804      	ldr	r0, [pc, #16]	; (1000011c <MX_GPIO_Init+0x90>)
1000010a:	f000 fb4d 	bl	100007a8 <HAL_GPIO_Init>

}
1000010e:	bf00      	nop
10000110:	3718      	adds	r7, #24
10000112:	46bd      	mov	sp, r7
10000114:	bd80      	pop	{r7, pc}
10000116:	bf00      	nop
10000118:	50002000 	.word	0x50002000
1000011c:	50008000 	.word	0x50008000

10000120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000120:	b580      	push	{r7, lr}
10000122:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000124:	f000 f99a 	bl	1000045c <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000128:	4b09      	ldr	r3, [pc, #36]	; (10000150 <main+0x30>)
1000012a:	681b      	ldr	r3, [r3, #0]
1000012c:	f003 0307 	and.w	r3, r3, #7
10000130:	2b04      	cmp	r3, #4
10000132:	d101      	bne.n	10000138 <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000134:	f000 f810 	bl	10000158 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000138:	f7ff ffa8 	bl	1000008c <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */
  DemoLedInit(); // 自定义引脚初始化
1000013c:	f000 f952 	bl	100003e4 <DemoLedInit>
  sys_freq = HAL_RCC_GetSystemCoreClockFreq(); // 调用库函数获取系统时钟频率
10000140:	f001 fe71 	bl	10001e26 <HAL_RCC_GetSystemCoreClockFreq>
10000144:	4603      	mov	r3, r0
10000146:	4a03      	ldr	r2, [pc, #12]	; (10000154 <main+0x34>)
10000148:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LedBlinking(); // LED 闪烁
1000014a:	f000 f95f 	bl	1000040c <LedBlinking>
1000014e:	e7fc      	b.n	1000014a <main+0x2a>
10000150:	50020000 	.word	0x50020000
10000154:	10020028 	.word	0x10020028

10000158 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000158:	b580      	push	{r7, lr}
1000015a:	b0d2      	sub	sp, #328	; 0x148
1000015c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
1000015e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000162:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000166:	4618      	mov	r0, r3
10000168:	f44f 738a 	mov.w	r3, #276	; 0x114
1000016c:	461a      	mov	r2, r3
1000016e:	2100      	movs	r1, #0
10000170:	f002 fafa 	bl	10002768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000174:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000178:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000017c:	4618      	mov	r0, r3
1000017e:	2330      	movs	r3, #48	; 0x30
10000180:	461a      	mov	r2, r3
10000182:	2100      	movs	r1, #0
10000184:	f002 faf0 	bl	10002768 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
10000188:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000018c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000190:	2203      	movs	r2, #3
10000192:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10000194:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000198:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000019c:	f44f 7280 	mov.w	r2, #256	; 0x100
100001a0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
100001a2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001aa:	2201      	movs	r2, #1
100001ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
100001ae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001b6:	2200      	movs	r2, #0
100001b8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
100001ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001c2:	2200      	movs	r2, #0
100001c4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
100001c6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001ce:	2200      	movs	r2, #0
100001d0:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
100001d2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001da:	2202      	movs	r2, #2
100001dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
100001e0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001e8:	2201      	movs	r2, #1
100001ea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
100001ee:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100001f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
100001f6:	2202      	movs	r2, #2
100001f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 52;
100001fc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000200:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000204:	2234      	movs	r2, #52	; 0x34
10000206:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 3;
1000020a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000020e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000212:	2203      	movs	r2, #3
10000214:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 2;
10000218:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000021c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000220:	2202      	movs	r2, #2
10000222:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 2;
10000226:	f507 73a4 	add.w	r3, r7, #328	; 0x148
1000022a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000022e:	2202      	movs	r2, #2
10000230:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000234:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000238:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000023c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
10000240:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 2048;
10000244:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000248:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000024c:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000250:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10000254:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000258:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000025c:	2201      	movs	r2, #1
1000025e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
10000262:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000266:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
1000026a:	2200      	movs	r2, #0
1000026c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000270:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000274:	4618      	mov	r0, r3
10000276:	f000 fc5b 	bl	10000b30 <HAL_RCC_OscConfig>
1000027a:	4603      	mov	r3, r0
1000027c:	2b00      	cmp	r3, #0
1000027e:	d001      	beq.n	10000284 <SystemClock_Config+0x12c>
  {
    Error_Handler();
10000280:	f000 f84a 	bl	10000318 <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000284:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000288:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
1000028c:	22fe      	movs	r2, #254	; 0xfe
1000028e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
10000290:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000294:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000298:	2200      	movs	r2, #0
1000029a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
1000029c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002a0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002a4:	2200      	movs	r2, #0
100002a6:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
100002a8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002ac:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002b0:	2203      	movs	r2, #3
100002b2:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
100002b4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002b8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002bc:	2200      	movs	r2, #0
100002be:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
100002c0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002c4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002c8:	2200      	movs	r2, #0
100002ca:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
100002cc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002d0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002d4:	2200      	movs	r2, #0
100002d6:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
100002d8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002dc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002e0:	2201      	movs	r2, #1
100002e2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
100002e4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002e8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002ec:	2201      	movs	r2, #1
100002ee:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
100002f0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
100002f4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
100002f8:	2201      	movs	r2, #1
100002fa:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
100002fc:	1d3b      	adds	r3, r7, #4
100002fe:	4618      	mov	r0, r3
10000300:	f001 f9b4 	bl	1000166c <HAL_RCC_ClockConfig>
10000304:	4603      	mov	r3, r0
10000306:	2b00      	cmp	r3, #0
10000308:	d001      	beq.n	1000030e <SystemClock_Config+0x1b6>
  {
    Error_Handler();
1000030a:	f000 f805 	bl	10000318 <Error_Handler>
  }
}
1000030e:	bf00      	nop
10000310:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000314:	46bd      	mov	sp, r7
10000316:	bd80      	pop	{r7, pc}

10000318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10000318:	b480      	push	{r7}
1000031a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1000031c:	b672      	cpsid	i
}
1000031e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10000320:	e7fe      	b.n	10000320 <Error_Handler+0x8>

10000322 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10000322:	b580      	push	{r7, lr}
10000324:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
10000326:	2200      	movs	r2, #0
10000328:	2101      	movs	r1, #1
1000032a:	f06f 000b 	mvn.w	r0, #11
1000032e:	f000 fa04 	bl	1000073a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
10000332:	2200      	movs	r2, #0
10000334:	2101      	movs	r1, #1
10000336:	f06f 000a 	mvn.w	r0, #10
1000033a:	f000 f9fe 	bl	1000073a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
1000033e:	2200      	movs	r2, #0
10000340:	2101      	movs	r1, #1
10000342:	f06f 0009 	mvn.w	r0, #9
10000346:	f000 f9f8 	bl	1000073a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
1000034a:	2200      	movs	r2, #0
1000034c:	2101      	movs	r1, #1
1000034e:	f06f 0004 	mvn.w	r0, #4
10000352:	f000 f9f2 	bl	1000073a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
10000356:	2200      	movs	r2, #0
10000358:	2101      	movs	r1, #1
1000035a:	f06f 0003 	mvn.w	r0, #3
1000035e:	f000 f9ec 	bl	1000073a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
10000362:	2200      	movs	r2, #0
10000364:	2101      	movs	r1, #1
10000366:	f06f 0001 	mvn.w	r0, #1
1000036a:	f000 f9e6 	bl	1000073a <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
1000036e:	2200      	movs	r2, #0
10000370:	2100      	movs	r1, #0
10000372:	2091      	movs	r0, #145	; 0x91
10000374:	f000 f9e1 	bl	1000073a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10000378:	2091      	movs	r0, #145	; 0x91
1000037a:	f000 f9fa 	bl	10000772 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
1000037e:	bf00      	nop
10000380:	bd80      	pop	{r7, pc}

10000382 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10000382:	b480      	push	{r7}
10000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
10000386:	e7fe      	b.n	10000386 <NMI_Handler+0x4>

10000388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000388:	b480      	push	{r7}
1000038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
1000038c:	e7fe      	b.n	1000038c <HardFault_Handler+0x4>

1000038e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
1000038e:	b480      	push	{r7}
10000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10000392:	e7fe      	b.n	10000392 <MemManage_Handler+0x4>

10000394 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10000394:	b480      	push	{r7}
10000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10000398:	e7fe      	b.n	10000398 <BusFault_Handler+0x4>

1000039a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
1000039a:	b480      	push	{r7}
1000039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
1000039e:	e7fe      	b.n	1000039e <UsageFault_Handler+0x4>

100003a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
100003a0:	b480      	push	{r7}
100003a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
100003a4:	bf00      	nop
100003a6:	46bd      	mov	sp, r7
100003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
100003ac:	4770      	bx	lr

100003ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
100003ae:	b480      	push	{r7}
100003b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
100003b2:	bf00      	nop
100003b4:	46bd      	mov	sp, r7
100003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
100003ba:	4770      	bx	lr

100003bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
100003bc:	b480      	push	{r7}
100003be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
100003c0:	bf00      	nop
100003c2:	46bd      	mov	sp, r7
100003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
100003c8:	4770      	bx	lr

100003ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
100003ca:	b580      	push	{r7, lr}
100003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
100003ce:	f000 f895 	bl	100004fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
100003d2:	bf00      	nop
100003d4:	bd80      	pop	{r7, pc}

100003d6 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
100003d6:	b580      	push	{r7, lr}
100003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
100003da:	f001 fd65 	bl	10001ea8 <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
100003de:	bf00      	nop
100003e0:	bd80      	pop	{r7, pc}

100003e2 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
100003e2:	e7fe      	b.n	100003e2 <ADC1_IRQHandler>

100003e4 <DemoLedInit>:
#include "driver_led.h"

void DemoLedInit(void)
{
100003e4:	b580      	push	{r7, lr}
100003e6:	af00      	add	r7, sp, #0
	/* LED 对应的引脚的初始化,已经由 STM32CubeMX 在 main.c 自动生成 */

	/* 两个灯初始化状态为亮 */
	LED_GREEN_ON();
100003e8:	2200      	movs	r2, #0
100003ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
100003ee:	4805      	ldr	r0, [pc, #20]	; (10000404 <DemoLedInit+0x20>)
100003f0:	f000 fb84 	bl	10000afc <HAL_GPIO_WritePin>
	LED_YELLOW_ON();
100003f4:	2200      	movs	r2, #0
100003f6:	f44f 7180 	mov.w	r1, #256	; 0x100
100003fa:	4803      	ldr	r0, [pc, #12]	; (10000408 <DemoLedInit+0x24>)
100003fc:	f000 fb7e 	bl	10000afc <HAL_GPIO_WritePin>
}
10000400:	bf00      	nop
10000402:	bd80      	pop	{r7, pc}
10000404:	50002000 	.word	0x50002000
10000408:	50008000 	.word	0x50008000

1000040c <LedBlinking>:

void LedBlinking(void)
{
1000040c:	b580      	push	{r7, lr}
1000040e:	af00      	add	r7, sp, #0
	/* LED2(GREEN)和 LED3(YELLOW)间隔 1S 闪烁 */

LED_GREEN_ON();
10000410:	2200      	movs	r2, #0
10000412:	f44f 6180 	mov.w	r1, #1024	; 0x400
10000416:	480f      	ldr	r0, [pc, #60]	; (10000454 <LedBlinking+0x48>)
10000418:	f000 fb70 	bl	10000afc <HAL_GPIO_WritePin>
LED_YELLOW_ON();
1000041c:	2200      	movs	r2, #0
1000041e:	f44f 7180 	mov.w	r1, #256	; 0x100
10000422:	480d      	ldr	r0, [pc, #52]	; (10000458 <LedBlinking+0x4c>)
10000424:	f000 fb6a 	bl	10000afc <HAL_GPIO_WritePin>
HAL_Delay(1000);
10000428:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1000042c:	f000 f886 	bl	1000053c <HAL_Delay>
LED_GREEN_OFF();
10000430:	2201      	movs	r2, #1
10000432:	f44f 6180 	mov.w	r1, #1024	; 0x400
10000436:	4807      	ldr	r0, [pc, #28]	; (10000454 <LedBlinking+0x48>)
10000438:	f000 fb60 	bl	10000afc <HAL_GPIO_WritePin>
LED_YELLOW_OFF();
1000043c:	2201      	movs	r2, #1
1000043e:	f44f 7180 	mov.w	r1, #256	; 0x100
10000442:	4805      	ldr	r0, [pc, #20]	; (10000458 <LedBlinking+0x4c>)
10000444:	f000 fb5a 	bl	10000afc <HAL_GPIO_WritePin>
HAL_Delay(1000);
10000448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1000044c:	f000 f876 	bl	1000053c <HAL_Delay>
}
10000450:	bf00      	nop
10000452:	bd80      	pop	{r7, pc}
10000454:	50002000 	.word	0x50002000
10000458:	50008000 	.word	0x50008000

1000045c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
1000045c:	b580      	push	{r7, lr}
1000045e:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
10000460:	2003      	movs	r0, #3
10000462:	f000 f95f 	bl	10000724 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10000466:	f001 fcde 	bl	10001e26 <HAL_RCC_GetSystemCoreClockFreq>
1000046a:	4603      	mov	r3, r0
1000046c:	4a07      	ldr	r2, [pc, #28]	; (1000048c <HAL_Init+0x30>)
1000046e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
10000470:	200f      	movs	r0, #15
10000472:	f000 f80d 	bl	10000490 <HAL_InitTick>
10000476:	4603      	mov	r3, r0
10000478:	2b00      	cmp	r3, #0
1000047a:	d001      	beq.n	10000480 <HAL_Init+0x24>
  {
    return HAL_ERROR;
1000047c:	2301      	movs	r3, #1
1000047e:	e002      	b.n	10000486 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
10000480:	f7ff ff4f 	bl	10000322 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10000484:	2300      	movs	r3, #0
}
10000486:	4618      	mov	r0, r3
10000488:	bd80      	pop	{r7, pc}
1000048a:	bf00      	nop
1000048c:	10020000 	.word	0x10020000

10000490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
10000490:	b580      	push	{r7, lr}
10000492:	b082      	sub	sp, #8
10000494:	af00      	add	r7, sp, #0
10000496:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10000498:	4b15      	ldr	r3, [pc, #84]	; (100004f0 <HAL_InitTick+0x60>)
1000049a:	781b      	ldrb	r3, [r3, #0]
1000049c:	2b00      	cmp	r3, #0
1000049e:	d101      	bne.n	100004a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100004a0:	2301      	movs	r3, #1
100004a2:	e021      	b.n	100004e8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100004a4:	4b13      	ldr	r3, [pc, #76]	; (100004f4 <HAL_InitTick+0x64>)
100004a6:	681a      	ldr	r2, [r3, #0]
100004a8:	4b11      	ldr	r3, [pc, #68]	; (100004f0 <HAL_InitTick+0x60>)
100004aa:	781b      	ldrb	r3, [r3, #0]
100004ac:	4619      	mov	r1, r3
100004ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
100004b2:	fbb3 f3f1 	udiv	r3, r3, r1
100004b6:	fbb2 f3f3 	udiv	r3, r2, r3
100004ba:	4618      	mov	r0, r3
100004bc:	f000 f967 	bl	1000078e <HAL_SYSTICK_Config>
100004c0:	4603      	mov	r3, r0
100004c2:	2b00      	cmp	r3, #0
100004c4:	d001      	beq.n	100004ca <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100004c6:	2301      	movs	r3, #1
100004c8:	e00e      	b.n	100004e8 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100004ca:	687b      	ldr	r3, [r7, #4]
100004cc:	2b0f      	cmp	r3, #15
100004ce:	d80a      	bhi.n	100004e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100004d0:	2200      	movs	r2, #0
100004d2:	6879      	ldr	r1, [r7, #4]
100004d4:	f04f 30ff 	mov.w	r0, #4294967295
100004d8:	f000 f92f 	bl	1000073a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100004dc:	4a06      	ldr	r2, [pc, #24]	; (100004f8 <HAL_InitTick+0x68>)
100004de:	687b      	ldr	r3, [r7, #4]
100004e0:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
100004e2:	2300      	movs	r3, #0
100004e4:	e000      	b.n	100004e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
100004e6:	2301      	movs	r3, #1
}
100004e8:	4618      	mov	r0, r3
100004ea:	3708      	adds	r7, #8
100004ec:	46bd      	mov	sp, r7
100004ee:	bd80      	pop	{r7, pc}
100004f0:	10020008 	.word	0x10020008
100004f4:	10020000 	.word	0x10020000
100004f8:	10020004 	.word	0x10020004

100004fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
100004fc:	b480      	push	{r7}
100004fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000500:	4b06      	ldr	r3, [pc, #24]	; (1000051c <HAL_IncTick+0x20>)
10000502:	781b      	ldrb	r3, [r3, #0]
10000504:	461a      	mov	r2, r3
10000506:	4b06      	ldr	r3, [pc, #24]	; (10000520 <HAL_IncTick+0x24>)
10000508:	681b      	ldr	r3, [r3, #0]
1000050a:	4413      	add	r3, r2
1000050c:	4a04      	ldr	r2, [pc, #16]	; (10000520 <HAL_IncTick+0x24>)
1000050e:	6013      	str	r3, [r2, #0]
}
10000510:	bf00      	nop
10000512:	46bd      	mov	sp, r7
10000514:	f85d 7b04 	ldr.w	r7, [sp], #4
10000518:	4770      	bx	lr
1000051a:	bf00      	nop
1000051c:	10020008 	.word	0x10020008
10000520:	1002002c 	.word	0x1002002c

10000524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000524:	b480      	push	{r7}
10000526:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000528:	4b03      	ldr	r3, [pc, #12]	; (10000538 <HAL_GetTick+0x14>)
1000052a:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
1000052c:	4618      	mov	r0, r3
1000052e:	46bd      	mov	sp, r7
10000530:	f85d 7b04 	ldr.w	r7, [sp], #4
10000534:	4770      	bx	lr
10000536:	bf00      	nop
10000538:	1002002c 	.word	0x1002002c

1000053c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
1000053c:	b580      	push	{r7, lr}
1000053e:	b084      	sub	sp, #16
10000540:	af00      	add	r7, sp, #0
10000542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10000544:	f7ff ffee 	bl	10000524 <HAL_GetTick>
10000548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
1000054a:	687b      	ldr	r3, [r7, #4]
1000054c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
1000054e:	68fb      	ldr	r3, [r7, #12]
10000550:	f1b3 3fff 	cmp.w	r3, #4294967295
10000554:	d005      	beq.n	10000562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10000556:	4b0a      	ldr	r3, [pc, #40]	; (10000580 <HAL_Delay+0x44>)
10000558:	781b      	ldrb	r3, [r3, #0]
1000055a:	461a      	mov	r2, r3
1000055c:	68fb      	ldr	r3, [r7, #12]
1000055e:	4413      	add	r3, r2
10000560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10000562:	bf00      	nop
10000564:	f7ff ffde 	bl	10000524 <HAL_GetTick>
10000568:	4602      	mov	r2, r0
1000056a:	68bb      	ldr	r3, [r7, #8]
1000056c:	1ad3      	subs	r3, r2, r3
1000056e:	68fa      	ldr	r2, [r7, #12]
10000570:	429a      	cmp	r2, r3
10000572:	d8f7      	bhi.n	10000564 <HAL_Delay+0x28>
  {
  }
}
10000574:	bf00      	nop
10000576:	bf00      	nop
10000578:	3710      	adds	r7, #16
1000057a:	46bd      	mov	sp, r7
1000057c:	bd80      	pop	{r7, pc}
1000057e:	bf00      	nop
10000580:	10020008 	.word	0x10020008

10000584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000584:	b480      	push	{r7}
10000586:	b085      	sub	sp, #20
10000588:	af00      	add	r7, sp, #0
1000058a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
1000058c:	687b      	ldr	r3, [r7, #4]
1000058e:	f003 0307 	and.w	r3, r3, #7
10000592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10000594:	4b0c      	ldr	r3, [pc, #48]	; (100005c8 <__NVIC_SetPriorityGrouping+0x44>)
10000596:	68db      	ldr	r3, [r3, #12]
10000598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
1000059a:	68ba      	ldr	r2, [r7, #8]
1000059c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
100005a0:	4013      	ands	r3, r2
100005a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
100005a4:	68fb      	ldr	r3, [r7, #12]
100005a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
100005a8:	68bb      	ldr	r3, [r7, #8]
100005aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
100005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
100005b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
100005b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
100005b6:	4a04      	ldr	r2, [pc, #16]	; (100005c8 <__NVIC_SetPriorityGrouping+0x44>)
100005b8:	68bb      	ldr	r3, [r7, #8]
100005ba:	60d3      	str	r3, [r2, #12]
}
100005bc:	bf00      	nop
100005be:	3714      	adds	r7, #20
100005c0:	46bd      	mov	sp, r7
100005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
100005c6:	4770      	bx	lr
100005c8:	e000ed00 	.word	0xe000ed00

100005cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100005cc:	b480      	push	{r7}
100005ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100005d0:	4b04      	ldr	r3, [pc, #16]	; (100005e4 <__NVIC_GetPriorityGrouping+0x18>)
100005d2:	68db      	ldr	r3, [r3, #12]
100005d4:	0a1b      	lsrs	r3, r3, #8
100005d6:	f003 0307 	and.w	r3, r3, #7
}
100005da:	4618      	mov	r0, r3
100005dc:	46bd      	mov	sp, r7
100005de:	f85d 7b04 	ldr.w	r7, [sp], #4
100005e2:	4770      	bx	lr
100005e4:	e000ed00 	.word	0xe000ed00

100005e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100005e8:	b480      	push	{r7}
100005ea:	b083      	sub	sp, #12
100005ec:	af00      	add	r7, sp, #0
100005ee:	4603      	mov	r3, r0
100005f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100005f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100005f6:	2b00      	cmp	r3, #0
100005f8:	db0b      	blt.n	10000612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100005fa:	88fb      	ldrh	r3, [r7, #6]
100005fc:	f003 021f 	and.w	r2, r3, #31
10000600:	4907      	ldr	r1, [pc, #28]	; (10000620 <__NVIC_EnableIRQ+0x38>)
10000602:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000606:	095b      	lsrs	r3, r3, #5
10000608:	2001      	movs	r0, #1
1000060a:	fa00 f202 	lsl.w	r2, r0, r2
1000060e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
10000612:	bf00      	nop
10000614:	370c      	adds	r7, #12
10000616:	46bd      	mov	sp, r7
10000618:	f85d 7b04 	ldr.w	r7, [sp], #4
1000061c:	4770      	bx	lr
1000061e:	bf00      	nop
10000620:	e000e100 	.word	0xe000e100

10000624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000624:	b480      	push	{r7}
10000626:	b083      	sub	sp, #12
10000628:	af00      	add	r7, sp, #0
1000062a:	4603      	mov	r3, r0
1000062c:	6039      	str	r1, [r7, #0]
1000062e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000634:	2b00      	cmp	r3, #0
10000636:	db0a      	blt.n	1000064e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000638:	683b      	ldr	r3, [r7, #0]
1000063a:	b2da      	uxtb	r2, r3
1000063c:	490c      	ldr	r1, [pc, #48]	; (10000670 <__NVIC_SetPriority+0x4c>)
1000063e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000642:	0112      	lsls	r2, r2, #4
10000644:	b2d2      	uxtb	r2, r2
10000646:	440b      	add	r3, r1
10000648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
1000064c:	e00a      	b.n	10000664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1000064e:	683b      	ldr	r3, [r7, #0]
10000650:	b2da      	uxtb	r2, r3
10000652:	4908      	ldr	r1, [pc, #32]	; (10000674 <__NVIC_SetPriority+0x50>)
10000654:	88fb      	ldrh	r3, [r7, #6]
10000656:	f003 030f 	and.w	r3, r3, #15
1000065a:	3b04      	subs	r3, #4
1000065c:	0112      	lsls	r2, r2, #4
1000065e:	b2d2      	uxtb	r2, r2
10000660:	440b      	add	r3, r1
10000662:	761a      	strb	r2, [r3, #24]
}
10000664:	bf00      	nop
10000666:	370c      	adds	r7, #12
10000668:	46bd      	mov	sp, r7
1000066a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000066e:	4770      	bx	lr
10000670:	e000e100 	.word	0xe000e100
10000674:	e000ed00 	.word	0xe000ed00

10000678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000678:	b480      	push	{r7}
1000067a:	b089      	sub	sp, #36	; 0x24
1000067c:	af00      	add	r7, sp, #0
1000067e:	60f8      	str	r0, [r7, #12]
10000680:	60b9      	str	r1, [r7, #8]
10000682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000684:	68fb      	ldr	r3, [r7, #12]
10000686:	f003 0307 	and.w	r3, r3, #7
1000068a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
1000068c:	69fb      	ldr	r3, [r7, #28]
1000068e:	f1c3 0307 	rsb	r3, r3, #7
10000692:	2b04      	cmp	r3, #4
10000694:	bf28      	it	cs
10000696:	2304      	movcs	r3, #4
10000698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
1000069a:	69fb      	ldr	r3, [r7, #28]
1000069c:	3304      	adds	r3, #4
1000069e:	2b06      	cmp	r3, #6
100006a0:	d902      	bls.n	100006a8 <NVIC_EncodePriority+0x30>
100006a2:	69fb      	ldr	r3, [r7, #28]
100006a4:	3b03      	subs	r3, #3
100006a6:	e000      	b.n	100006aa <NVIC_EncodePriority+0x32>
100006a8:	2300      	movs	r3, #0
100006aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100006ac:	f04f 32ff 	mov.w	r2, #4294967295
100006b0:	69bb      	ldr	r3, [r7, #24]
100006b2:	fa02 f303 	lsl.w	r3, r2, r3
100006b6:	43da      	mvns	r2, r3
100006b8:	68bb      	ldr	r3, [r7, #8]
100006ba:	401a      	ands	r2, r3
100006bc:	697b      	ldr	r3, [r7, #20]
100006be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
100006c0:	f04f 31ff 	mov.w	r1, #4294967295
100006c4:	697b      	ldr	r3, [r7, #20]
100006c6:	fa01 f303 	lsl.w	r3, r1, r3
100006ca:	43d9      	mvns	r1, r3
100006cc:	687b      	ldr	r3, [r7, #4]
100006ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100006d0:	4313      	orrs	r3, r2
         );
}
100006d2:	4618      	mov	r0, r3
100006d4:	3724      	adds	r7, #36	; 0x24
100006d6:	46bd      	mov	sp, r7
100006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
100006dc:	4770      	bx	lr
	...

100006e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100006e0:	b580      	push	{r7, lr}
100006e2:	b082      	sub	sp, #8
100006e4:	af00      	add	r7, sp, #0
100006e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100006e8:	687b      	ldr	r3, [r7, #4]
100006ea:	3b01      	subs	r3, #1
100006ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
100006f0:	d301      	bcc.n	100006f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
100006f2:	2301      	movs	r3, #1
100006f4:	e00f      	b.n	10000716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100006f6:	4a0a      	ldr	r2, [pc, #40]	; (10000720 <SysTick_Config+0x40>)
100006f8:	687b      	ldr	r3, [r7, #4]
100006fa:	3b01      	subs	r3, #1
100006fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100006fe:	210f      	movs	r1, #15
10000700:	f04f 30ff 	mov.w	r0, #4294967295
10000704:	f7ff ff8e 	bl	10000624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10000708:	4b05      	ldr	r3, [pc, #20]	; (10000720 <SysTick_Config+0x40>)
1000070a:	2200      	movs	r2, #0
1000070c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1000070e:	4b04      	ldr	r3, [pc, #16]	; (10000720 <SysTick_Config+0x40>)
10000710:	2207      	movs	r2, #7
10000712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10000714:	2300      	movs	r3, #0
}
10000716:	4618      	mov	r0, r3
10000718:	3708      	adds	r7, #8
1000071a:	46bd      	mov	sp, r7
1000071c:	bd80      	pop	{r7, pc}
1000071e:	bf00      	nop
10000720:	e000e010 	.word	0xe000e010

10000724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000724:	b580      	push	{r7, lr}
10000726:	b082      	sub	sp, #8
10000728:	af00      	add	r7, sp, #0
1000072a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
1000072c:	6878      	ldr	r0, [r7, #4]
1000072e:	f7ff ff29 	bl	10000584 <__NVIC_SetPriorityGrouping>
}
10000732:	bf00      	nop
10000734:	3708      	adds	r7, #8
10000736:	46bd      	mov	sp, r7
10000738:	bd80      	pop	{r7, pc}

1000073a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
1000073a:	b580      	push	{r7, lr}
1000073c:	b086      	sub	sp, #24
1000073e:	af00      	add	r7, sp, #0
10000740:	4603      	mov	r3, r0
10000742:	60b9      	str	r1, [r7, #8]
10000744:	607a      	str	r2, [r7, #4]
10000746:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10000748:	2300      	movs	r3, #0
1000074a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
1000074c:	f7ff ff3e 	bl	100005cc <__NVIC_GetPriorityGrouping>
10000750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000752:	687a      	ldr	r2, [r7, #4]
10000754:	68b9      	ldr	r1, [r7, #8]
10000756:	6978      	ldr	r0, [r7, #20]
10000758:	f7ff ff8e 	bl	10000678 <NVIC_EncodePriority>
1000075c:	4602      	mov	r2, r0
1000075e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000762:	4611      	mov	r1, r2
10000764:	4618      	mov	r0, r3
10000766:	f7ff ff5d 	bl	10000624 <__NVIC_SetPriority>
}
1000076a:	bf00      	nop
1000076c:	3718      	adds	r7, #24
1000076e:	46bd      	mov	sp, r7
10000770:	bd80      	pop	{r7, pc}

10000772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000772:	b580      	push	{r7, lr}
10000774:	b082      	sub	sp, #8
10000776:	af00      	add	r7, sp, #0
10000778:	4603      	mov	r3, r0
1000077a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
1000077c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000780:	4618      	mov	r0, r3
10000782:	f7ff ff31 	bl	100005e8 <__NVIC_EnableIRQ>
}
10000786:	bf00      	nop
10000788:	3708      	adds	r7, #8
1000078a:	46bd      	mov	sp, r7
1000078c:	bd80      	pop	{r7, pc}

1000078e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1000078e:	b580      	push	{r7, lr}
10000790:	b082      	sub	sp, #8
10000792:	af00      	add	r7, sp, #0
10000794:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10000796:	6878      	ldr	r0, [r7, #4]
10000798:	f7ff ffa2 	bl	100006e0 <SysTick_Config>
1000079c:	4603      	mov	r3, r0
}
1000079e:	4618      	mov	r0, r3
100007a0:	3708      	adds	r7, #8
100007a2:	46bd      	mov	sp, r7
100007a4:	bd80      	pop	{r7, pc}
	...

100007a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100007a8:	b480      	push	{r7}
100007aa:	b089      	sub	sp, #36	; 0x24
100007ac:	af00      	add	r7, sp, #0
100007ae:	6078      	str	r0, [r7, #4]
100007b0:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
100007b2:	4b8a      	ldr	r3, [pc, #552]	; (100009dc <HAL_GPIO_Init+0x234>)
100007b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
100007b6:	2300      	movs	r3, #0
100007b8:	61fb      	str	r3, [r7, #28]
100007ba:	e191      	b.n	10000ae0 <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
100007bc:	2201      	movs	r2, #1
100007be:	69fb      	ldr	r3, [r7, #28]
100007c0:	fa02 f303 	lsl.w	r3, r2, r3
100007c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
100007c6:	683b      	ldr	r3, [r7, #0]
100007c8:	681b      	ldr	r3, [r3, #0]
100007ca:	693a      	ldr	r2, [r7, #16]
100007cc:	4013      	ands	r3, r2
100007ce:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
100007d0:	68fa      	ldr	r2, [r7, #12]
100007d2:	693b      	ldr	r3, [r7, #16]
100007d4:	429a      	cmp	r2, r3
100007d6:	f040 8180 	bne.w	10000ada <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100007da:	683b      	ldr	r3, [r7, #0]
100007dc:	685b      	ldr	r3, [r3, #4]
100007de:	2b02      	cmp	r3, #2
100007e0:	d003      	beq.n	100007ea <HAL_GPIO_Init+0x42>
100007e2:	683b      	ldr	r3, [r7, #0]
100007e4:	685b      	ldr	r3, [r3, #4]
100007e6:	2b12      	cmp	r3, #18
100007e8:	d123      	bne.n	10000832 <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
100007ea:	69fb      	ldr	r3, [r7, #28]
100007ec:	08da      	lsrs	r2, r3, #3
100007ee:	687b      	ldr	r3, [r7, #4]
100007f0:	3208      	adds	r2, #8
100007f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
100007f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
100007f8:	69fb      	ldr	r3, [r7, #28]
100007fa:	f003 0307 	and.w	r3, r3, #7
100007fe:	009b      	lsls	r3, r3, #2
10000800:	220f      	movs	r2, #15
10000802:	fa02 f303 	lsl.w	r3, r2, r3
10000806:	43db      	mvns	r3, r3
10000808:	69ba      	ldr	r2, [r7, #24]
1000080a:	4013      	ands	r3, r2
1000080c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
1000080e:	683b      	ldr	r3, [r7, #0]
10000810:	691a      	ldr	r2, [r3, #16]
10000812:	69fb      	ldr	r3, [r7, #28]
10000814:	f003 0307 	and.w	r3, r3, #7
10000818:	009b      	lsls	r3, r3, #2
1000081a:	fa02 f303 	lsl.w	r3, r2, r3
1000081e:	69ba      	ldr	r2, [r7, #24]
10000820:	4313      	orrs	r3, r2
10000822:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10000824:	69fb      	ldr	r3, [r7, #28]
10000826:	08da      	lsrs	r2, r3, #3
10000828:	687b      	ldr	r3, [r7, #4]
1000082a:	3208      	adds	r2, #8
1000082c:	69b9      	ldr	r1, [r7, #24]
1000082e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
10000832:	687b      	ldr	r3, [r7, #4]
10000834:	681b      	ldr	r3, [r3, #0]
10000836:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10000838:	69fb      	ldr	r3, [r7, #28]
1000083a:	005b      	lsls	r3, r3, #1
1000083c:	2203      	movs	r2, #3
1000083e:	fa02 f303 	lsl.w	r3, r2, r3
10000842:	43db      	mvns	r3, r3
10000844:	69ba      	ldr	r2, [r7, #24]
10000846:	4013      	ands	r3, r2
10000848:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
1000084a:	683b      	ldr	r3, [r7, #0]
1000084c:	685b      	ldr	r3, [r3, #4]
1000084e:	f003 0203 	and.w	r2, r3, #3
10000852:	69fb      	ldr	r3, [r7, #28]
10000854:	005b      	lsls	r3, r3, #1
10000856:	fa02 f303 	lsl.w	r3, r2, r3
1000085a:	69ba      	ldr	r2, [r7, #24]
1000085c:	4313      	orrs	r3, r2
1000085e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
10000860:	687b      	ldr	r3, [r7, #4]
10000862:	69ba      	ldr	r2, [r7, #24]
10000864:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10000866:	683b      	ldr	r3, [r7, #0]
10000868:	685b      	ldr	r3, [r3, #4]
1000086a:	2b01      	cmp	r3, #1
1000086c:	d00b      	beq.n	10000886 <HAL_GPIO_Init+0xde>
1000086e:	683b      	ldr	r3, [r7, #0]
10000870:	685b      	ldr	r3, [r3, #4]
10000872:	2b02      	cmp	r3, #2
10000874:	d007      	beq.n	10000886 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10000876:	683b      	ldr	r3, [r7, #0]
10000878:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
1000087a:	2b11      	cmp	r3, #17
1000087c:	d003      	beq.n	10000886 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000087e:	683b      	ldr	r3, [r7, #0]
10000880:	685b      	ldr	r3, [r3, #4]
10000882:	2b12      	cmp	r3, #18
10000884:	d130      	bne.n	100008e8 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10000886:	687b      	ldr	r3, [r7, #4]
10000888:	689b      	ldr	r3, [r3, #8]
1000088a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
1000088c:	69fb      	ldr	r3, [r7, #28]
1000088e:	005b      	lsls	r3, r3, #1
10000890:	2203      	movs	r2, #3
10000892:	fa02 f303 	lsl.w	r3, r2, r3
10000896:	43db      	mvns	r3, r3
10000898:	69ba      	ldr	r2, [r7, #24]
1000089a:	4013      	ands	r3, r2
1000089c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
1000089e:	683b      	ldr	r3, [r7, #0]
100008a0:	68da      	ldr	r2, [r3, #12]
100008a2:	69fb      	ldr	r3, [r7, #28]
100008a4:	005b      	lsls	r3, r3, #1
100008a6:	fa02 f303 	lsl.w	r3, r2, r3
100008aa:	69ba      	ldr	r2, [r7, #24]
100008ac:	4313      	orrs	r3, r2
100008ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
100008b0:	687b      	ldr	r3, [r7, #4]
100008b2:	69ba      	ldr	r2, [r7, #24]
100008b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
100008b6:	687b      	ldr	r3, [r7, #4]
100008b8:	685b      	ldr	r3, [r3, #4]
100008ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
100008bc:	2201      	movs	r2, #1
100008be:	69fb      	ldr	r3, [r7, #28]
100008c0:	fa02 f303 	lsl.w	r3, r2, r3
100008c4:	43db      	mvns	r3, r3
100008c6:	69ba      	ldr	r2, [r7, #24]
100008c8:	4013      	ands	r3, r2
100008ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
100008cc:	683b      	ldr	r3, [r7, #0]
100008ce:	685b      	ldr	r3, [r3, #4]
100008d0:	091b      	lsrs	r3, r3, #4
100008d2:	f003 0201 	and.w	r2, r3, #1
100008d6:	69fb      	ldr	r3, [r7, #28]
100008d8:	fa02 f303 	lsl.w	r3, r2, r3
100008dc:	69ba      	ldr	r2, [r7, #24]
100008de:	4313      	orrs	r3, r2
100008e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
100008e2:	687b      	ldr	r3, [r7, #4]
100008e4:	69ba      	ldr	r2, [r7, #24]
100008e6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
100008e8:	687b      	ldr	r3, [r7, #4]
100008ea:	68db      	ldr	r3, [r3, #12]
100008ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
100008ee:	69fb      	ldr	r3, [r7, #28]
100008f0:	005b      	lsls	r3, r3, #1
100008f2:	2203      	movs	r2, #3
100008f4:	fa02 f303 	lsl.w	r3, r2, r3
100008f8:	43db      	mvns	r3, r3
100008fa:	69ba      	ldr	r2, [r7, #24]
100008fc:	4013      	ands	r3, r2
100008fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
10000900:	683b      	ldr	r3, [r7, #0]
10000902:	689a      	ldr	r2, [r3, #8]
10000904:	69fb      	ldr	r3, [r7, #28]
10000906:	005b      	lsls	r3, r3, #1
10000908:	fa02 f303 	lsl.w	r3, r2, r3
1000090c:	69ba      	ldr	r2, [r7, #24]
1000090e:	4313      	orrs	r3, r2
10000910:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
10000912:	687b      	ldr	r3, [r7, #4]
10000914:	69ba      	ldr	r2, [r7, #24]
10000916:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10000918:	683b      	ldr	r3, [r7, #0]
1000091a:	685b      	ldr	r3, [r3, #4]
1000091c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
10000920:	2b00      	cmp	r3, #0
10000922:	f000 80da 	beq.w	10000ada <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10000926:	4a2e      	ldr	r2, [pc, #184]	; (100009e0 <HAL_GPIO_Init+0x238>)
10000928:	69fb      	ldr	r3, [r7, #28]
1000092a:	089b      	lsrs	r3, r3, #2
1000092c:	3318      	adds	r3, #24
1000092e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10000932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10000934:	69fb      	ldr	r3, [r7, #28]
10000936:	f003 0303 	and.w	r3, r3, #3
1000093a:	00db      	lsls	r3, r3, #3
1000093c:	22ff      	movs	r2, #255	; 0xff
1000093e:	fa02 f303 	lsl.w	r3, r2, r3
10000942:	43db      	mvns	r3, r3
10000944:	69ba      	ldr	r2, [r7, #24]
10000946:	4013      	ands	r3, r2
10000948:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
1000094a:	687b      	ldr	r3, [r7, #4]
1000094c:	4a25      	ldr	r2, [pc, #148]	; (100009e4 <HAL_GPIO_Init+0x23c>)
1000094e:	4293      	cmp	r3, r2
10000950:	d05e      	beq.n	10000a10 <HAL_GPIO_Init+0x268>
10000952:	687b      	ldr	r3, [r7, #4]
10000954:	4a24      	ldr	r2, [pc, #144]	; (100009e8 <HAL_GPIO_Init+0x240>)
10000956:	4293      	cmp	r3, r2
10000958:	d03d      	beq.n	100009d6 <HAL_GPIO_Init+0x22e>
1000095a:	687b      	ldr	r3, [r7, #4]
1000095c:	4a23      	ldr	r2, [pc, #140]	; (100009ec <HAL_GPIO_Init+0x244>)
1000095e:	4293      	cmp	r3, r2
10000960:	d037      	beq.n	100009d2 <HAL_GPIO_Init+0x22a>
10000962:	687b      	ldr	r3, [r7, #4]
10000964:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10000968:	d031      	beq.n	100009ce <HAL_GPIO_Init+0x226>
1000096a:	687b      	ldr	r3, [r7, #4]
1000096c:	4a20      	ldr	r2, [pc, #128]	; (100009f0 <HAL_GPIO_Init+0x248>)
1000096e:	4293      	cmp	r3, r2
10000970:	d02b      	beq.n	100009ca <HAL_GPIO_Init+0x222>
10000972:	687b      	ldr	r3, [r7, #4]
10000974:	4a1f      	ldr	r2, [pc, #124]	; (100009f4 <HAL_GPIO_Init+0x24c>)
10000976:	4293      	cmp	r3, r2
10000978:	d025      	beq.n	100009c6 <HAL_GPIO_Init+0x21e>
1000097a:	687b      	ldr	r3, [r7, #4]
1000097c:	4a1e      	ldr	r2, [pc, #120]	; (100009f8 <HAL_GPIO_Init+0x250>)
1000097e:	4293      	cmp	r3, r2
10000980:	d01f      	beq.n	100009c2 <HAL_GPIO_Init+0x21a>
10000982:	687b      	ldr	r3, [r7, #4]
10000984:	4a1d      	ldr	r2, [pc, #116]	; (100009fc <HAL_GPIO_Init+0x254>)
10000986:	4293      	cmp	r3, r2
10000988:	d019      	beq.n	100009be <HAL_GPIO_Init+0x216>
1000098a:	687b      	ldr	r3, [r7, #4]
1000098c:	4a1c      	ldr	r2, [pc, #112]	; (10000a00 <HAL_GPIO_Init+0x258>)
1000098e:	4293      	cmp	r3, r2
10000990:	d013      	beq.n	100009ba <HAL_GPIO_Init+0x212>
10000992:	687b      	ldr	r3, [r7, #4]
10000994:	4a1b      	ldr	r2, [pc, #108]	; (10000a04 <HAL_GPIO_Init+0x25c>)
10000996:	4293      	cmp	r3, r2
10000998:	d00d      	beq.n	100009b6 <HAL_GPIO_Init+0x20e>
1000099a:	687b      	ldr	r3, [r7, #4]
1000099c:	4a1a      	ldr	r2, [pc, #104]	; (10000a08 <HAL_GPIO_Init+0x260>)
1000099e:	4293      	cmp	r3, r2
100009a0:	d007      	beq.n	100009b2 <HAL_GPIO_Init+0x20a>
100009a2:	687b      	ldr	r3, [r7, #4]
100009a4:	4a19      	ldr	r2, [pc, #100]	; (10000a0c <HAL_GPIO_Init+0x264>)
100009a6:	4293      	cmp	r3, r2
100009a8:	d101      	bne.n	100009ae <HAL_GPIO_Init+0x206>
100009aa:	230b      	movs	r3, #11
100009ac:	e031      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009ae:	2319      	movs	r3, #25
100009b0:	e02f      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009b2:	230a      	movs	r3, #10
100009b4:	e02d      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009b6:	2309      	movs	r3, #9
100009b8:	e02b      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009ba:	2308      	movs	r3, #8
100009bc:	e029      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009be:	2307      	movs	r3, #7
100009c0:	e027      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009c2:	2306      	movs	r3, #6
100009c4:	e025      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009c6:	2305      	movs	r3, #5
100009c8:	e023      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009ca:	2304      	movs	r3, #4
100009cc:	e021      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009ce:	2303      	movs	r3, #3
100009d0:	e01f      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009d2:	2302      	movs	r3, #2
100009d4:	e01d      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009d6:	2301      	movs	r3, #1
100009d8:	e01b      	b.n	10000a12 <HAL_GPIO_Init+0x26a>
100009da:	bf00      	nop
100009dc:	5000d0c0 	.word	0x5000d0c0
100009e0:	5000d000 	.word	0x5000d000
100009e4:	50002000 	.word	0x50002000
100009e8:	50003000 	.word	0x50003000
100009ec:	50004000 	.word	0x50004000
100009f0:	50006000 	.word	0x50006000
100009f4:	50007000 	.word	0x50007000
100009f8:	50008000 	.word	0x50008000
100009fc:	50009000 	.word	0x50009000
10000a00:	5000a000 	.word	0x5000a000
10000a04:	5000b000 	.word	0x5000b000
10000a08:	5000c000 	.word	0x5000c000
10000a0c:	54004000 	.word	0x54004000
10000a10:	2300      	movs	r3, #0
10000a12:	69fa      	ldr	r2, [r7, #28]
10000a14:	f002 0203 	and.w	r2, r2, #3
10000a18:	00d2      	lsls	r2, r2, #3
10000a1a:	4093      	lsls	r3, r2
10000a1c:	461a      	mov	r2, r3
10000a1e:	69bb      	ldr	r3, [r7, #24]
10000a20:	4313      	orrs	r3, r2
10000a22:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10000a24:	4934      	ldr	r1, [pc, #208]	; (10000af8 <HAL_GPIO_Init+0x350>)
10000a26:	69fb      	ldr	r3, [r7, #28]
10000a28:	089b      	lsrs	r3, r3, #2
10000a2a:	3318      	adds	r3, #24
10000a2c:	69ba      	ldr	r2, [r7, #24]
10000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10000a32:	697b      	ldr	r3, [r7, #20]
10000a34:	681b      	ldr	r3, [r3, #0]
10000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000a38:	68fb      	ldr	r3, [r7, #12]
10000a3a:	43db      	mvns	r3, r3
10000a3c:	69ba      	ldr	r2, [r7, #24]
10000a3e:	4013      	ands	r3, r2
10000a40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10000a42:	683b      	ldr	r3, [r7, #0]
10000a44:	685b      	ldr	r3, [r3, #4]
10000a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10000a4a:	2b00      	cmp	r3, #0
10000a4c:	d003      	beq.n	10000a56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10000a4e:	69ba      	ldr	r2, [r7, #24]
10000a50:	68fb      	ldr	r3, [r7, #12]
10000a52:	4313      	orrs	r3, r2
10000a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10000a56:	697b      	ldr	r3, [r7, #20]
10000a58:	69ba      	ldr	r2, [r7, #24]
10000a5a:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10000a5c:	697b      	ldr	r3, [r7, #20]
10000a5e:	685b      	ldr	r3, [r3, #4]
10000a60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000a62:	68fb      	ldr	r3, [r7, #12]
10000a64:	43db      	mvns	r3, r3
10000a66:	69ba      	ldr	r2, [r7, #24]
10000a68:	4013      	ands	r3, r2
10000a6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10000a6c:	683b      	ldr	r3, [r7, #0]
10000a6e:	685b      	ldr	r3, [r3, #4]
10000a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10000a74:	2b00      	cmp	r3, #0
10000a76:	d003      	beq.n	10000a80 <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10000a78:	69ba      	ldr	r2, [r7, #24]
10000a7a:	68fb      	ldr	r3, [r7, #12]
10000a7c:	4313      	orrs	r3, r2
10000a7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10000a80:	697b      	ldr	r3, [r7, #20]
10000a82:	69ba      	ldr	r2, [r7, #24]
10000a84:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10000a86:	4b1c      	ldr	r3, [pc, #112]	; (10000af8 <HAL_GPIO_Init+0x350>)
10000a88:	681b      	ldr	r3, [r3, #0]
10000a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000a8c:	68fb      	ldr	r3, [r7, #12]
10000a8e:	43db      	mvns	r3, r3
10000a90:	69ba      	ldr	r2, [r7, #24]
10000a92:	4013      	ands	r3, r2
10000a94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10000a96:	683b      	ldr	r3, [r7, #0]
10000a98:	685b      	ldr	r3, [r3, #4]
10000a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10000a9e:	2b00      	cmp	r3, #0
10000aa0:	d003      	beq.n	10000aaa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10000aa2:	69ba      	ldr	r2, [r7, #24]
10000aa4:	68fb      	ldr	r3, [r7, #12]
10000aa6:	4313      	orrs	r3, r2
10000aa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10000aaa:	4a13      	ldr	r2, [pc, #76]	; (10000af8 <HAL_GPIO_Init+0x350>)
10000aac:	69bb      	ldr	r3, [r7, #24]
10000aae:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10000ab0:	4b11      	ldr	r3, [pc, #68]	; (10000af8 <HAL_GPIO_Init+0x350>)
10000ab2:	685b      	ldr	r3, [r3, #4]
10000ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10000ab6:	68fb      	ldr	r3, [r7, #12]
10000ab8:	43db      	mvns	r3, r3
10000aba:	69ba      	ldr	r2, [r7, #24]
10000abc:	4013      	ands	r3, r2
10000abe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10000ac0:	683b      	ldr	r3, [r7, #0]
10000ac2:	685b      	ldr	r3, [r3, #4]
10000ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10000ac8:	2b00      	cmp	r3, #0
10000aca:	d003      	beq.n	10000ad4 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10000acc:	69ba      	ldr	r2, [r7, #24]
10000ace:	68fb      	ldr	r3, [r7, #12]
10000ad0:	4313      	orrs	r3, r2
10000ad2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10000ad4:	4a08      	ldr	r2, [pc, #32]	; (10000af8 <HAL_GPIO_Init+0x350>)
10000ad6:	69bb      	ldr	r3, [r7, #24]
10000ad8:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10000ada:	69fb      	ldr	r3, [r7, #28]
10000adc:	3301      	adds	r3, #1
10000ade:	61fb      	str	r3, [r7, #28]
10000ae0:	69fb      	ldr	r3, [r7, #28]
10000ae2:	2b0f      	cmp	r3, #15
10000ae4:	f67f ae6a 	bls.w	100007bc <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10000ae8:	bf00      	nop
10000aea:	bf00      	nop
10000aec:	3724      	adds	r7, #36	; 0x24
10000aee:	46bd      	mov	sp, r7
10000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
10000af4:	4770      	bx	lr
10000af6:	bf00      	nop
10000af8:	5000d000 	.word	0x5000d000

10000afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10000afc:	b480      	push	{r7}
10000afe:	b083      	sub	sp, #12
10000b00:	af00      	add	r7, sp, #0
10000b02:	6078      	str	r0, [r7, #4]
10000b04:	460b      	mov	r3, r1
10000b06:	807b      	strh	r3, [r7, #2]
10000b08:	4613      	mov	r3, r2
10000b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10000b0c:	787b      	ldrb	r3, [r7, #1]
10000b0e:	2b00      	cmp	r3, #0
10000b10:	d003      	beq.n	10000b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10000b12:	887a      	ldrh	r2, [r7, #2]
10000b14:	687b      	ldr	r3, [r7, #4]
10000b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10000b18:	e003      	b.n	10000b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10000b1a:	887b      	ldrh	r3, [r7, #2]
10000b1c:	041a      	lsls	r2, r3, #16
10000b1e:	687b      	ldr	r3, [r7, #4]
10000b20:	619a      	str	r2, [r3, #24]
}
10000b22:	bf00      	nop
10000b24:	370c      	adds	r7, #12
10000b26:	46bd      	mov	sp, r7
10000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b2c:	4770      	bx	lr
	...

10000b30 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10000b30:	b580      	push	{r7, lr}
10000b32:	b084      	sub	sp, #16
10000b34:	af00      	add	r7, sp, #0
10000b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10000b38:	2300      	movs	r3, #0
10000b3a:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10000b3c:	687b      	ldr	r3, [r7, #4]
10000b3e:	2b00      	cmp	r3, #0
10000b40:	d101      	bne.n	10000b46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10000b42:	2301      	movs	r3, #1
10000b44:	e320      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10000b46:	687b      	ldr	r3, [r7, #4]
10000b48:	681b      	ldr	r3, [r3, #0]
10000b4a:	f003 0301 	and.w	r3, r3, #1
10000b4e:	2b00      	cmp	r3, #0
10000b50:	f000 8081 	beq.w	10000c56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10000b54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b58:	6a1b      	ldr	r3, [r3, #32]
10000b5a:	f003 0303 	and.w	r3, r3, #3
10000b5e:	2b01      	cmp	r3, #1
10000b60:	d107      	bne.n	10000b72 <HAL_RCC_OscConfig+0x42>
10000b62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b66:	6a1b      	ldr	r3, [r3, #32]
10000b68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000b6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000b70:	d054      	beq.n	10000c1c <HAL_RCC_OscConfig+0xec>
10000b72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000b78:	f003 0307 	and.w	r3, r3, #7
10000b7c:	2b01      	cmp	r3, #1
10000b7e:	d107      	bne.n	10000b90 <HAL_RCC_OscConfig+0x60>
10000b80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000b8e:	d045      	beq.n	10000c1c <HAL_RCC_OscConfig+0xec>
10000b90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000b96:	f003 0303 	and.w	r3, r3, #3
10000b9a:	2b01      	cmp	r3, #1
10000b9c:	d107      	bne.n	10000bae <HAL_RCC_OscConfig+0x7e>
10000b9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000ba4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000bac:	d036      	beq.n	10000c1c <HAL_RCC_OscConfig+0xec>
10000bae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000bb4:	f003 0303 	and.w	r3, r3, #3
10000bb8:	2b01      	cmp	r3, #1
10000bba:	d10f      	bne.n	10000bdc <HAL_RCC_OscConfig+0xac>
10000bbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000bc4:	f003 0302 	and.w	r3, r3, #2
10000bc8:	2b02      	cmp	r3, #2
10000bca:	d027      	beq.n	10000c1c <HAL_RCC_OscConfig+0xec>
10000bcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000bd4:	f003 0302 	and.w	r3, r3, #2
10000bd8:	2b02      	cmp	r3, #2
10000bda:	d01f      	beq.n	10000c1c <HAL_RCC_OscConfig+0xec>
10000bdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000be0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000be4:	f003 0303 	and.w	r3, r3, #3
10000be8:	2b01      	cmp	r3, #1
10000bea:	d107      	bne.n	10000bfc <HAL_RCC_OscConfig+0xcc>
10000bec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bf0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000bf4:	f003 0302 	and.w	r3, r3, #2
10000bf8:	2b02      	cmp	r3, #2
10000bfa:	d00f      	beq.n	10000c1c <HAL_RCC_OscConfig+0xec>
10000bfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c00:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000c04:	f003 0303 	and.w	r3, r3, #3
10000c08:	2b01      	cmp	r3, #1
10000c0a:	d117      	bne.n	10000c3c <HAL_RCC_OscConfig+0x10c>
10000c0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c10:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000c14:	f003 0302 	and.w	r3, r3, #2
10000c18:	2b02      	cmp	r3, #2
10000c1a:	d10f      	bne.n	10000c3c <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000c1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c20:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
10000c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000c2c:	d112      	bne.n	10000c54 <HAL_RCC_OscConfig+0x124>
10000c2e:	687b      	ldr	r3, [r7, #4]
10000c30:	685b      	ldr	r3, [r3, #4]
10000c32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10000c36:	d00d      	beq.n	10000c54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10000c38:	2301      	movs	r3, #1
10000c3a:	e2a5      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10000c3c:	687b      	ldr	r3, [r7, #4]
10000c3e:	685b      	ldr	r3, [r3, #4]
10000c40:	4618      	mov	r0, r3
10000c42:	f000 faa7 	bl	10001194 <HAL_RCC_HSEConfig>
10000c46:	4603      	mov	r3, r0
10000c48:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10000c4a:	7bfb      	ldrb	r3, [r7, #15]
10000c4c:	2b00      	cmp	r3, #0
10000c4e:	d002      	beq.n	10000c56 <HAL_RCC_OscConfig+0x126>
      {
        return result;
10000c50:	7bfb      	ldrb	r3, [r7, #15]
10000c52:	e299      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10000c54:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10000c56:	687b      	ldr	r3, [r7, #4]
10000c58:	681b      	ldr	r3, [r3, #0]
10000c5a:	f003 0302 	and.w	r3, r3, #2
10000c5e:	2b00      	cmp	r3, #0
10000c60:	f000 814e 	beq.w	10000f00 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10000c64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c68:	6a1b      	ldr	r3, [r3, #32]
10000c6a:	f003 0303 	and.w	r3, r3, #3
10000c6e:	2b00      	cmp	r3, #0
10000c70:	d107      	bne.n	10000c82 <HAL_RCC_OscConfig+0x152>
10000c72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c76:	6a1b      	ldr	r3, [r3, #32]
10000c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000c7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000c80:	d055      	beq.n	10000d2e <HAL_RCC_OscConfig+0x1fe>
10000c82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000c88:	f003 0307 	and.w	r3, r3, #7
10000c8c:	2b00      	cmp	r3, #0
10000c8e:	d107      	bne.n	10000ca0 <HAL_RCC_OscConfig+0x170>
10000c90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000c96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000c9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000c9e:	d046      	beq.n	10000d2e <HAL_RCC_OscConfig+0x1fe>
10000ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000ca6:	f003 0303 	and.w	r3, r3, #3
10000caa:	2b00      	cmp	r3, #0
10000cac:	d107      	bne.n	10000cbe <HAL_RCC_OscConfig+0x18e>
10000cae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000cbc:	d037      	beq.n	10000d2e <HAL_RCC_OscConfig+0x1fe>
10000cbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000cc4:	f003 0303 	and.w	r3, r3, #3
10000cc8:	2b00      	cmp	r3, #0
10000cca:	d10f      	bne.n	10000cec <HAL_RCC_OscConfig+0x1bc>
10000ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000cd4:	f003 0302 	and.w	r3, r3, #2
10000cd8:	2b02      	cmp	r3, #2
10000cda:	d028      	beq.n	10000d2e <HAL_RCC_OscConfig+0x1fe>
10000cdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000ce4:	f003 0302 	and.w	r3, r3, #2
10000ce8:	2b02      	cmp	r3, #2
10000cea:	d020      	beq.n	10000d2e <HAL_RCC_OscConfig+0x1fe>
10000cec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000cf0:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000cf4:	f003 0303 	and.w	r3, r3, #3
10000cf8:	2b00      	cmp	r3, #0
10000cfa:	d107      	bne.n	10000d0c <HAL_RCC_OscConfig+0x1dc>
10000cfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d00:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000d04:	f003 0302 	and.w	r3, r3, #2
10000d08:	2b02      	cmp	r3, #2
10000d0a:	d010      	beq.n	10000d2e <HAL_RCC_OscConfig+0x1fe>
10000d0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d10:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000d14:	f003 0303 	and.w	r3, r3, #3
10000d18:	2b00      	cmp	r3, #0
10000d1a:	f040 8088 	bne.w	10000e2e <HAL_RCC_OscConfig+0x2fe>
10000d1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d22:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000d26:	f003 0302 	and.w	r3, r3, #2
10000d2a:	2b02      	cmp	r3, #2
10000d2c:	d17f      	bne.n	10000e2e <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000d2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d32:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000d36:	f003 0301 	and.w	r3, r3, #1
10000d3a:	2b01      	cmp	r3, #1
10000d3c:	d105      	bne.n	10000d4a <HAL_RCC_OscConfig+0x21a>
10000d3e:	687b      	ldr	r3, [r7, #4]
10000d40:	68db      	ldr	r3, [r3, #12]
10000d42:	2b01      	cmp	r3, #1
10000d44:	d001      	beq.n	10000d4a <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10000d46:	2301      	movs	r3, #1
10000d48:	e21e      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000d4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d4e:	699b      	ldr	r3, [r3, #24]
10000d50:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000d54:	687b      	ldr	r3, [r7, #4]
10000d56:	691b      	ldr	r3, [r3, #16]
10000d58:	021b      	lsls	r3, r3, #8
10000d5a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000d5e:	4313      	orrs	r3, r2
10000d60:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000d62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000d68:	f003 0303 	and.w	r3, r3, #3
10000d6c:	2b00      	cmp	r3, #0
10000d6e:	d10f      	bne.n	10000d90 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10000d78:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10000d7c:	2b02      	cmp	r3, #2
10000d7e:	d047      	beq.n	10000e10 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000d80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10000d88:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10000d8c:	2b02      	cmp	r3, #2
10000d8e:	d03f      	beq.n	10000e10 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000d90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000d94:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000d98:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10000d9c:	2b00      	cmp	r3, #0
10000d9e:	d107      	bne.n	10000db0 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000da0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000da4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000da8:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10000dac:	2b02      	cmp	r3, #2
10000dae:	d02f      	beq.n	10000e10 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000db0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000db4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000db8:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10000dbc:	2b00      	cmp	r3, #0
10000dbe:	d107      	bne.n	10000dd0 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10000dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dc4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000dc8:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10000dcc:	2b02      	cmp	r3, #2
10000dce:	d01f      	beq.n	10000e10 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000dd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000dd4:	699b      	ldr	r3, [r3, #24]
10000dd6:	f023 0203 	bic.w	r2, r3, #3
10000dda:	687b      	ldr	r3, [r7, #4]
10000ddc:	695b      	ldr	r3, [r3, #20]
10000dde:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000de2:	4313      	orrs	r3, r2
10000de4:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10000de6:	f7ff fb9d 	bl	10000524 <HAL_GetTick>
10000dea:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000dec:	e008      	b.n	10000e00 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000dee:	f7ff fb99 	bl	10000524 <HAL_GetTick>
10000df2:	4602      	mov	r2, r0
10000df4:	68bb      	ldr	r3, [r7, #8]
10000df6:	1ad3      	subs	r3, r2, r3
10000df8:	2b64      	cmp	r3, #100	; 0x64
10000dfa:	d901      	bls.n	10000e00 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10000dfc:	2303      	movs	r3, #3
10000dfe:	e1c3      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000e00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e04:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000e08:	f003 0304 	and.w	r3, r3, #4
10000e0c:	2b04      	cmp	r3, #4
10000e0e:	d1ee      	bne.n	10000dee <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10000e10:	f001 f809 	bl	10001e26 <HAL_RCC_GetSystemCoreClockFreq>
10000e14:	4603      	mov	r3, r0
10000e16:	4ab3      	ldr	r2, [pc, #716]	; (100010e4 <HAL_RCC_OscConfig+0x5b4>)
10000e18:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10000e1a:	4bb3      	ldr	r3, [pc, #716]	; (100010e8 <HAL_RCC_OscConfig+0x5b8>)
10000e1c:	681b      	ldr	r3, [r3, #0]
10000e1e:	4618      	mov	r0, r3
10000e20:	f7ff fb36 	bl	10000490 <HAL_InitTick>
10000e24:	4603      	mov	r3, r0
10000e26:	2b00      	cmp	r3, #0
10000e28:	d069      	beq.n	10000efe <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10000e2a:	2301      	movs	r3, #1
10000e2c:	e1ac      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10000e2e:	687b      	ldr	r3, [r7, #4]
10000e30:	68db      	ldr	r3, [r3, #12]
10000e32:	2b00      	cmp	r3, #0
10000e34:	d049      	beq.n	10000eca <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10000e36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e3a:	68db      	ldr	r3, [r3, #12]
10000e3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000e40:	f043 0301 	orr.w	r3, r3, #1
10000e44:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000e46:	f7ff fb6d 	bl	10000524 <HAL_GetTick>
10000e4a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000e4c:	e008      	b.n	10000e60 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000e4e:	f7ff fb69 	bl	10000524 <HAL_GetTick>
10000e52:	4602      	mov	r2, r0
10000e54:	68bb      	ldr	r3, [r7, #8]
10000e56:	1ad3      	subs	r3, r2, r3
10000e58:	2b64      	cmp	r3, #100	; 0x64
10000e5a:	d901      	bls.n	10000e60 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10000e5c:	2303      	movs	r3, #3
10000e5e:	e193      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10000e60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e64:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000e68:	f003 0301 	and.w	r3, r3, #1
10000e6c:	2b01      	cmp	r3, #1
10000e6e:	d1ee      	bne.n	10000e4e <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10000e70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000e74:	699b      	ldr	r3, [r3, #24]
10000e76:	f023 0203 	bic.w	r2, r3, #3
10000e7a:	687b      	ldr	r3, [r7, #4]
10000e7c:	695b      	ldr	r3, [r3, #20]
10000e7e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000e82:	4313      	orrs	r3, r2
10000e84:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000e86:	f7ff fb4d 	bl	10000524 <HAL_GetTick>
10000e8a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000e8c:	e008      	b.n	10000ea0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000e8e:	f7ff fb49 	bl	10000524 <HAL_GetTick>
10000e92:	4602      	mov	r2, r0
10000e94:	68bb      	ldr	r3, [r7, #8]
10000e96:	1ad3      	subs	r3, r2, r3
10000e98:	2b64      	cmp	r3, #100	; 0x64
10000e9a:	d901      	bls.n	10000ea0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10000e9c:	2303      	movs	r3, #3
10000e9e:	e173      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10000ea0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ea4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000ea8:	f003 0304 	and.w	r3, r3, #4
10000eac:	2b04      	cmp	r3, #4
10000eae:	d1ee      	bne.n	10000e8e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10000eb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000eb4:	699b      	ldr	r3, [r3, #24]
10000eb6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10000eba:	687b      	ldr	r3, [r7, #4]
10000ebc:	691b      	ldr	r3, [r3, #16]
10000ebe:	021b      	lsls	r3, r3, #8
10000ec0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000ec4:	4313      	orrs	r3, r2
10000ec6:	618b      	str	r3, [r1, #24]
10000ec8:	e01a      	b.n	10000f00 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10000eca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ece:	2201      	movs	r2, #1
10000ed0:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000ed2:	f7ff fb27 	bl	10000524 <HAL_GetTick>
10000ed6:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000ed8:	e008      	b.n	10000eec <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10000eda:	f7ff fb23 	bl	10000524 <HAL_GetTick>
10000ede:	4602      	mov	r2, r0
10000ee0:	68bb      	ldr	r3, [r7, #8]
10000ee2:	1ad3      	subs	r3, r2, r3
10000ee4:	2b64      	cmp	r3, #100	; 0x64
10000ee6:	d901      	bls.n	10000eec <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10000ee8:	2303      	movs	r3, #3
10000eea:	e14d      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10000eec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000ef0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000ef4:	f003 0301 	and.w	r3, r3, #1
10000ef8:	2b01      	cmp	r3, #1
10000efa:	d0ee      	beq.n	10000eda <HAL_RCC_OscConfig+0x3aa>
10000efc:	e000      	b.n	10000f00 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10000efe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10000f00:	687b      	ldr	r3, [r7, #4]
10000f02:	681b      	ldr	r3, [r3, #0]
10000f04:	f003 0310 	and.w	r3, r3, #16
10000f08:	2b00      	cmp	r3, #0
10000f0a:	f000 8091 	beq.w	10001030 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10000f0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f12:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10000f16:	f003 0303 	and.w	r3, r3, #3
10000f1a:	2b02      	cmp	r3, #2
10000f1c:	d107      	bne.n	10000f2e <HAL_RCC_OscConfig+0x3fe>
10000f1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f22:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10000f26:	f003 0302 	and.w	r3, r3, #2
10000f2a:	2b02      	cmp	r3, #2
10000f2c:	d01e      	beq.n	10000f6c <HAL_RCC_OscConfig+0x43c>
10000f2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000f34:	f003 0303 	and.w	r3, r3, #3
10000f38:	2b02      	cmp	r3, #2
10000f3a:	d107      	bne.n	10000f4c <HAL_RCC_OscConfig+0x41c>
10000f3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10000f42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10000f46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10000f4a:	d00f      	beq.n	10000f6c <HAL_RCC_OscConfig+0x43c>
10000f4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f50:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10000f54:	f003 0303 	and.w	r3, r3, #3
10000f58:	2b02      	cmp	r3, #2
10000f5a:	d122      	bne.n	10000fa2 <HAL_RCC_OscConfig+0x472>
10000f5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f60:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10000f64:	f003 0302 	and.w	r3, r3, #2
10000f68:	2b02      	cmp	r3, #2
10000f6a:	d11a      	bne.n	10000fa2 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000f6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f70:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000f74:	f003 0310 	and.w	r3, r3, #16
10000f78:	2b10      	cmp	r3, #16
10000f7a:	d105      	bne.n	10000f88 <HAL_RCC_OscConfig+0x458>
10000f7c:	687b      	ldr	r3, [r7, #4]
10000f7e:	69db      	ldr	r3, [r3, #28]
10000f80:	2b10      	cmp	r3, #16
10000f82:	d001      	beq.n	10000f88 <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10000f84:	2301      	movs	r3, #1
10000f86:	e0ff      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000f88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000f8c:	69db      	ldr	r3, [r3, #28]
10000f8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000f92:	687b      	ldr	r3, [r7, #4]
10000f94:	6a1b      	ldr	r3, [r3, #32]
10000f96:	021b      	lsls	r3, r3, #8
10000f98:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000f9c:	4313      	orrs	r3, r2
10000f9e:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10000fa0:	e046      	b.n	10001030 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10000fa2:	687b      	ldr	r3, [r7, #4]
10000fa4:	69db      	ldr	r3, [r3, #28]
10000fa6:	2b00      	cmp	r3, #0
10000fa8:	d029      	beq.n	10000ffe <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
10000faa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fae:	68db      	ldr	r3, [r3, #12]
10000fb0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10000fb4:	f043 0310 	orr.w	r3, r3, #16
10000fb8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10000fba:	f7ff fab3 	bl	10000524 <HAL_GetTick>
10000fbe:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000fc0:	e008      	b.n	10000fd4 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10000fc2:	f7ff faaf 	bl	10000524 <HAL_GetTick>
10000fc6:	4602      	mov	r2, r0
10000fc8:	68bb      	ldr	r3, [r7, #8]
10000fca:	1ad3      	subs	r3, r2, r3
10000fcc:	2b64      	cmp	r3, #100	; 0x64
10000fce:	d901      	bls.n	10000fd4 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10000fd0:	2303      	movs	r3, #3
10000fd2:	e0d9      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10000fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fd8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10000fdc:	f003 0310 	and.w	r3, r3, #16
10000fe0:	2b10      	cmp	r3, #16
10000fe2:	d1ee      	bne.n	10000fc2 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10000fe4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000fe8:	69db      	ldr	r3, [r3, #28]
10000fea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10000fee:	687b      	ldr	r3, [r7, #4]
10000ff0:	6a1b      	ldr	r3, [r3, #32]
10000ff2:	021b      	lsls	r3, r3, #8
10000ff4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10000ff8:	4313      	orrs	r3, r2
10000ffa:	61cb      	str	r3, [r1, #28]
10000ffc:	e018      	b.n	10001030 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10000ffe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001002:	2210      	movs	r2, #16
10001004:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001006:	f7ff fa8d 	bl	10000524 <HAL_GetTick>
1000100a:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
1000100c:	e008      	b.n	10001020 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
1000100e:	f7ff fa89 	bl	10000524 <HAL_GetTick>
10001012:	4602      	mov	r2, r0
10001014:	68bb      	ldr	r3, [r7, #8]
10001016:	1ad3      	subs	r3, r2, r3
10001018:	2b64      	cmp	r3, #100	; 0x64
1000101a:	d901      	bls.n	10001020 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
1000101c:	2303      	movs	r3, #3
1000101e:	e0b3      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10001020:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001024:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001028:	f003 0310 	and.w	r3, r3, #16
1000102c:	2b10      	cmp	r3, #16
1000102e:	d0ee      	beq.n	1000100e <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
10001030:	687b      	ldr	r3, [r7, #4]
10001032:	681b      	ldr	r3, [r3, #0]
10001034:	f003 0308 	and.w	r3, r3, #8
10001038:	2b00      	cmp	r3, #0
1000103a:	d042      	beq.n	100010c2 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
1000103c:	687b      	ldr	r3, [r7, #4]
1000103e:	699b      	ldr	r3, [r3, #24]
10001040:	2b00      	cmp	r3, #0
10001042:	d01f      	beq.n	10001084 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
10001044:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001048:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000104c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001050:	f043 0301 	orr.w	r3, r3, #1
10001054:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001058:	f7ff fa64 	bl	10000524 <HAL_GetTick>
1000105c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
1000105e:	e008      	b.n	10001072 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10001060:	f7ff fa60 	bl	10000524 <HAL_GetTick>
10001064:	4602      	mov	r2, r0
10001066:	68bb      	ldr	r3, [r7, #8]
10001068:	1ad3      	subs	r3, r2, r3
1000106a:	2b64      	cmp	r3, #100	; 0x64
1000106c:	d901      	bls.n	10001072 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
1000106e:	2303      	movs	r3, #3
10001070:	e08a      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
10001072:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001076:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000107a:	f003 0302 	and.w	r3, r3, #2
1000107e:	2b02      	cmp	r3, #2
10001080:	d1ee      	bne.n	10001060 <HAL_RCC_OscConfig+0x530>
10001082:	e01e      	b.n	100010c2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10001084:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001088:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000108c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001090:	f023 0301 	bic.w	r3, r3, #1
10001094:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10001098:	f7ff fa44 	bl	10000524 <HAL_GetTick>
1000109c:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
1000109e:	e008      	b.n	100010b2 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100010a0:	f7ff fa40 	bl	10000524 <HAL_GetTick>
100010a4:	4602      	mov	r2, r0
100010a6:	68bb      	ldr	r3, [r7, #8]
100010a8:	1ad3      	subs	r3, r2, r3
100010aa:	2b64      	cmp	r3, #100	; 0x64
100010ac:	d901      	bls.n	100010b2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
100010ae:	2303      	movs	r3, #3
100010b0:	e06a      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
100010b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100010b6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100010ba:	f003 0302 	and.w	r3, r3, #2
100010be:	2b02      	cmp	r3, #2
100010c0:	d0ee      	beq.n	100010a0 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
100010c2:	687b      	ldr	r3, [r7, #4]
100010c4:	681b      	ldr	r3, [r3, #0]
100010c6:	f003 0304 	and.w	r3, r3, #4
100010ca:	2b00      	cmp	r3, #0
100010cc:	d02b      	beq.n	10001126 <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100010ce:	4b07      	ldr	r3, [pc, #28]	; (100010ec <HAL_RCC_OscConfig+0x5bc>)
100010d0:	681b      	ldr	r3, [r3, #0]
100010d2:	4a06      	ldr	r2, [pc, #24]	; (100010ec <HAL_RCC_OscConfig+0x5bc>)
100010d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100010d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100010da:	f7ff fa23 	bl	10000524 <HAL_GetTick>
100010de:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100010e0:	e00f      	b.n	10001102 <HAL_RCC_OscConfig+0x5d2>
100010e2:	bf00      	nop
100010e4:	10020000 	.word	0x10020000
100010e8:	10020004 	.word	0x10020004
100010ec:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100010f0:	f7ff fa18 	bl	10000524 <HAL_GetTick>
100010f4:	4602      	mov	r2, r0
100010f6:	68bb      	ldr	r3, [r7, #8]
100010f8:	1ad3      	subs	r3, r2, r3
100010fa:	2b64      	cmp	r3, #100	; 0x64
100010fc:	d901      	bls.n	10001102 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
100010fe:	2303      	movs	r3, #3
10001100:	e042      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10001102:	4b23      	ldr	r3, [pc, #140]	; (10001190 <HAL_RCC_OscConfig+0x660>)
10001104:	681b      	ldr	r3, [r3, #0]
10001106:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000110a:	2b00      	cmp	r3, #0
1000110c:	d0f0      	beq.n	100010f0 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
1000110e:	687b      	ldr	r3, [r7, #4]
10001110:	689b      	ldr	r3, [r3, #8]
10001112:	4618      	mov	r0, r3
10001114:	f000 f8a9 	bl	1000126a <HAL_RCC_LSEConfig>
10001118:	4603      	mov	r3, r0
1000111a:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
1000111c:	7bfb      	ldrb	r3, [r7, #15]
1000111e:	2b00      	cmp	r3, #0
10001120:	d001      	beq.n	10001126 <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
10001122:	7bfb      	ldrb	r3, [r7, #15]
10001124:	e030      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
10001126:	687b      	ldr	r3, [r7, #4]
10001128:	3324      	adds	r3, #36	; 0x24
1000112a:	4618      	mov	r0, r3
1000112c:	f000 f91a 	bl	10001364 <RCC_PLL1_Config>
10001130:	4603      	mov	r3, r0
10001132:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001134:	7bfb      	ldrb	r3, [r7, #15]
10001136:	2b00      	cmp	r3, #0
10001138:	d001      	beq.n	1000113e <HAL_RCC_OscConfig+0x60e>
  {
    return result;
1000113a:	7bfb      	ldrb	r3, [r7, #15]
1000113c:	e024      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
1000113e:	687b      	ldr	r3, [r7, #4]
10001140:	3360      	adds	r3, #96	; 0x60
10001142:	4618      	mov	r0, r3
10001144:	f000 fecc 	bl	10001ee0 <RCCEx_PLL2_Config>
10001148:	4603      	mov	r3, r0
1000114a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000114c:	7bfb      	ldrb	r3, [r7, #15]
1000114e:	2b00      	cmp	r3, #0
10001150:	d001      	beq.n	10001156 <HAL_RCC_OscConfig+0x626>
  {
    return result;
10001152:	7bfb      	ldrb	r3, [r7, #15]
10001154:	e018      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
10001156:	687b      	ldr	r3, [r7, #4]
10001158:	339c      	adds	r3, #156	; 0x9c
1000115a:	4618      	mov	r0, r3
1000115c:	f001 f842 	bl	100021e4 <RCCEx_PLL3_Config>
10001160:	4603      	mov	r3, r0
10001162:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10001164:	7bfb      	ldrb	r3, [r7, #15]
10001166:	2b00      	cmp	r3, #0
10001168:	d001      	beq.n	1000116e <HAL_RCC_OscConfig+0x63e>
  {
    return result;
1000116a:	7bfb      	ldrb	r3, [r7, #15]
1000116c:	e00c      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
1000116e:	687b      	ldr	r3, [r7, #4]
10001170:	33d8      	adds	r3, #216	; 0xd8
10001172:	4618      	mov	r0, r3
10001174:	f001 f9a0 	bl	100024b8 <RCCEx_PLL4_Config>
10001178:	4603      	mov	r3, r0
1000117a:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
1000117c:	7bfb      	ldrb	r3, [r7, #15]
1000117e:	2b00      	cmp	r3, #0
10001180:	d001      	beq.n	10001186 <HAL_RCC_OscConfig+0x656>
  {
    return result;
10001182:	7bfb      	ldrb	r3, [r7, #15]
10001184:	e000      	b.n	10001188 <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
10001186:	2300      	movs	r3, #0
}
10001188:	4618      	mov	r0, r3
1000118a:	3710      	adds	r7, #16
1000118c:	46bd      	mov	sp, r7
1000118e:	bd80      	pop	{r7, pc}
10001190:	50001000 	.word	0x50001000

10001194 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10001194:	b580      	push	{r7, lr}
10001196:	b084      	sub	sp, #16
10001198:	af00      	add	r7, sp, #0
1000119a:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
1000119c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011a0:	f44f 7280 	mov.w	r2, #256	; 0x100
100011a4:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100011a6:	f7ff f9bd 	bl	10000524 <HAL_GetTick>
100011aa:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100011ac:	e008      	b.n	100011c0 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100011ae:	f7ff f9b9 	bl	10000524 <HAL_GetTick>
100011b2:	4602      	mov	r2, r0
100011b4:	68fb      	ldr	r3, [r7, #12]
100011b6:	1ad3      	subs	r3, r2, r3
100011b8:	2b64      	cmp	r3, #100	; 0x64
100011ba:	d901      	bls.n	100011c0 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
100011bc:	2303      	movs	r3, #3
100011be:	e050      	b.n	10001262 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
100011c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011c4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100011c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
100011cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100011d0:	d0ed      	beq.n	100011ae <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
100011d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011d6:	f44f 6290 	mov.w	r2, #1152	; 0x480
100011da:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
100011dc:	687b      	ldr	r3, [r7, #4]
100011de:	2b00      	cmp	r3, #0
100011e0:	d03e      	beq.n	10001260 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
100011e2:	687b      	ldr	r3, [r7, #4]
100011e4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
100011e8:	d108      	bne.n	100011fc <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
100011ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100011ee:	68db      	ldr	r3, [r3, #12]
100011f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100011f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100011f8:	60d3      	str	r3, [r2, #12]
100011fa:	e013      	b.n	10001224 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
100011fc:	687b      	ldr	r3, [r7, #4]
100011fe:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10001202:	d10f      	bne.n	10001224 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10001204:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001208:	68db      	ldr	r3, [r3, #12]
1000120a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000120e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10001212:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10001214:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001218:	68db      	ldr	r3, [r3, #12]
1000121a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000121e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
10001222:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
10001224:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001228:	68db      	ldr	r3, [r3, #12]
1000122a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000122e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
10001232:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001234:	f7ff f976 	bl	10000524 <HAL_GetTick>
10001238:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000123a:	e008      	b.n	1000124e <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
1000123c:	f7ff f972 	bl	10000524 <HAL_GetTick>
10001240:	4602      	mov	r2, r0
10001242:	68fb      	ldr	r3, [r7, #12]
10001244:	1ad3      	subs	r3, r2, r3
10001246:	2b64      	cmp	r3, #100	; 0x64
10001248:	d901      	bls.n	1000124e <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
1000124a:	2303      	movs	r3, #3
1000124c:	e009      	b.n	10001262 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
1000124e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001252:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000125a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
1000125e:	d1ed      	bne.n	1000123c <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
10001260:	2300      	movs	r3, #0
}
10001262:	4618      	mov	r0, r3
10001264:	3710      	adds	r7, #16
10001266:	46bd      	mov	sp, r7
10001268:	bd80      	pop	{r7, pc}

1000126a <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
1000126a:	b580      	push	{r7, lr}
1000126c:	b084      	sub	sp, #16
1000126e:	af00      	add	r7, sp, #0
10001270:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001272:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001276:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000127a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000127e:	f023 0301 	bic.w	r3, r3, #1
10001282:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001286:	f7ff f94d 	bl	10000524 <HAL_GetTick>
1000128a:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
1000128c:	e00a      	b.n	100012a4 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
1000128e:	f7ff f949 	bl	10000524 <HAL_GetTick>
10001292:	4602      	mov	r2, r0
10001294:	68fb      	ldr	r3, [r7, #12]
10001296:	1ad3      	subs	r3, r2, r3
10001298:	f241 3288 	movw	r2, #5000	; 0x1388
1000129c:	4293      	cmp	r3, r2
1000129e:	d901      	bls.n	100012a4 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
100012a0:	2303      	movs	r3, #3
100012a2:	e05b      	b.n	1000135c <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
100012a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100012ac:	f003 0304 	and.w	r3, r3, #4
100012b0:	2b04      	cmp	r3, #4
100012b2:	d0ec      	beq.n	1000128e <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
100012b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100012bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012c0:	f023 030a 	bic.w	r3, r3, #10
100012c4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
100012c8:	687b      	ldr	r3, [r7, #4]
100012ca:	2b00      	cmp	r3, #0
100012cc:	d045      	beq.n	1000135a <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
100012ce:	687b      	ldr	r3, [r7, #4]
100012d0:	2b03      	cmp	r3, #3
100012d2:	d10a      	bne.n	100012ea <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
100012d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100012dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012e0:	f043 0302 	orr.w	r3, r3, #2
100012e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
100012e8:	e016      	b.n	10001318 <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
100012ea:	687b      	ldr	r3, [r7, #4]
100012ec:	2b0b      	cmp	r3, #11
100012ee:	d113      	bne.n	10001318 <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
100012f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100012f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100012fc:	f043 0308 	orr.w	r3, r3, #8
10001300:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10001304:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001308:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000130c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001310:	f043 0302 	orr.w	r3, r3, #2
10001314:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
10001318:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000131c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001320:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001324:	f043 0301 	orr.w	r3, r3, #1
10001328:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000132c:	f7ff f8fa 	bl	10000524 <HAL_GetTick>
10001330:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
10001332:	e00a      	b.n	1000134a <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10001334:	f7ff f8f6 	bl	10000524 <HAL_GetTick>
10001338:	4602      	mov	r2, r0
1000133a:	68fb      	ldr	r3, [r7, #12]
1000133c:	1ad3      	subs	r3, r2, r3
1000133e:	f241 3288 	movw	r2, #5000	; 0x1388
10001342:	4293      	cmp	r3, r2
10001344:	d901      	bls.n	1000134a <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
10001346:	2303      	movs	r3, #3
10001348:	e008      	b.n	1000135c <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
1000134a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000134e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10001352:	f003 0304 	and.w	r3, r3, #4
10001356:	2b04      	cmp	r3, #4
10001358:	d1ec      	bne.n	10001334 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
1000135a:	2300      	movs	r3, #0
}
1000135c:	4618      	mov	r0, r3
1000135e:	3710      	adds	r7, #16
10001360:	46bd      	mov	sp, r7
10001362:	bd80      	pop	{r7, pc}

10001364 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
10001364:	b580      	push	{r7, lr}
10001366:	b084      	sub	sp, #16
10001368:	af00      	add	r7, sp, #0
1000136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
1000136c:	687b      	ldr	r3, [r7, #4]
1000136e:	681b      	ldr	r3, [r3, #0]
10001370:	2b00      	cmp	r3, #0
10001372:	f000 8174 	beq.w	1000165e <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
10001376:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000137a:	6a1b      	ldr	r3, [r3, #32]
1000137c:	f003 0303 	and.w	r3, r3, #3
10001380:	2b02      	cmp	r3, #2
10001382:	d108      	bne.n	10001396 <RCC_PLL1_Config+0x32>
10001384:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001388:	6a1b      	ldr	r3, [r3, #32]
1000138a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000138e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001392:	f000 8162 	beq.w	1000165a <RCC_PLL1_Config+0x2f6>
10001396:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000139a:	6a1b      	ldr	r3, [r3, #32]
1000139c:	f003 0303 	and.w	r3, r3, #3
100013a0:	2b03      	cmp	r3, #3
100013a2:	d108      	bne.n	100013b6 <RCC_PLL1_Config+0x52>
100013a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013a8:	6a1b      	ldr	r3, [r3, #32]
100013aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100013ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100013b2:	f000 8152 	beq.w	1000165a <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
100013b6:	687b      	ldr	r3, [r7, #4]
100013b8:	681b      	ldr	r3, [r3, #0]
100013ba:	2b02      	cmp	r3, #2
100013bc:	f040 8123 	bne.w	10001606 <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100013c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100013c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100013d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
100013d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100013d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100013dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100013e0:	f023 0301 	bic.w	r3, r3, #1
100013e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100013e8:	f7ff f89c 	bl	10000524 <HAL_GetTick>
100013ec:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100013ee:	e008      	b.n	10001402 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100013f0:	f7ff f898 	bl	10000524 <HAL_GetTick>
100013f4:	4602      	mov	r2, r0
100013f6:	68fb      	ldr	r3, [r7, #12]
100013f8:	1ad3      	subs	r3, r2, r3
100013fa:	2b64      	cmp	r3, #100	; 0x64
100013fc:	d901      	bls.n	10001402 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
100013fe:	2303      	movs	r3, #3
10001400:	e12e      	b.n	10001660 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001402:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001406:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000140a:	f003 0302 	and.w	r3, r3, #2
1000140e:	2b02      	cmp	r3, #2
10001410:	d0ee      	beq.n	100013f0 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10001412:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001418:	f003 0307 	and.w	r3, r3, #7
1000141c:	2b02      	cmp	r3, #2
1000141e:	d112      	bne.n	10001446 <RCC_PLL1_Config+0xe2>
10001420:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001426:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000142a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000142e:	d10a      	bne.n	10001446 <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001430:	687b      	ldr	r3, [r7, #4]
10001432:	685a      	ldr	r2, [r3, #4]
10001434:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000143a:	f003 0303 	and.w	r3, r3, #3
1000143e:	429a      	cmp	r2, r3
10001440:	d00c      	beq.n	1000145c <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
10001442:	2301      	movs	r3, #1
10001444:	e10c      	b.n	10001660 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
10001446:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000144c:	f023 0203 	bic.w	r2, r3, #3
10001450:	687b      	ldr	r3, [r7, #4]
10001452:	685b      	ldr	r3, [r3, #4]
10001454:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001458:	4313      	orrs	r3, r2
1000145a:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
1000145c:	e008      	b.n	10001470 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000145e:	f7ff f861 	bl	10000524 <HAL_GetTick>
10001462:	4602      	mov	r2, r0
10001464:	68fb      	ldr	r3, [r7, #12]
10001466:	1ad3      	subs	r3, r2, r3
10001468:	2b64      	cmp	r3, #100	; 0x64
1000146a:	d901      	bls.n	10001470 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
1000146c:	2303      	movs	r3, #3
1000146e:	e0f7      	b.n	10001660 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
10001470:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001476:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000147a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000147e:	d1ee      	bne.n	1000145e <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10001480:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001484:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
10001488:	4b77      	ldr	r3, [pc, #476]	; (10001668 <RCC_PLL1_Config+0x304>)
1000148a:	4013      	ands	r3, r2
1000148c:	687a      	ldr	r2, [r7, #4]
1000148e:	68d2      	ldr	r2, [r2, #12]
10001490:	1e51      	subs	r1, r2, #1
10001492:	687a      	ldr	r2, [r7, #4]
10001494:	6892      	ldr	r2, [r2, #8]
10001496:	3a01      	subs	r2, #1
10001498:	0412      	lsls	r2, r2, #16
1000149a:	430a      	orrs	r2, r1
1000149c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100014a0:	4313      	orrs	r3, r2
100014a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
100014a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
100014ae:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100014b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100014b6:	687a      	ldr	r2, [r7, #4]
100014b8:	6912      	ldr	r2, [r2, #16]
100014ba:	1e51      	subs	r1, r2, #1
100014bc:	687a      	ldr	r2, [r7, #4]
100014be:	6952      	ldr	r2, [r2, #20]
100014c0:	3a01      	subs	r2, #1
100014c2:	0212      	lsls	r2, r2, #8
100014c4:	4311      	orrs	r1, r2
100014c6:	687a      	ldr	r2, [r7, #4]
100014c8:	6992      	ldr	r2, [r2, #24]
100014ca:	3a01      	subs	r2, #1
100014cc:	0412      	lsls	r2, r2, #16
100014ce:	430a      	orrs	r2, r1
100014d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100014d4:	4313      	orrs	r3, r2
100014d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
100014da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100014de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100014e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100014e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100014ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
100014ee:	687b      	ldr	r3, [r7, #4]
100014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014f2:	2b02      	cmp	r3, #2
100014f4:	d003      	beq.n	100014fe <RCC_PLL1_Config+0x19a>
100014f6:	687b      	ldr	r3, [r7, #4]
100014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100014fa:	2b00      	cmp	r3, #0
100014fc:	d10c      	bne.n	10001518 <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
100014fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001506:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000150a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000150e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001512:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
10001516:	e00f      	b.n	10001538 <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
10001518:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000151c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001520:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10001524:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10001528:	687a      	ldr	r2, [r7, #4]
1000152a:	6a12      	ldr	r2, [r2, #32]
1000152c:	00d2      	lsls	r2, r2, #3
1000152e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001532:	4313      	orrs	r3, r2
10001534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
10001538:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000153c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10001540:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10001548:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000154c:	687b      	ldr	r3, [r7, #4]
1000154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001550:	2b02      	cmp	r3, #2
10001552:	d124      	bne.n	1000159e <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
10001554:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
1000155c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10001560:	687b      	ldr	r3, [r7, #4]
10001562:	6a99      	ldr	r1, [r3, #40]	; 0x28
10001564:	687b      	ldr	r3, [r7, #4]
10001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001568:	4319      	orrs	r1, r3
1000156a:	687b      	ldr	r3, [r7, #4]
1000156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000156e:	4319      	orrs	r1, r3
10001570:	687b      	ldr	r3, [r7, #4]
10001572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10001574:	4319      	orrs	r1, r3
10001576:	687b      	ldr	r3, [r7, #4]
10001578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000157a:	041b      	lsls	r3, r3, #16
1000157c:	430b      	orrs	r3, r1
1000157e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001582:	4313      	orrs	r3, r2
10001584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
10001588:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000158c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001590:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001594:	f043 0304 	orr.w	r3, r3, #4
10001598:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
1000159c:	e009      	b.n	100015b2 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
1000159e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100015a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100015aa:	f023 0304 	bic.w	r3, r3, #4
100015ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
100015b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100015ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100015be:	f043 0301 	orr.w	r3, r3, #1
100015c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100015c6:	f7fe ffad 	bl	10000524 <HAL_GetTick>
100015ca:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100015cc:	e008      	b.n	100015e0 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100015ce:	f7fe ffa9 	bl	10000524 <HAL_GetTick>
100015d2:	4602      	mov	r2, r0
100015d4:	68fb      	ldr	r3, [r7, #12]
100015d6:	1ad3      	subs	r3, r2, r3
100015d8:	2b64      	cmp	r3, #100	; 0x64
100015da:	d901      	bls.n	100015e0 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
100015dc:	2303      	movs	r3, #3
100015de:	e03f      	b.n	10001660 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100015e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100015e8:	f003 0302 	and.w	r3, r3, #2
100015ec:	2b02      	cmp	r3, #2
100015ee:	d1ee      	bne.n	100015ce <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
100015f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100015f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100015f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100015fc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10001600:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10001604:	e02b      	b.n	1000165e <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10001606:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000160a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000160e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001616:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
1000161a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000161e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001622:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001626:	f023 0301 	bic.w	r3, r3, #1
1000162a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000162e:	f7fe ff79 	bl	10000524 <HAL_GetTick>
10001632:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001634:	e008      	b.n	10001648 <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001636:	f7fe ff75 	bl	10000524 <HAL_GetTick>
1000163a:	4602      	mov	r2, r0
1000163c:	68fb      	ldr	r3, [r7, #12]
1000163e:	1ad3      	subs	r3, r2, r3
10001640:	2b64      	cmp	r3, #100	; 0x64
10001642:	d901      	bls.n	10001648 <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
10001644:	2303      	movs	r3, #3
10001646:	e00b      	b.n	10001660 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10001648:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000164c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001650:	f003 0302 	and.w	r3, r3, #2
10001654:	2b02      	cmp	r3, #2
10001656:	d0ee      	beq.n	10001636 <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
10001658:	e001      	b.n	1000165e <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
1000165a:	2301      	movs	r3, #1
1000165c:	e000      	b.n	10001660 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
1000165e:	2300      	movs	r3, #0

}
10001660:	4618      	mov	r0, r3
10001662:	3710      	adds	r7, #16
10001664:	46bd      	mov	sp, r7
10001666:	bd80      	pop	{r7, pc}
10001668:	ffc0fe00 	.word	0xffc0fe00

1000166c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
1000166c:	b580      	push	{r7, lr}
1000166e:	b084      	sub	sp, #16
10001670:	af00      	add	r7, sp, #0
10001672:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
10001674:	2300      	movs	r3, #0
10001676:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
10001678:	687b      	ldr	r3, [r7, #4]
1000167a:	2b00      	cmp	r3, #0
1000167c:	d101      	bne.n	10001682 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
1000167e:	2301      	movs	r3, #1
10001680:	e102      	b.n	10001888 <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10001682:	687b      	ldr	r3, [r7, #4]
10001684:	681b      	ldr	r3, [r3, #0]
10001686:	f003 0301 	and.w	r3, r3, #1
1000168a:	2b00      	cmp	r3, #0
1000168c:	d00b      	beq.n	100016a6 <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
1000168e:	687b      	ldr	r3, [r7, #4]
10001690:	3304      	adds	r3, #4
10001692:	4618      	mov	r0, r3
10001694:	f000 f8fc 	bl	10001890 <RCC_MPUConfig>
10001698:	4603      	mov	r3, r0
1000169a:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
1000169c:	7bfb      	ldrb	r3, [r7, #15]
1000169e:	2b00      	cmp	r3, #0
100016a0:	d001      	beq.n	100016a6 <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
100016a2:	7bfb      	ldrb	r3, [r7, #15]
100016a4:	e0f0      	b.n	10001888 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
100016a6:	687b      	ldr	r3, [r7, #4]
100016a8:	681b      	ldr	r3, [r3, #0]
100016aa:	f003 0302 	and.w	r3, r3, #2
100016ae:	2b00      	cmp	r3, #0
100016b0:	d00b      	beq.n	100016ca <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
100016b2:	687b      	ldr	r3, [r7, #4]
100016b4:	330c      	adds	r3, #12
100016b6:	4618      	mov	r0, r3
100016b8:	f000 f960 	bl	1000197c <RCC_AXISSConfig>
100016bc:	4603      	mov	r3, r0
100016be:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100016c0:	7bfb      	ldrb	r3, [r7, #15]
100016c2:	2b00      	cmp	r3, #0
100016c4:	d001      	beq.n	100016ca <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
100016c6:	7bfb      	ldrb	r3, [r7, #15]
100016c8:	e0de      	b.n	10001888 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
100016ca:	687b      	ldr	r3, [r7, #4]
100016cc:	681b      	ldr	r3, [r3, #0]
100016ce:	f003 0304 	and.w	r3, r3, #4
100016d2:	2b00      	cmp	r3, #0
100016d4:	d00b      	beq.n	100016ee <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
100016d6:	687b      	ldr	r3, [r7, #4]
100016d8:	3314      	adds	r3, #20
100016da:	4618      	mov	r0, r3
100016dc:	f000 f9e6 	bl	10001aac <RCC_MCUConfig>
100016e0:	4603      	mov	r3, r0
100016e2:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
100016e4:	7bfb      	ldrb	r3, [r7, #15]
100016e6:	2b00      	cmp	r3, #0
100016e8:	d001      	beq.n	100016ee <HAL_RCC_ClockConfig+0x82>
    {
      return status;
100016ea:	7bfb      	ldrb	r3, [r7, #15]
100016ec:	e0cc      	b.n	10001888 <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
100016ee:	687b      	ldr	r3, [r7, #4]
100016f0:	681b      	ldr	r3, [r3, #0]
100016f2:	f003 0308 	and.w	r3, r3, #8
100016f6:	2b00      	cmp	r3, #0
100016f8:	d020      	beq.n	1000173c <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
100016fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100016fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001700:	f023 0207 	bic.w	r2, r3, #7
10001704:	687b      	ldr	r3, [r7, #4]
10001706:	69db      	ldr	r3, [r3, #28]
10001708:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000170c:	4313      	orrs	r3, r2
1000170e:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001710:	f7fe ff08 	bl	10000524 <HAL_GetTick>
10001714:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
10001716:	e009      	b.n	1000172c <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001718:	f7fe ff04 	bl	10000524 <HAL_GetTick>
1000171c:	4602      	mov	r2, r0
1000171e:	68bb      	ldr	r3, [r7, #8]
10001720:	1ad3      	subs	r3, r2, r3
10001722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001726:	d901      	bls.n	1000172c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
10001728:	2303      	movs	r3, #3
1000172a:	e0ad      	b.n	10001888 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
1000172c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001732:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000173a:	d1ed      	bne.n	10001718 <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
1000173c:	687b      	ldr	r3, [r7, #4]
1000173e:	681b      	ldr	r3, [r3, #0]
10001740:	f003 0310 	and.w	r3, r3, #16
10001744:	2b00      	cmp	r3, #0
10001746:	d020      	beq.n	1000178a <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
10001748:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000174e:	f023 0207 	bic.w	r2, r3, #7
10001752:	687b      	ldr	r3, [r7, #4]
10001754:	6a1b      	ldr	r3, [r3, #32]
10001756:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000175a:	4313      	orrs	r3, r2
1000175c:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
1000175e:	f7fe fee1 	bl	10000524 <HAL_GetTick>
10001762:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
10001764:	e009      	b.n	1000177a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001766:	f7fe fedd 	bl	10000524 <HAL_GetTick>
1000176a:	4602      	mov	r2, r0
1000176c:	68bb      	ldr	r3, [r7, #8]
1000176e:	1ad3      	subs	r3, r2, r3
10001770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001774:	d901      	bls.n	1000177a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
10001776:	2303      	movs	r3, #3
10001778:	e086      	b.n	10001888 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
1000177a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001788:	d1ed      	bne.n	10001766 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
1000178a:	687b      	ldr	r3, [r7, #4]
1000178c:	681b      	ldr	r3, [r3, #0]
1000178e:	f003 0320 	and.w	r3, r3, #32
10001792:	2b00      	cmp	r3, #0
10001794:	d023      	beq.n	100017de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
10001796:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000179a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
1000179e:	f023 0207 	bic.w	r2, r3, #7
100017a2:	687b      	ldr	r3, [r7, #4]
100017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100017a6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100017aa:	4313      	orrs	r3, r2
100017ac:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100017b0:	f7fe feb8 	bl	10000524 <HAL_GetTick>
100017b4:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100017b6:	e009      	b.n	100017cc <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100017b8:	f7fe feb4 	bl	10000524 <HAL_GetTick>
100017bc:	4602      	mov	r2, r0
100017be:	68bb      	ldr	r3, [r7, #8]
100017c0:	1ad3      	subs	r3, r2, r3
100017c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100017c6:	d901      	bls.n	100017cc <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
100017c8:	2303      	movs	r3, #3
100017ca:	e05d      	b.n	10001888 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
100017cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017d0:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
100017d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100017d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100017dc:	d1ec      	bne.n	100017b8 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
100017de:	687b      	ldr	r3, [r7, #4]
100017e0:	681b      	ldr	r3, [r3, #0]
100017e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
100017e6:	2b00      	cmp	r3, #0
100017e8:	d023      	beq.n	10001832 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
100017ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100017ee:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100017f2:	f023 0207 	bic.w	r2, r3, #7
100017f6:	687b      	ldr	r3, [r7, #4]
100017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100017fa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100017fe:	4313      	orrs	r3, r2
10001800:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001804:	f7fe fe8e 	bl	10000524 <HAL_GetTick>
10001808:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000180a:	e009      	b.n	10001820 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000180c:	f7fe fe8a 	bl	10000524 <HAL_GetTick>
10001810:	4602      	mov	r2, r0
10001812:	68bb      	ldr	r3, [r7, #8]
10001814:	1ad3      	subs	r3, r2, r3
10001816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000181a:	d901      	bls.n	10001820 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
1000181c:	2303      	movs	r3, #3
1000181e:	e033      	b.n	10001888 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
10001820:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001824:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10001828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000182c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001830:	d1ec      	bne.n	1000180c <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
10001832:	687b      	ldr	r3, [r7, #4]
10001834:	681b      	ldr	r3, [r3, #0]
10001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
1000183a:	2b00      	cmp	r3, #0
1000183c:	d023      	beq.n	10001886 <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
1000183e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001842:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10001846:	f023 0207 	bic.w	r2, r3, #7
1000184a:	687b      	ldr	r3, [r7, #4]
1000184c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000184e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001852:	4313      	orrs	r3, r2
10001854:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001858:	f7fe fe64 	bl	10000524 <HAL_GetTick>
1000185c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
1000185e:	e009      	b.n	10001874 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001860:	f7fe fe60 	bl	10000524 <HAL_GetTick>
10001864:	4602      	mov	r2, r0
10001866:	68bb      	ldr	r3, [r7, #8]
10001868:	1ad3      	subs	r3, r2, r3
1000186a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000186e:	d901      	bls.n	10001874 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
10001870:	2303      	movs	r3, #3
10001872:	e009      	b.n	10001888 <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
10001874:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001878:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
1000187c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001884:	d1ec      	bne.n	10001860 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
10001886:	2300      	movs	r3, #0
}
10001888:	4618      	mov	r0, r3
1000188a:	3710      	adds	r7, #16
1000188c:	46bd      	mov	sp, r7
1000188e:	bd80      	pop	{r7, pc}

10001890 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10001890:	b580      	push	{r7, lr}
10001892:	b084      	sub	sp, #16
10001894:	af00      	add	r7, sp, #0
10001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
10001898:	687b      	ldr	r3, [r7, #4]
1000189a:	681b      	ldr	r3, [r3, #0]
1000189c:	2b03      	cmp	r3, #3
1000189e:	d840      	bhi.n	10001922 <RCC_MPUConfig+0x92>
100018a0:	a201      	add	r2, pc, #4	; (adr r2, 100018a8 <RCC_MPUConfig+0x18>)
100018a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100018a6:	bf00      	nop
100018a8:	100018b9 	.word	0x100018b9
100018ac:	100018cd 	.word	0x100018cd
100018b0:	100018e3 	.word	0x100018e3
100018b4:	100018f7 	.word	0x100018f7
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
100018b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018bc:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100018c0:	f003 0301 	and.w	r3, r3, #1
100018c4:	2b01      	cmp	r3, #1
100018c6:	d02e      	beq.n	10001926 <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
100018c8:	2301      	movs	r3, #1
100018ca:	e053      	b.n	10001974 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100018cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018d0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100018d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
100018d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100018dc:	d025      	beq.n	1000192a <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
100018de:	2301      	movs	r3, #1
100018e0:	e048      	b.n	10001974 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100018e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100018ea:	f003 0302 	and.w	r3, r3, #2
100018ee:	2b02      	cmp	r3, #2
100018f0:	d01d      	beq.n	1000192e <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
100018f2:	2301      	movs	r3, #1
100018f4:	e03e      	b.n	10001974 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
100018f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100018fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100018fe:	f003 0302 	and.w	r3, r3, #2
10001902:	2b02      	cmp	r3, #2
10001904:	d001      	beq.n	1000190a <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
10001906:	2301      	movs	r3, #1
10001908:	e034      	b.n	10001974 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
1000190a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001910:	f023 0207 	bic.w	r2, r3, #7
10001914:	687b      	ldr	r3, [r7, #4]
10001916:	685b      	ldr	r3, [r3, #4]
10001918:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000191c:	4313      	orrs	r3, r2
1000191e:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
10001920:	e006      	b.n	10001930 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
10001922:	2301      	movs	r3, #1
10001924:	e026      	b.n	10001974 <RCC_MPUConfig+0xe4>
      break;
10001926:	bf00      	nop
10001928:	e002      	b.n	10001930 <RCC_MPUConfig+0xa0>
      break;
1000192a:	bf00      	nop
1000192c:	e000      	b.n	10001930 <RCC_MPUConfig+0xa0>
      break;
1000192e:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
10001930:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001934:	6a1b      	ldr	r3, [r3, #32]
10001936:	f023 0203 	bic.w	r2, r3, #3
1000193a:	687b      	ldr	r3, [r7, #4]
1000193c:	681b      	ldr	r3, [r3, #0]
1000193e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001942:	4313      	orrs	r3, r2
10001944:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001946:	f7fe fded 	bl	10000524 <HAL_GetTick>
1000194a:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
1000194c:	e009      	b.n	10001962 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000194e:	f7fe fde9 	bl	10000524 <HAL_GetTick>
10001952:	4602      	mov	r2, r0
10001954:	68fb      	ldr	r3, [r7, #12]
10001956:	1ad3      	subs	r3, r2, r3
10001958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000195c:	d901      	bls.n	10001962 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
1000195e:	2303      	movs	r3, #3
10001960:	e008      	b.n	10001974 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
10001962:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001966:	6a1b      	ldr	r3, [r3, #32]
10001968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000196c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001970:	d1ed      	bne.n	1000194e <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
10001972:	2300      	movs	r3, #0
}
10001974:	4618      	mov	r0, r3
10001976:	3710      	adds	r7, #16
10001978:	46bd      	mov	sp, r7
1000197a:	bd80      	pop	{r7, pc}

1000197c <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
1000197c:	b580      	push	{r7, lr}
1000197e:	b084      	sub	sp, #16
10001980:	af00      	add	r7, sp, #0
10001982:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10001984:	687b      	ldr	r3, [r7, #4]
10001986:	681b      	ldr	r3, [r3, #0]
10001988:	2b02      	cmp	r3, #2
1000198a:	d01b      	beq.n	100019c4 <RCC_AXISSConfig+0x48>
1000198c:	2b02      	cmp	r3, #2
1000198e:	d823      	bhi.n	100019d8 <RCC_AXISSConfig+0x5c>
10001990:	2b00      	cmp	r3, #0
10001992:	d002      	beq.n	1000199a <RCC_AXISSConfig+0x1e>
10001994:	2b01      	cmp	r3, #1
10001996:	d00a      	beq.n	100019ae <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10001998:	e01e      	b.n	100019d8 <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000199a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000199e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100019a2:	f003 0301 	and.w	r3, r3, #1
100019a6:	2b01      	cmp	r3, #1
100019a8:	d018      	beq.n	100019dc <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
100019aa:	2301      	movs	r3, #1
100019ac:	e079      	b.n	10001aa2 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100019ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019b2:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
100019ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100019be:	d00f      	beq.n	100019e0 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
100019c0:	2301      	movs	r3, #1
100019c2:	e06e      	b.n	10001aa2 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
100019c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100019cc:	f003 0302 	and.w	r3, r3, #2
100019d0:	2b02      	cmp	r3, #2
100019d2:	d007      	beq.n	100019e4 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
100019d4:	2301      	movs	r3, #1
100019d6:	e064      	b.n	10001aa2 <RCC_AXISSConfig+0x126>
      break;
100019d8:	bf00      	nop
100019da:	e004      	b.n	100019e6 <RCC_AXISSConfig+0x6a>
      break;
100019dc:	bf00      	nop
100019de:	e002      	b.n	100019e6 <RCC_AXISSConfig+0x6a>
      break;
100019e0:	bf00      	nop
100019e2:	e000      	b.n	100019e6 <RCC_AXISSConfig+0x6a>
      break;
100019e4:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
100019e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100019ec:	f023 0207 	bic.w	r2, r3, #7
100019f0:	687b      	ldr	r3, [r7, #4]
100019f2:	681b      	ldr	r3, [r3, #0]
100019f4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100019f8:	4313      	orrs	r3, r2
100019fa:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
100019fc:	687b      	ldr	r3, [r7, #4]
100019fe:	681b      	ldr	r3, [r3, #0]
10001a00:	2b03      	cmp	r3, #3
10001a02:	d016      	beq.n	10001a32 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001a04:	f7fe fd8e 	bl	10000524 <HAL_GetTick>
10001a08:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001a0a:	e009      	b.n	10001a20 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a0c:	f7fe fd8a 	bl	10000524 <HAL_GetTick>
10001a10:	4602      	mov	r2, r0
10001a12:	68fb      	ldr	r3, [r7, #12]
10001a14:	1ad3      	subs	r3, r2, r3
10001a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001a1a:	d901      	bls.n	10001a20 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10001a1c:	2303      	movs	r3, #3
10001a1e:	e040      	b.n	10001aa2 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10001a20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001a26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a2e:	d1ed      	bne.n	10001a0c <RCC_AXISSConfig+0x90>
10001a30:	e015      	b.n	10001a5e <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10001a32:	f7fe fd77 	bl	10000524 <HAL_GetTick>
10001a36:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001a38:	e009      	b.n	10001a4e <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a3a:	f7fe fd73 	bl	10000524 <HAL_GetTick>
10001a3e:	4602      	mov	r2, r0
10001a40:	68fb      	ldr	r3, [r7, #12]
10001a42:	1ad3      	subs	r3, r2, r3
10001a44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001a48:	d901      	bls.n	10001a4e <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10001a4a:	2303      	movs	r3, #3
10001a4c:	e029      	b.n	10001aa2 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10001a4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a5c:	d0ed      	beq.n	10001a3a <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10001a5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001a64:	f023 0207 	bic.w	r2, r3, #7
10001a68:	687b      	ldr	r3, [r7, #4]
10001a6a:	685b      	ldr	r3, [r3, #4]
10001a6c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001a70:	4313      	orrs	r3, r2
10001a72:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001a74:	f7fe fd56 	bl	10000524 <HAL_GetTick>
10001a78:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001a7a:	e009      	b.n	10001a90 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001a7c:	f7fe fd52 	bl	10000524 <HAL_GetTick>
10001a80:	4602      	mov	r2, r0
10001a82:	68fb      	ldr	r3, [r7, #12]
10001a84:	1ad3      	subs	r3, r2, r3
10001a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001a8a:	d901      	bls.n	10001a90 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10001a8c:	2303      	movs	r3, #3
10001a8e:	e008      	b.n	10001aa2 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10001a90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10001a96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001a9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001a9e:	d1ed      	bne.n	10001a7c <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10001aa0:	2300      	movs	r3, #0
}
10001aa2:	4618      	mov	r0, r3
10001aa4:	3710      	adds	r7, #16
10001aa6:	46bd      	mov	sp, r7
10001aa8:	bd80      	pop	{r7, pc}
	...

10001aac <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10001aac:	b580      	push	{r7, lr}
10001aae:	b084      	sub	sp, #16
10001ab0:	af00      	add	r7, sp, #0
10001ab2:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10001ab4:	687b      	ldr	r3, [r7, #4]
10001ab6:	681b      	ldr	r3, [r3, #0]
10001ab8:	2b03      	cmp	r3, #3
10001aba:	d834      	bhi.n	10001b26 <RCC_MCUConfig+0x7a>
10001abc:	a201      	add	r2, pc, #4	; (adr r2, 10001ac4 <RCC_MCUConfig+0x18>)
10001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001ac2:	bf00      	nop
10001ac4:	10001ad5 	.word	0x10001ad5
10001ac8:	10001ae9 	.word	0x10001ae9
10001acc:	10001aff 	.word	0x10001aff
10001ad0:	10001b13 	.word	0x10001b13
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001ad4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ad8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001adc:	f003 0301 	and.w	r3, r3, #1
10001ae0:	2b01      	cmp	r3, #1
10001ae2:	d022      	beq.n	10001b2a <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10001ae4:	2301      	movs	r3, #1
10001ae6:	e081      	b.n	10001bec <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10001ae8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001aec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001af8:	d019      	beq.n	10001b2e <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10001afa:	2301      	movs	r3, #1
10001afc:	e076      	b.n	10001bec <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10001afe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b02:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001b06:	f003 0310 	and.w	r3, r3, #16
10001b0a:	2b10      	cmp	r3, #16
10001b0c:	d011      	beq.n	10001b32 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10001b0e:	2301      	movs	r3, #1
10001b10:	e06c      	b.n	10001bec <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10001b12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b16:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001b1a:	f003 0302 	and.w	r3, r3, #2
10001b1e:	2b02      	cmp	r3, #2
10001b20:	d009      	beq.n	10001b36 <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10001b22:	2301      	movs	r3, #1
10001b24:	e062      	b.n	10001bec <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10001b26:	bf00      	nop
10001b28:	e006      	b.n	10001b38 <RCC_MCUConfig+0x8c>
      break;
10001b2a:	bf00      	nop
10001b2c:	e004      	b.n	10001b38 <RCC_MCUConfig+0x8c>
      break;
10001b2e:	bf00      	nop
10001b30:	e002      	b.n	10001b38 <RCC_MCUConfig+0x8c>
      break;
10001b32:	bf00      	nop
10001b34:	e000      	b.n	10001b38 <RCC_MCUConfig+0x8c>
      break;
10001b36:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10001b38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001b3e:	f023 0203 	bic.w	r2, r3, #3
10001b42:	687b      	ldr	r3, [r7, #4]
10001b44:	681b      	ldr	r3, [r3, #0]
10001b46:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001b4a:	4313      	orrs	r3, r2
10001b4c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001b4e:	f7fe fce9 	bl	10000524 <HAL_GetTick>
10001b52:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001b54:	e009      	b.n	10001b6a <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001b56:	f7fe fce5 	bl	10000524 <HAL_GetTick>
10001b5a:	4602      	mov	r2, r0
10001b5c:	68fb      	ldr	r3, [r7, #12]
10001b5e:	1ad3      	subs	r3, r2, r3
10001b60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001b64:	d901      	bls.n	10001b6a <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10001b66:	2303      	movs	r3, #3
10001b68:	e040      	b.n	10001bec <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10001b6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001b78:	d1ed      	bne.n	10001b56 <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001b7a:	f000 f954 	bl	10001e26 <HAL_RCC_GetSystemCoreClockFreq>
10001b7e:	4603      	mov	r3, r0
10001b80:	4a1c      	ldr	r2, [pc, #112]	; (10001bf4 <RCC_MCUConfig+0x148>)
10001b82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001b84:	4b1c      	ldr	r3, [pc, #112]	; (10001bf8 <RCC_MCUConfig+0x14c>)
10001b86:	681b      	ldr	r3, [r3, #0]
10001b88:	4618      	mov	r0, r3
10001b8a:	f7fe fc81 	bl	10000490 <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10001b8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b92:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001b96:	f023 020f 	bic.w	r2, r3, #15
10001b9a:	687b      	ldr	r3, [r7, #4]
10001b9c:	685b      	ldr	r3, [r3, #4]
10001b9e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001ba2:	4313      	orrs	r3, r2
10001ba4:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10001ba8:	f7fe fcbc 	bl	10000524 <HAL_GetTick>
10001bac:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001bae:	e009      	b.n	10001bc4 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10001bb0:	f7fe fcb8 	bl	10000524 <HAL_GetTick>
10001bb4:	4602      	mov	r2, r0
10001bb6:	68fb      	ldr	r3, [r7, #12]
10001bb8:	1ad3      	subs	r3, r2, r3
10001bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10001bbe:	d901      	bls.n	10001bc4 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10001bc0:	2303      	movs	r3, #3
10001bc2:	e013      	b.n	10001bec <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10001bc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bc8:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001bd4:	d1ec      	bne.n	10001bb0 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001bd6:	f000 f926 	bl	10001e26 <HAL_RCC_GetSystemCoreClockFreq>
10001bda:	4603      	mov	r3, r0
10001bdc:	4a05      	ldr	r2, [pc, #20]	; (10001bf4 <RCC_MCUConfig+0x148>)
10001bde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10001be0:	4b05      	ldr	r3, [pc, #20]	; (10001bf8 <RCC_MCUConfig+0x14c>)
10001be2:	681b      	ldr	r3, [r3, #0]
10001be4:	4618      	mov	r0, r3
10001be6:	f7fe fc53 	bl	10000490 <HAL_InitTick>
#endif

  return HAL_OK;
10001bea:	2300      	movs	r3, #0
}
10001bec:	4618      	mov	r0, r3
10001bee:	3710      	adds	r7, #16
10001bf0:	46bd      	mov	sp, r7
10001bf2:	bd80      	pop	{r7, pc}
10001bf4:	10020000 	.word	0x10020000
10001bf8:	10020004 	.word	0x10020004

10001bfc <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001bfc:	b480      	push	{r7}
10001bfe:	b089      	sub	sp, #36	; 0x24
10001c00:	af00      	add	r7, sp, #0
10001c02:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001c04:	2300      	movs	r3, #0
10001c06:	61bb      	str	r3, [r7, #24]
10001c08:	2301      	movs	r3, #1
10001c0a:	617b      	str	r3, [r7, #20]
10001c0c:	2300      	movs	r3, #0
10001c0e:	613b      	str	r3, [r7, #16]
10001c10:	2300      	movs	r3, #0
10001c12:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001c14:	f04f 0300 	mov.w	r3, #0
10001c18:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001c1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c1e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001c22:	f003 0303 	and.w	r3, r3, #3
10001c26:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001c28:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c2c:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001c30:	0c1b      	lsrs	r3, r3, #16
10001c32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001c36:	3301      	adds	r3, #1
10001c38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001c3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c3e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001c42:	0c1b      	lsrs	r3, r3, #16
10001c44:	f003 0301 	and.w	r3, r3, #1
10001c48:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001c4a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c4e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001c52:	08db      	lsrs	r3, r3, #3
10001c54:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001c58:	693a      	ldr	r2, [r7, #16]
10001c5a:	fb02 f303 	mul.w	r3, r2, r3
10001c5e:	ee07 3a90 	vmov	s15, r3
10001c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c66:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10001c6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c6e:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001c76:	3301      	adds	r3, #1
10001c78:	ee07 3a90 	vmov	s15, r3
10001c7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001c80:	edd7 6a02 	vldr	s13, [r7, #8]
10001c84:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10001de0 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001c88:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
10001c90:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001c94:	69bb      	ldr	r3, [r7, #24]
10001c96:	2b03      	cmp	r3, #3
10001c98:	d85b      	bhi.n	10001d52 <HAL_RCC_GetPLL3ClockFreq+0x156>
10001c9a:	a201      	add	r2, pc, #4	; (adr r2, 10001ca0 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001ca0:	10001cb1 	.word	0x10001cb1
10001ca4:	10001d0f 	.word	0x10001d0f
10001ca8:	10001d2d 	.word	0x10001d2d
10001cac:	10001d4b 	.word	0x10001d4b
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001cb0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cb4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001cb8:	f003 0304 	and.w	r3, r3, #4
10001cbc:	2b04      	cmp	r3, #4
10001cbe:	d117      	bne.n	10001cf0 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001cc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cc4:	699b      	ldr	r3, [r3, #24]
10001cc6:	f003 0303 	and.w	r3, r3, #3
10001cca:	4a46      	ldr	r2, [pc, #280]	; (10001de4 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001ccc:	fa22 f303 	lsr.w	r3, r2, r3
10001cd0:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10001cd2:	68fa      	ldr	r2, [r7, #12]
10001cd4:	697b      	ldr	r3, [r7, #20]
10001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
10001cda:	ee07 3a90 	vmov	s15, r3
10001cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001ce2:	ed97 7a07 	vldr	s14, [r7, #28]
10001ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
10001cea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001cee:	e030      	b.n	10001d52 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001cf0:	4a3c      	ldr	r2, [pc, #240]	; (10001de4 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001cf2:	697b      	ldr	r3, [r7, #20]
10001cf4:	fbb2 f3f3 	udiv	r3, r2, r3
10001cf8:	ee07 3a90 	vmov	s15, r3
10001cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001d00:	ed97 7a07 	vldr	s14, [r7, #28]
10001d04:	ee67 7a27 	vmul.f32	s15, s14, s15
10001d08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001d0c:	e021      	b.n	10001d52 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10001d0e:	4a36      	ldr	r2, [pc, #216]	; (10001de8 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10001d10:	697b      	ldr	r3, [r7, #20]
10001d12:	fbb2 f3f3 	udiv	r3, r2, r3
10001d16:	ee07 3a90 	vmov	s15, r3
10001d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001d1e:	ed97 7a07 	vldr	s14, [r7, #28]
10001d22:	ee67 7a27 	vmul.f32	s15, s14, s15
10001d26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001d2a:	e012      	b.n	10001d52 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10001d2c:	4a2f      	ldr	r2, [pc, #188]	; (10001dec <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10001d2e:	697b      	ldr	r3, [r7, #20]
10001d30:	fbb2 f3f3 	udiv	r3, r2, r3
10001d34:	ee07 3a90 	vmov	s15, r3
10001d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001d3c:	ed97 7a07 	vldr	s14, [r7, #28]
10001d40:	ee67 7a27 	vmul.f32	s15, s14, s15
10001d44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001d48:	e003      	b.n	10001d52 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10001d4a:	f04f 0300 	mov.w	r3, #0
10001d4e:	61fb      	str	r3, [r7, #28]
      break;
10001d50:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10001d52:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d56:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001d5e:	3301      	adds	r3, #1
10001d60:	ee07 3a90 	vmov	s15, r3
10001d64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001d68:	edd7 6a07 	vldr	s13, [r7, #28]
10001d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001d74:	ee17 2a90 	vmov	r2, s15
10001d78:	687b      	ldr	r3, [r7, #4]
10001d7a:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10001d7c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d80:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001d84:	0a1b      	lsrs	r3, r3, #8
10001d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001d8a:	3301      	adds	r3, #1
10001d8c:	ee07 3a90 	vmov	s15, r3
10001d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001d94:	edd7 6a07 	vldr	s13, [r7, #28]
10001d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001da0:	ee17 2a90 	vmov	r2, s15
10001da4:	687b      	ldr	r3, [r7, #4]
10001da6:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10001da8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dac:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001db0:	0c1b      	lsrs	r3, r3, #16
10001db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001db6:	3301      	adds	r3, #1
10001db8:	ee07 3a90 	vmov	s15, r3
10001dbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001dc0:	edd7 6a07 	vldr	s13, [r7, #28]
10001dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001dc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001dcc:	ee17 2a90 	vmov	r2, s15
10001dd0:	687b      	ldr	r3, [r7, #4]
10001dd2:	609a      	str	r2, [r3, #8]
}
10001dd4:	bf00      	nop
10001dd6:	3724      	adds	r7, #36	; 0x24
10001dd8:	46bd      	mov	sp, r7
10001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
10001dde:	4770      	bx	lr
10001de0:	46000000 	.word	0x46000000
10001de4:	03d09000 	.word	0x03d09000
10001de8:	016e3600 	.word	0x016e3600
10001dec:	003d0900 	.word	0x003d0900

10001df0 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10001df0:	b580      	push	{r7, lr}
10001df2:	b082      	sub	sp, #8
10001df4:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10001df6:	2300      	movs	r3, #0
10001df8:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10001dfa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dfe:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001e02:	f003 030f 	and.w	r3, r3, #15
10001e06:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10001e08:	687b      	ldr	r3, [r7, #4]
10001e0a:	2b09      	cmp	r3, #9
10001e0c:	d901      	bls.n	10001e12 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10001e0e:	2309      	movs	r3, #9
10001e10:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10001e12:	f000 f80f 	bl	10001e34 <HAL_RCC_GetMCUSSFreq>
10001e16:	4602      	mov	r2, r0
10001e18:	687b      	ldr	r3, [r7, #4]
10001e1a:	fa22 f303 	lsr.w	r3, r2, r3
}
10001e1e:	4618      	mov	r0, r3
10001e20:	3708      	adds	r7, #8
10001e22:	46bd      	mov	sp, r7
10001e24:	bd80      	pop	{r7, pc}

10001e26 <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10001e26:	b580      	push	{r7, lr}
10001e28:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10001e2a:	f7ff ffe1 	bl	10001df0 <HAL_RCC_GetMCUFreq>
10001e2e:	4603      	mov	r3, r0
#endif
}
10001e30:	4618      	mov	r0, r3
10001e32:	bd80      	pop	{r7, pc}

10001e34 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10001e34:	b580      	push	{r7, lr}
10001e36:	b084      	sub	sp, #16
10001e38:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10001e3a:	2300      	movs	r3, #0
10001e3c:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10001e3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001e44:	f003 0303 	and.w	r3, r3, #3
10001e48:	2b03      	cmp	r3, #3
10001e4a:	d822      	bhi.n	10001e92 <HAL_RCC_GetMCUSSFreq+0x5e>
10001e4c:	a201      	add	r2, pc, #4	; (adr r2, 10001e54 <HAL_RCC_GetMCUSSFreq+0x20>)
10001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001e52:	bf00      	nop
10001e54:	10001e73 	.word	0x10001e73
10001e58:	10001e87 	.word	0x10001e87
10001e5c:	10001e8d 	.word	0x10001e8d
10001e60:	10001e65 	.word	0x10001e65
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10001e64:	463b      	mov	r3, r7
10001e66:	4618      	mov	r0, r3
10001e68:	f7ff fec8 	bl	10001bfc <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10001e6c:	683b      	ldr	r3, [r7, #0]
10001e6e:	60fb      	str	r3, [r7, #12]
      break;
10001e70:	e00f      	b.n	10001e92 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001e72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e76:	699b      	ldr	r3, [r3, #24]
10001e78:	f003 0303 	and.w	r3, r3, #3
10001e7c:	4a07      	ldr	r2, [pc, #28]	; (10001e9c <HAL_RCC_GetMCUSSFreq+0x68>)
10001e7e:	fa22 f303 	lsr.w	r3, r2, r3
10001e82:	60fb      	str	r3, [r7, #12]

      break;
10001e84:	e005      	b.n	10001e92 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10001e86:	4b06      	ldr	r3, [pc, #24]	; (10001ea0 <HAL_RCC_GetMCUSSFreq+0x6c>)
10001e88:	60fb      	str	r3, [r7, #12]
      break;
10001e8a:	e002      	b.n	10001e92 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10001e8c:	4b05      	ldr	r3, [pc, #20]	; (10001ea4 <HAL_RCC_GetMCUSSFreq+0x70>)
10001e8e:	60fb      	str	r3, [r7, #12]
      break;
10001e90:	bf00      	nop
  }

  return mcussfreq;
10001e92:	68fb      	ldr	r3, [r7, #12]
}
10001e94:	4618      	mov	r0, r3
10001e96:	3710      	adds	r7, #16
10001e98:	46bd      	mov	sp, r7
10001e9a:	bd80      	pop	{r7, pc}
10001e9c:	03d09000 	.word	0x03d09000
10001ea0:	016e3600 	.word	0x016e3600
10001ea4:	003d0900 	.word	0x003d0900

10001ea8 <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
10001ea8:	b580      	push	{r7, lr}
10001eaa:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10001eac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001eb0:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10001eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10001eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10001ebc:	d107      	bne.n	10001ece <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
10001ebe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ec2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
10001ec6:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
10001eca:	f000 f802 	bl	10001ed2 <HAL_RCC_WAKEUP_Callback>
  }
}
10001ece:	bf00      	nop
10001ed0:	bd80      	pop	{r7, pc}

10001ed2 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10001ed2:	b480      	push	{r7}
10001ed4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
10001ed6:	bf00      	nop
10001ed8:	46bd      	mov	sp, r7
10001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ede:	4770      	bx	lr

10001ee0 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
10001ee0:	b580      	push	{r7, lr}
10001ee2:	b084      	sub	sp, #16
10001ee4:	af00      	add	r7, sp, #0
10001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
10001ee8:	687b      	ldr	r3, [r7, #4]
10001eea:	681b      	ldr	r3, [r3, #0]
10001eec:	2b00      	cmp	r3, #0
10001eee:	f000 8171 	beq.w	100021d4 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
10001ef2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001ef8:	f003 0307 	and.w	r3, r3, #7
10001efc:	2b02      	cmp	r3, #2
10001efe:	d108      	bne.n	10001f12 <RCCEx_PLL2_Config+0x32>
10001f00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001f0e:	f000 815f 	beq.w	100021d0 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
10001f12:	687b      	ldr	r3, [r7, #4]
10001f14:	681b      	ldr	r3, [r3, #0]
10001f16:	2b02      	cmp	r3, #2
10001f18:	f040 8130 	bne.w	1000217c <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001f1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001f22:	f003 0303 	and.w	r3, r3, #3
10001f26:	2b00      	cmp	r3, #0
10001f28:	d008      	beq.n	10001f3c <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
10001f2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001f30:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
10001f34:	2b01      	cmp	r3, #1
10001f36:	d001      	beq.n	10001f3c <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
10001f38:	2301      	movs	r3, #1
10001f3a:	e14c      	b.n	100021d6 <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10001f3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001f44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10001f4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10001f50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001f58:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001f5c:	f023 0301 	bic.w	r3, r3, #1
10001f60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001f64:	f7fe fade 	bl	10000524 <HAL_GetTick>
10001f68:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001f6a:	e008      	b.n	10001f7e <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10001f6c:	f7fe fada 	bl	10000524 <HAL_GetTick>
10001f70:	4602      	mov	r2, r0
10001f72:	68fb      	ldr	r3, [r7, #12]
10001f74:	1ad3      	subs	r3, r2, r3
10001f76:	2b64      	cmp	r3, #100	; 0x64
10001f78:	d901      	bls.n	10001f7e <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
10001f7a:	2303      	movs	r3, #3
10001f7c:	e12b      	b.n	100021d6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10001f7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001f86:	f003 0302 	and.w	r3, r3, #2
10001f8a:	2b02      	cmp	r3, #2
10001f8c:	d0ee      	beq.n	10001f6c <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10001f8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f92:	6a1b      	ldr	r3, [r3, #32]
10001f94:	f003 0303 	and.w	r3, r3, #3
10001f98:	2b02      	cmp	r3, #2
10001f9a:	d107      	bne.n	10001fac <RCCEx_PLL2_Config+0xcc>
10001f9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fa0:	6a1b      	ldr	r3, [r3, #32]
10001fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001faa:	d00e      	beq.n	10001fca <RCCEx_PLL2_Config+0xea>
10001fac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fb0:	6a1b      	ldr	r3, [r3, #32]
10001fb2:	f003 0303 	and.w	r3, r3, #3
10001fb6:	2b03      	cmp	r3, #3
10001fb8:	d112      	bne.n	10001fe0 <RCCEx_PLL2_Config+0x100>
10001fba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fbe:	6a1b      	ldr	r3, [r3, #32]
10001fc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001fc8:	d10a      	bne.n	10001fe0 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
10001fca:	687b      	ldr	r3, [r7, #4]
10001fcc:	685a      	ldr	r2, [r3, #4]
10001fce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001fd4:	f003 0303 	and.w	r3, r3, #3
10001fd8:	429a      	cmp	r2, r3
10001fda:	d00c      	beq.n	10001ff6 <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
10001fdc:	2301      	movs	r3, #1
10001fde:	e0fa      	b.n	100021d6 <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
10001fe0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001fe6:	f023 0203 	bic.w	r2, r3, #3
10001fea:	687b      	ldr	r3, [r7, #4]
10001fec:	685b      	ldr	r3, [r3, #4]
10001fee:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001ff2:	4313      	orrs	r3, r2
10001ff4:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
10001ff6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ffa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
10001ffe:	4b78      	ldr	r3, [pc, #480]	; (100021e0 <RCCEx_PLL2_Config+0x300>)
10002000:	4013      	ands	r3, r2
10002002:	687a      	ldr	r2, [r7, #4]
10002004:	68d2      	ldr	r2, [r2, #12]
10002006:	1e51      	subs	r1, r2, #1
10002008:	687a      	ldr	r2, [r7, #4]
1000200a:	6892      	ldr	r2, [r2, #8]
1000200c:	3a01      	subs	r2, #1
1000200e:	0412      	lsls	r2, r2, #16
10002010:	430a      	orrs	r2, r1
10002012:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002016:	4313      	orrs	r3, r2
10002018:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
1000201c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10002024:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10002028:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000202c:	687a      	ldr	r2, [r7, #4]
1000202e:	6912      	ldr	r2, [r2, #16]
10002030:	1e51      	subs	r1, r2, #1
10002032:	687a      	ldr	r2, [r7, #4]
10002034:	6952      	ldr	r2, [r2, #20]
10002036:	3a01      	subs	r2, #1
10002038:	0212      	lsls	r2, r2, #8
1000203a:	4311      	orrs	r1, r2
1000203c:	687a      	ldr	r2, [r7, #4]
1000203e:	6992      	ldr	r2, [r2, #24]
10002040:	3a01      	subs	r2, #1
10002042:	0412      	lsls	r2, r2, #16
10002044:	430a      	orrs	r2, r1
10002046:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000204a:	4313      	orrs	r3, r2
1000204c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10002050:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002054:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002058:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000205c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002060:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10002064:	687b      	ldr	r3, [r7, #4]
10002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002068:	2b02      	cmp	r3, #2
1000206a:	d003      	beq.n	10002074 <RCCEx_PLL2_Config+0x194>
1000206c:	687b      	ldr	r3, [r7, #4]
1000206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002070:	2b00      	cmp	r3, #0
10002072:	d10c      	bne.n	1000208e <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10002074:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002078:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000207c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002080:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002084:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002088:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
1000208c:	e00f      	b.n	100020ae <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
1000208e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002092:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000209a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000209e:	687a      	ldr	r2, [r7, #4]
100020a0:	6a12      	ldr	r2, [r2, #32]
100020a2:	00d2      	lsls	r2, r2, #3
100020a4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100020a8:	4313      	orrs	r3, r2
100020aa:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
100020ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
100020b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100020ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100020be:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100020c2:	687b      	ldr	r3, [r7, #4]
100020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100020c6:	2b02      	cmp	r3, #2
100020c8:	d124      	bne.n	10002114 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
100020ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
100020d2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100020d6:	687b      	ldr	r3, [r7, #4]
100020d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
100020da:	687b      	ldr	r3, [r7, #4]
100020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100020de:	4319      	orrs	r1, r3
100020e0:	687b      	ldr	r3, [r7, #4]
100020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100020e4:	4319      	orrs	r1, r3
100020e6:	687b      	ldr	r3, [r7, #4]
100020e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100020ea:	4319      	orrs	r1, r3
100020ec:	687b      	ldr	r3, [r7, #4]
100020ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100020f0:	041b      	lsls	r3, r3, #16
100020f2:	430b      	orrs	r3, r1
100020f4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100020f8:	4313      	orrs	r3, r2
100020fa:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
100020fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002106:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000210a:	f043 0304 	orr.w	r3, r3, #4
1000210e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
10002112:	e009      	b.n	10002128 <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
10002114:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000211c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002120:	f023 0304 	bic.w	r3, r3, #4
10002124:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
10002128:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000212c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002130:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002134:	f043 0301 	orr.w	r3, r3, #1
10002138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000213c:	f7fe f9f2 	bl	10000524 <HAL_GetTick>
10002140:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002142:	e008      	b.n	10002156 <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002144:	f7fe f9ee 	bl	10000524 <HAL_GetTick>
10002148:	4602      	mov	r2, r0
1000214a:	68fb      	ldr	r3, [r7, #12]
1000214c:	1ad3      	subs	r3, r2, r3
1000214e:	2b64      	cmp	r3, #100	; 0x64
10002150:	d901      	bls.n	10002156 <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10002152:	2303      	movs	r3, #3
10002154:	e03f      	b.n	100021d6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002156:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000215e:	f003 0302 	and.w	r3, r3, #2
10002162:	2b02      	cmp	r3, #2
10002164:	d1ee      	bne.n	10002144 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10002166:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000216a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000216e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002172:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002176:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
1000217a:	e02b      	b.n	100021d4 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000217c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002184:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000218c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10002190:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002198:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000219c:	f023 0301 	bic.w	r3, r3, #1
100021a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100021a4:	f7fe f9be 	bl	10000524 <HAL_GetTick>
100021a8:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100021aa:	e008      	b.n	100021be <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100021ac:	f7fe f9ba 	bl	10000524 <HAL_GetTick>
100021b0:	4602      	mov	r2, r0
100021b2:	68fb      	ldr	r3, [r7, #12]
100021b4:	1ad3      	subs	r3, r2, r3
100021b6:	2b64      	cmp	r3, #100	; 0x64
100021b8:	d901      	bls.n	100021be <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
100021ba:	2303      	movs	r3, #3
100021bc:	e00b      	b.n	100021d6 <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
100021be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100021c6:	f003 0302 	and.w	r3, r3, #2
100021ca:	2b02      	cmp	r3, #2
100021cc:	d0ee      	beq.n	100021ac <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
100021ce:	e001      	b.n	100021d4 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100021d0:	2301      	movs	r3, #1
100021d2:	e000      	b.n	100021d6 <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
100021d4:	2300      	movs	r3, #0

}
100021d6:	4618      	mov	r0, r3
100021d8:	3710      	adds	r7, #16
100021da:	46bd      	mov	sp, r7
100021dc:	bd80      	pop	{r7, pc}
100021de:	bf00      	nop
100021e0:	ffc0fe00 	.word	0xffc0fe00

100021e4 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100021e4:	b580      	push	{r7, lr}
100021e6:	b084      	sub	sp, #16
100021e8:	af00      	add	r7, sp, #0
100021ea:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100021ec:	687b      	ldr	r3, [r7, #4]
100021ee:	681b      	ldr	r3, [r3, #0]
100021f0:	2b00      	cmp	r3, #0
100021f2:	f000 815a 	beq.w	100024aa <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100021f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100021fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100021fc:	f003 0303 	and.w	r3, r3, #3
10002200:	2b03      	cmp	r3, #3
10002202:	d108      	bne.n	10002216 <RCCEx_PLL3_Config+0x32>
10002204:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000220a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000220e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002212:	f000 8148 	beq.w	100024a6 <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
10002216:	687b      	ldr	r3, [r7, #4]
10002218:	681b      	ldr	r3, [r3, #0]
1000221a:	2b02      	cmp	r3, #2
1000221c:	f040 8119 	bne.w	10002452 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002220:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002224:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002228:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000222c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002230:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
10002234:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002238:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000223c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002240:	f023 0301 	bic.w	r3, r3, #1
10002244:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002248:	f7fe f96c 	bl	10000524 <HAL_GetTick>
1000224c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
1000224e:	e008      	b.n	10002262 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002250:	f7fe f968 	bl	10000524 <HAL_GetTick>
10002254:	4602      	mov	r2, r0
10002256:	68fb      	ldr	r3, [r7, #12]
10002258:	1ad3      	subs	r3, r2, r3
1000225a:	2b64      	cmp	r3, #100	; 0x64
1000225c:	d901      	bls.n	10002262 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
1000225e:	2303      	movs	r3, #3
10002260:	e124      	b.n	100024ac <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002262:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002266:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000226a:	f003 0302 	and.w	r3, r3, #2
1000226e:	2b02      	cmp	r3, #2
10002270:	d0ee      	beq.n	10002250 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10002272:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002276:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000227a:	f023 0203 	bic.w	r2, r3, #3
1000227e:	687b      	ldr	r3, [r7, #4]
10002280:	685b      	ldr	r3, [r3, #4]
10002282:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002286:	4313      	orrs	r3, r2
10002288:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
1000228c:	e008      	b.n	100022a0 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000228e:	f7fe f949 	bl	10000524 <HAL_GetTick>
10002292:	4602      	mov	r2, r0
10002294:	68fb      	ldr	r3, [r7, #12]
10002296:	1ad3      	subs	r3, r2, r3
10002298:	2b64      	cmp	r3, #100	; 0x64
1000229a:	d901      	bls.n	100022a0 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
1000229c:	2303      	movs	r3, #3
1000229e:	e105      	b.n	100024ac <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
100022a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022a4:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
100022a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100022ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100022b0:	d1ed      	bne.n	1000228e <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
100022b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022b6:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
100022ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
100022be:	687b      	ldr	r3, [r7, #4]
100022c0:	69db      	ldr	r3, [r3, #28]
100022c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100022c6:	4313      	orrs	r3, r2
100022c8:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
100022cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022d0:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
100022d4:	4b77      	ldr	r3, [pc, #476]	; (100024b4 <RCCEx_PLL3_Config+0x2d0>)
100022d6:	4013      	ands	r3, r2
100022d8:	687a      	ldr	r2, [r7, #4]
100022da:	68d2      	ldr	r2, [r2, #12]
100022dc:	1e51      	subs	r1, r2, #1
100022de:	687a      	ldr	r2, [r7, #4]
100022e0:	6892      	ldr	r2, [r2, #8]
100022e2:	3a01      	subs	r2, #1
100022e4:	0412      	lsls	r2, r2, #16
100022e6:	430a      	orrs	r2, r1
100022e8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100022ec:	4313      	orrs	r3, r2
100022ee:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
100022f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022f6:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100022fa:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100022fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10002302:	687a      	ldr	r2, [r7, #4]
10002304:	6912      	ldr	r2, [r2, #16]
10002306:	1e51      	subs	r1, r2, #1
10002308:	687a      	ldr	r2, [r7, #4]
1000230a:	6952      	ldr	r2, [r2, #20]
1000230c:	3a01      	subs	r2, #1
1000230e:	0212      	lsls	r2, r2, #8
10002310:	4311      	orrs	r1, r2
10002312:	687a      	ldr	r2, [r7, #4]
10002314:	6992      	ldr	r2, [r2, #24]
10002316:	3a01      	subs	r2, #1
10002318:	0412      	lsls	r2, r2, #16
1000231a:	430a      	orrs	r2, r1
1000231c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002320:	4313      	orrs	r3, r2
10002322:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
10002326:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000232a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000232e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10002336:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
1000233a:	687b      	ldr	r3, [r7, #4]
1000233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000233e:	2b02      	cmp	r3, #2
10002340:	d003      	beq.n	1000234a <RCCEx_PLL3_Config+0x166>
10002342:	687b      	ldr	r3, [r7, #4]
10002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002346:	2b00      	cmp	r3, #0
10002348:	d10c      	bne.n	10002364 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
1000234a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000234e:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002352:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000235a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000235e:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
10002362:	e00f      	b.n	10002384 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10002364:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002368:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000236c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002370:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002374:	687a      	ldr	r2, [r7, #4]
10002376:	6a12      	ldr	r2, [r2, #32]
10002378:	00d2      	lsls	r2, r2, #3
1000237a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000237e:	4313      	orrs	r3, r2
10002380:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10002384:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002388:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
1000238c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002394:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10002398:	687b      	ldr	r3, [r7, #4]
1000239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000239c:	2b02      	cmp	r3, #2
1000239e:	d124      	bne.n	100023ea <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
100023a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023a4:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
100023a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100023ac:	687b      	ldr	r3, [r7, #4]
100023ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
100023b0:	687b      	ldr	r3, [r7, #4]
100023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100023b4:	4319      	orrs	r1, r3
100023b6:	687b      	ldr	r3, [r7, #4]
100023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100023ba:	4319      	orrs	r1, r3
100023bc:	687b      	ldr	r3, [r7, #4]
100023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100023c0:	4319      	orrs	r1, r3
100023c2:	687b      	ldr	r3, [r7, #4]
100023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100023c6:	041b      	lsls	r3, r3, #16
100023c8:	430b      	orrs	r3, r1
100023ca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100023ce:	4313      	orrs	r3, r2
100023d0:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
100023d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023d8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100023dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023e0:	f043 0304 	orr.w	r3, r3, #4
100023e4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
100023e8:	e009      	b.n	100023fe <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
100023ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023ee:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100023f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023f6:	f023 0304 	bic.w	r3, r3, #4
100023fa:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
100023fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002402:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002406:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000240a:	f043 0301 	orr.w	r3, r3, #1
1000240e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10002412:	f7fe f887 	bl	10000524 <HAL_GetTick>
10002416:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002418:	e008      	b.n	1000242c <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
1000241a:	f7fe f883 	bl	10000524 <HAL_GetTick>
1000241e:	4602      	mov	r2, r0
10002420:	68fb      	ldr	r3, [r7, #12]
10002422:	1ad3      	subs	r3, r2, r3
10002424:	2b64      	cmp	r3, #100	; 0x64
10002426:	d901      	bls.n	1000242c <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
10002428:	2303      	movs	r3, #3
1000242a:	e03f      	b.n	100024ac <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
1000242c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002430:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002434:	f003 0302 	and.w	r3, r3, #2
10002438:	2b02      	cmp	r3, #2
1000243a:	d1ee      	bne.n	1000241a <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
1000243c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002440:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002444:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002448:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000244c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10002450:	e02b      	b.n	100024aa <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10002452:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002456:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000245a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000245e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002462:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10002466:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000246a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000246e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002472:	f023 0301 	bic.w	r3, r3, #1
10002476:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000247a:	f7fe f853 	bl	10000524 <HAL_GetTick>
1000247e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002480:	e008      	b.n	10002494 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002482:	f7fe f84f 	bl	10000524 <HAL_GetTick>
10002486:	4602      	mov	r2, r0
10002488:	68fb      	ldr	r3, [r7, #12]
1000248a:	1ad3      	subs	r3, r2, r3
1000248c:	2b64      	cmp	r3, #100	; 0x64
1000248e:	d901      	bls.n	10002494 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10002490:	2303      	movs	r3, #3
10002492:	e00b      	b.n	100024ac <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10002494:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002498:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000249c:	f003 0302 	and.w	r3, r3, #2
100024a0:	2b02      	cmp	r3, #2
100024a2:	d0ee      	beq.n	10002482 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
100024a4:	e001      	b.n	100024aa <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100024a6:	2301      	movs	r3, #1
100024a8:	e000      	b.n	100024ac <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
100024aa:	2300      	movs	r3, #0
}
100024ac:	4618      	mov	r0, r3
100024ae:	3710      	adds	r7, #16
100024b0:	46bd      	mov	sp, r7
100024b2:	bd80      	pop	{r7, pc}
100024b4:	ffc0fe00 	.word	0xffc0fe00

100024b8 <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
100024b8:	b580      	push	{r7, lr}
100024ba:	b084      	sub	sp, #16
100024bc:	af00      	add	r7, sp, #0
100024be:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
100024c0:	687b      	ldr	r3, [r7, #4]
100024c2:	681b      	ldr	r3, [r3, #0]
100024c4:	2b00      	cmp	r3, #0
100024c6:	f000 8147 	beq.w	10002758 <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
100024ca:	687b      	ldr	r3, [r7, #4]
100024cc:	681b      	ldr	r3, [r3, #0]
100024ce:	2b02      	cmp	r3, #2
100024d0:	f040 8119 	bne.w	10002706 <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100024d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024d8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100024dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100024e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100024e4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
100024e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024ec:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100024f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100024f4:	f023 0301 	bic.w	r3, r3, #1
100024f8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100024fc:	f7fe f812 	bl	10000524 <HAL_GetTick>
10002500:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002502:	e008      	b.n	10002516 <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002504:	f7fe f80e 	bl	10000524 <HAL_GetTick>
10002508:	4602      	mov	r2, r0
1000250a:	68fb      	ldr	r3, [r7, #12]
1000250c:	1ad3      	subs	r3, r2, r3
1000250e:	2b64      	cmp	r3, #100	; 0x64
10002510:	d901      	bls.n	10002516 <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10002512:	2303      	movs	r3, #3
10002514:	e121      	b.n	1000275a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002516:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000251a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000251e:	f003 0302 	and.w	r3, r3, #2
10002522:	2b02      	cmp	r3, #2
10002524:	d0ee      	beq.n	10002504 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10002526:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000252a:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000252e:	f023 0203 	bic.w	r2, r3, #3
10002532:	687b      	ldr	r3, [r7, #4]
10002534:	685b      	ldr	r3, [r3, #4]
10002536:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000253a:	4313      	orrs	r3, r2
1000253c:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002540:	e008      	b.n	10002554 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002542:	f7fd ffef 	bl	10000524 <HAL_GetTick>
10002546:	4602      	mov	r2, r0
10002548:	68fb      	ldr	r3, [r7, #12]
1000254a:	1ad3      	subs	r3, r2, r3
1000254c:	2b64      	cmp	r3, #100	; 0x64
1000254e:	d901      	bls.n	10002554 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10002550:	2303      	movs	r3, #3
10002552:	e102      	b.n	1000275a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10002554:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002558:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
1000255c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002560:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002564:	d1ed      	bne.n	10002542 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10002566:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000256a:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
1000256e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10002572:	687b      	ldr	r3, [r7, #4]
10002574:	69db      	ldr	r3, [r3, #28]
10002576:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000257a:	4313      	orrs	r3, r2
1000257c:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10002580:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002584:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10002588:	4b76      	ldr	r3, [pc, #472]	; (10002764 <RCCEx_PLL4_Config+0x2ac>)
1000258a:	4013      	ands	r3, r2
1000258c:	687a      	ldr	r2, [r7, #4]
1000258e:	68d2      	ldr	r2, [r2, #12]
10002590:	1e51      	subs	r1, r2, #1
10002592:	687a      	ldr	r2, [r7, #4]
10002594:	6892      	ldr	r2, [r2, #8]
10002596:	3a01      	subs	r2, #1
10002598:	0412      	lsls	r2, r2, #16
1000259a:	430a      	orrs	r2, r1
1000259c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100025a0:	4313      	orrs	r3, r2
100025a2:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
100025a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025aa:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100025ae:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100025b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100025b6:	687a      	ldr	r2, [r7, #4]
100025b8:	6912      	ldr	r2, [r2, #16]
100025ba:	1e51      	subs	r1, r2, #1
100025bc:	687a      	ldr	r2, [r7, #4]
100025be:	6952      	ldr	r2, [r2, #20]
100025c0:	3a01      	subs	r2, #1
100025c2:	0212      	lsls	r2, r2, #8
100025c4:	4311      	orrs	r1, r2
100025c6:	687a      	ldr	r2, [r7, #4]
100025c8:	6992      	ldr	r2, [r2, #24]
100025ca:	3a01      	subs	r2, #1
100025cc:	0412      	lsls	r2, r2, #16
100025ce:	430a      	orrs	r2, r1
100025d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100025d4:	4313      	orrs	r3, r2
100025d6:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
100025da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025de:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100025e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100025ea:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
100025ee:	687b      	ldr	r3, [r7, #4]
100025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100025f2:	2b02      	cmp	r3, #2
100025f4:	d003      	beq.n	100025fe <RCCEx_PLL4_Config+0x146>
100025f6:	687b      	ldr	r3, [r7, #4]
100025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100025fa:	2b00      	cmp	r3, #0
100025fc:	d10c      	bne.n	10002618 <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
100025fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002602:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002606:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000260a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000260e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002612:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10002616:	e00f      	b.n	10002638 <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10002618:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000261c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002620:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002624:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002628:	687a      	ldr	r2, [r7, #4]
1000262a:	6a12      	ldr	r2, [r2, #32]
1000262c:	00d2      	lsls	r2, r2, #3
1000262e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002632:	4313      	orrs	r3, r2
10002634:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10002638:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000263c:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10002640:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10002648:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000264c:	687b      	ldr	r3, [r7, #4]
1000264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002650:	2b02      	cmp	r3, #2
10002652:	d124      	bne.n	1000269e <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10002654:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002658:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
1000265c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10002660:	687b      	ldr	r3, [r7, #4]
10002662:	6a99      	ldr	r1, [r3, #40]	; 0x28
10002664:	687b      	ldr	r3, [r7, #4]
10002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002668:	4319      	orrs	r1, r3
1000266a:	687b      	ldr	r3, [r7, #4]
1000266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000266e:	4319      	orrs	r1, r3
10002670:	687b      	ldr	r3, [r7, #4]
10002672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10002674:	4319      	orrs	r1, r3
10002676:	687b      	ldr	r3, [r7, #4]
10002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000267a:	041b      	lsls	r3, r3, #16
1000267c:	430b      	orrs	r3, r1
1000267e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002682:	4313      	orrs	r3, r2
10002684:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10002688:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000268c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002690:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002694:	f043 0304 	orr.w	r3, r3, #4
10002698:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
1000269c:	e009      	b.n	100026b2 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
1000269e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026a2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100026a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026aa:	f023 0304 	bic.w	r3, r3, #4
100026ae:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
100026b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026b6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100026ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026be:	f043 0301 	orr.w	r3, r3, #1
100026c2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100026c6:	f7fd ff2d 	bl	10000524 <HAL_GetTick>
100026ca:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100026cc:	e008      	b.n	100026e0 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100026ce:	f7fd ff29 	bl	10000524 <HAL_GetTick>
100026d2:	4602      	mov	r2, r0
100026d4:	68fb      	ldr	r3, [r7, #12]
100026d6:	1ad3      	subs	r3, r2, r3
100026d8:	2b64      	cmp	r3, #100	; 0x64
100026da:	d901      	bls.n	100026e0 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
100026dc:	2303      	movs	r3, #3
100026de:	e03c      	b.n	1000275a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
100026e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026e4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100026e8:	f003 0302 	and.w	r3, r3, #2
100026ec:	2b02      	cmp	r3, #2
100026ee:	d1ee      	bne.n	100026ce <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
100026f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026f4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100026f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026fc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002700:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10002704:	e028      	b.n	10002758 <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10002706:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000270a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000270e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002716:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
1000271a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000271e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002722:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002726:	f023 0301 	bic.w	r3, r3, #1
1000272a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000272e:	f7fd fef9 	bl	10000524 <HAL_GetTick>
10002732:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002734:	e008      	b.n	10002748 <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002736:	f7fd fef5 	bl	10000524 <HAL_GetTick>
1000273a:	4602      	mov	r2, r0
1000273c:	68fb      	ldr	r3, [r7, #12]
1000273e:	1ad3      	subs	r3, r2, r3
10002740:	2b64      	cmp	r3, #100	; 0x64
10002742:	d901      	bls.n	10002748 <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10002744:	2303      	movs	r3, #3
10002746:	e008      	b.n	1000275a <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10002748:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000274c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10002750:	f003 0302 	and.w	r3, r3, #2
10002754:	2b02      	cmp	r3, #2
10002756:	d0ee      	beq.n	10002736 <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10002758:	2300      	movs	r3, #0
}
1000275a:	4618      	mov	r0, r3
1000275c:	3710      	adds	r7, #16
1000275e:	46bd      	mov	sp, r7
10002760:	bd80      	pop	{r7, pc}
10002762:	bf00      	nop
10002764:	ffc0fe00 	.word	0xffc0fe00

10002768 <memset>:
10002768:	4402      	add	r2, r0
1000276a:	4603      	mov	r3, r0
1000276c:	4293      	cmp	r3, r2
1000276e:	d100      	bne.n	10002772 <memset+0xa>
10002770:	4770      	bx	lr
10002772:	f803 1b01 	strb.w	r1, [r3], #1
10002776:	e7f9      	b.n	1000276c <memset+0x4>

10002778 <__libc_init_array>:
10002778:	b570      	push	{r4, r5, r6, lr}
1000277a:	4d0d      	ldr	r5, [pc, #52]	; (100027b0 <__libc_init_array+0x38>)
1000277c:	4c0d      	ldr	r4, [pc, #52]	; (100027b4 <__libc_init_array+0x3c>)
1000277e:	1b64      	subs	r4, r4, r5
10002780:	10a4      	asrs	r4, r4, #2
10002782:	2600      	movs	r6, #0
10002784:	42a6      	cmp	r6, r4
10002786:	d109      	bne.n	1000279c <__libc_init_array+0x24>
10002788:	4d0b      	ldr	r5, [pc, #44]	; (100027b8 <__libc_init_array+0x40>)
1000278a:	4c0c      	ldr	r4, [pc, #48]	; (100027bc <__libc_init_array+0x44>)
1000278c:	f000 f818 	bl	100027c0 <_init>
10002790:	1b64      	subs	r4, r4, r5
10002792:	10a4      	asrs	r4, r4, #2
10002794:	2600      	movs	r6, #0
10002796:	42a6      	cmp	r6, r4
10002798:	d105      	bne.n	100027a6 <__libc_init_array+0x2e>
1000279a:	bd70      	pop	{r4, r5, r6, pc}
1000279c:	f855 3b04 	ldr.w	r3, [r5], #4
100027a0:	4798      	blx	r3
100027a2:	3601      	adds	r6, #1
100027a4:	e7ee      	b.n	10002784 <__libc_init_array+0xc>
100027a6:	f855 3b04 	ldr.w	r3, [r5], #4
100027aa:	4798      	blx	r3
100027ac:	3601      	adds	r6, #1
100027ae:	e7f2      	b.n	10002796 <__libc_init_array+0x1e>
100027b0:	10002828 	.word	0x10002828
100027b4:	10002828 	.word	0x10002828
100027b8:	10002828 	.word	0x10002828
100027bc:	1000282c 	.word	0x1000282c

100027c0 <_init>:
100027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100027c2:	bf00      	nop
100027c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
100027c6:	bc08      	pop	{r3}
100027c8:	469e      	mov	lr, r3
100027ca:	4770      	bx	lr

100027cc <_fini>:
100027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100027ce:	bf00      	nop
100027d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100027d2:	bc08      	pop	{r3}
100027d4:	469e      	mov	lr, r3
100027d6:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

100027d8 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
100027d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 10002810 <LoopForever+0x2>
  movs  r1, #0
100027dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
100027de:	e003      	b.n	100027e8 <LoopCopyDataInit>

100027e0 <CopyDataInit>:
  ldr  r3, =_sidata
100027e0:	4b0c      	ldr	r3, [pc, #48]	; (10002814 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
100027e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
100027e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
100027e6:	3104      	adds	r1, #4

100027e8 <LoopCopyDataInit>:
  ldr  r0, =_sdata
100027e8:	480b      	ldr	r0, [pc, #44]	; (10002818 <LoopForever+0xa>)
  ldr  r3, =_edata
100027ea:	4b0c      	ldr	r3, [pc, #48]	; (1000281c <LoopForever+0xe>)
  adds  r2, r0, r1
100027ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
100027ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
100027f0:	d3f6      	bcc.n	100027e0 <CopyDataInit>
  ldr  r2, =_sbss
100027f2:	4a0b      	ldr	r2, [pc, #44]	; (10002820 <LoopForever+0x12>)
  b  LoopFillZerobss
100027f4:	e002      	b.n	100027fc <LoopFillZerobss>

100027f6 <FillZerobss>:
  movs  r3, #0
100027f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
100027f8:	f842 3b04 	str.w	r3, [r2], #4

100027fc <LoopFillZerobss>:
  ldr  r3, = _ebss
100027fc:	4b09      	ldr	r3, [pc, #36]	; (10002824 <LoopForever+0x16>)
  cmp  r2, r3
100027fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
10002800:	d3f9      	bcc.n	100027f6 <FillZerobss>
  bl  SystemInit
10002802:	f7fd fc1d 	bl	10000040 <SystemInit>
 bl __libc_init_array
10002806:	f7ff ffb7 	bl	10002778 <__libc_init_array>
  bl main
1000280a:	f7fd fc89 	bl	10000120 <main>

1000280e <LoopForever>:
    b LoopForever
1000280e:	e7fe      	b.n	1000280e <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10002810:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10002814:	10002830 	.word	0x10002830
  ldr  r0, =_sdata
10002818:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000281c:	1002000c 	.word	0x1002000c
  ldr  r2, =_sbss
10002820:	1002000c 	.word	0x1002000c
  ldr  r3, = _ebss
10002824:	10020030 	.word	0x10020030
