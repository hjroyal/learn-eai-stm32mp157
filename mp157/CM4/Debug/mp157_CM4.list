
mp157_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba60  10000000  10000000  00020000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  1000ba60  1000ba60  0002ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000538  1000bab0  1000bab0  0002bab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  1000bfe8  1000bfe8  000301d4  2**0
                  CONTENTS
  5 .ARM          00000000  1000bfe8  1000bfe8  000301d4  2**0
                  CONTENTS
  6 .preinit_array 00000000  1000bfe8  1000bfe8  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  1000bfe8  1000bfe8  0002bfe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  1000bfec  1000bfec  0002bfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001d4  10020000  1000bff0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  100201d4  100201d4  000301d4  2**0
                  CONTENTS
 11 .bss          0000020c  100201d4  1000c1c4  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  100203e0  1000c3d0  000301d4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 15 .debug_info   0000f80d  00000000  00000000  00030247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00001f1b  00000000  00000000  0003fa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000a10  00000000  00000000  00041970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000775  00000000  00000000  00042380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0004661d  00000000  00000000  00042af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0000e945  00000000  00000000  00089112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001c8773  00000000  00000000  00097a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00003c74  00000000  00000000  002601cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005b  00000000  00000000  00263e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	100201d4 	.word	0x100201d4
1000001c:	00000000 	.word	0x00000000
10000020:	1000ba48 	.word	0x1000ba48

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	100201d8 	.word	0x100201d8
1000003c:	1000ba48 	.word	0x1000ba48

10000040 <memchr>:
10000040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
10000044:	2a10      	cmp	r2, #16
10000046:	db2b      	blt.n	100000a0 <memchr+0x60>
10000048:	f010 0f07 	tst.w	r0, #7
1000004c:	d008      	beq.n	10000060 <memchr+0x20>
1000004e:	f810 3b01 	ldrb.w	r3, [r0], #1
10000052:	3a01      	subs	r2, #1
10000054:	428b      	cmp	r3, r1
10000056:	d02d      	beq.n	100000b4 <memchr+0x74>
10000058:	f010 0f07 	tst.w	r0, #7
1000005c:	b342      	cbz	r2, 100000b0 <memchr+0x70>
1000005e:	d1f6      	bne.n	1000004e <memchr+0xe>
10000060:	b4f0      	push	{r4, r5, r6, r7}
10000062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
10000066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1000006a:	f022 0407 	bic.w	r4, r2, #7
1000006e:	f07f 0700 	mvns.w	r7, #0
10000072:	2300      	movs	r3, #0
10000074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
10000078:	3c08      	subs	r4, #8
1000007a:	ea85 0501 	eor.w	r5, r5, r1
1000007e:	ea86 0601 	eor.w	r6, r6, r1
10000082:	fa85 f547 	uadd8	r5, r5, r7
10000086:	faa3 f587 	sel	r5, r3, r7
1000008a:	fa86 f647 	uadd8	r6, r6, r7
1000008e:	faa5 f687 	sel	r6, r5, r7
10000092:	b98e      	cbnz	r6, 100000b8 <memchr+0x78>
10000094:	d1ee      	bne.n	10000074 <memchr+0x34>
10000096:	bcf0      	pop	{r4, r5, r6, r7}
10000098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1000009c:	f002 0207 	and.w	r2, r2, #7
100000a0:	b132      	cbz	r2, 100000b0 <memchr+0x70>
100000a2:	f810 3b01 	ldrb.w	r3, [r0], #1
100000a6:	3a01      	subs	r2, #1
100000a8:	ea83 0301 	eor.w	r3, r3, r1
100000ac:	b113      	cbz	r3, 100000b4 <memchr+0x74>
100000ae:	d1f8      	bne.n	100000a2 <memchr+0x62>
100000b0:	2000      	movs	r0, #0
100000b2:	4770      	bx	lr
100000b4:	3801      	subs	r0, #1
100000b6:	4770      	bx	lr
100000b8:	2d00      	cmp	r5, #0
100000ba:	bf06      	itte	eq
100000bc:	4635      	moveq	r5, r6
100000be:	3803      	subeq	r0, #3
100000c0:	3807      	subne	r0, #7
100000c2:	f015 0f01 	tst.w	r5, #1
100000c6:	d107      	bne.n	100000d8 <memchr+0x98>
100000c8:	3001      	adds	r0, #1
100000ca:	f415 7f80 	tst.w	r5, #256	; 0x100
100000ce:	bf02      	ittt	eq
100000d0:	3001      	addeq	r0, #1
100000d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
100000d6:	3001      	addeq	r0, #1
100000d8:	bcf0      	pop	{r4, r5, r6, r7}
100000da:	3801      	subs	r0, #1
100000dc:	4770      	bx	lr
100000de:	bf00      	nop

100000e0 <strlen>:
100000e0:	4603      	mov	r3, r0
100000e2:	f813 2b01 	ldrb.w	r2, [r3], #1
100000e6:	2a00      	cmp	r2, #0
100000e8:	d1fb      	bne.n	100000e2 <strlen+0x2>
100000ea:	1a18      	subs	r0, r3, r0
100000ec:	3801      	subs	r0, #1
100000ee:	4770      	bx	lr

100000f0 <__aeabi_drsub>:
100000f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
100000f4:	e002      	b.n	100000fc <__adddf3>
100000f6:	bf00      	nop

100000f8 <__aeabi_dsub>:
100000f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

100000fc <__adddf3>:
100000fc:	b530      	push	{r4, r5, lr}
100000fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
10000102:	ea4f 0543 	mov.w	r5, r3, lsl #1
10000106:	ea94 0f05 	teq	r4, r5
1000010a:	bf08      	it	eq
1000010c:	ea90 0f02 	teqeq	r0, r2
10000110:	bf1f      	itttt	ne
10000112:	ea54 0c00 	orrsne.w	ip, r4, r0
10000116:	ea55 0c02 	orrsne.w	ip, r5, r2
1000011a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1000011e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
10000122:	f000 80e2 	beq.w	100002ea <__adddf3+0x1ee>
10000126:	ea4f 5454 	mov.w	r4, r4, lsr #21
1000012a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1000012e:	bfb8      	it	lt
10000130:	426d      	neglt	r5, r5
10000132:	dd0c      	ble.n	1000014e <__adddf3+0x52>
10000134:	442c      	add	r4, r5
10000136:	ea80 0202 	eor.w	r2, r0, r2
1000013a:	ea81 0303 	eor.w	r3, r1, r3
1000013e:	ea82 0000 	eor.w	r0, r2, r0
10000142:	ea83 0101 	eor.w	r1, r3, r1
10000146:	ea80 0202 	eor.w	r2, r0, r2
1000014a:	ea81 0303 	eor.w	r3, r1, r3
1000014e:	2d36      	cmp	r5, #54	; 0x36
10000150:	bf88      	it	hi
10000152:	bd30      	pophi	{r4, r5, pc}
10000154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
10000158:	ea4f 3101 	mov.w	r1, r1, lsl #12
1000015c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
10000160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
10000164:	d002      	beq.n	1000016c <__adddf3+0x70>
10000166:	4240      	negs	r0, r0
10000168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1000016c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
10000170:	ea4f 3303 	mov.w	r3, r3, lsl #12
10000174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
10000178:	d002      	beq.n	10000180 <__adddf3+0x84>
1000017a:	4252      	negs	r2, r2
1000017c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
10000180:	ea94 0f05 	teq	r4, r5
10000184:	f000 80a7 	beq.w	100002d6 <__adddf3+0x1da>
10000188:	f1a4 0401 	sub.w	r4, r4, #1
1000018c:	f1d5 0e20 	rsbs	lr, r5, #32
10000190:	db0d      	blt.n	100001ae <__adddf3+0xb2>
10000192:	fa02 fc0e 	lsl.w	ip, r2, lr
10000196:	fa22 f205 	lsr.w	r2, r2, r5
1000019a:	1880      	adds	r0, r0, r2
1000019c:	f141 0100 	adc.w	r1, r1, #0
100001a0:	fa03 f20e 	lsl.w	r2, r3, lr
100001a4:	1880      	adds	r0, r0, r2
100001a6:	fa43 f305 	asr.w	r3, r3, r5
100001aa:	4159      	adcs	r1, r3
100001ac:	e00e      	b.n	100001cc <__adddf3+0xd0>
100001ae:	f1a5 0520 	sub.w	r5, r5, #32
100001b2:	f10e 0e20 	add.w	lr, lr, #32
100001b6:	2a01      	cmp	r2, #1
100001b8:	fa03 fc0e 	lsl.w	ip, r3, lr
100001bc:	bf28      	it	cs
100001be:	f04c 0c02 	orrcs.w	ip, ip, #2
100001c2:	fa43 f305 	asr.w	r3, r3, r5
100001c6:	18c0      	adds	r0, r0, r3
100001c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
100001cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
100001d0:	d507      	bpl.n	100001e2 <__adddf3+0xe6>
100001d2:	f04f 0e00 	mov.w	lr, #0
100001d6:	f1dc 0c00 	rsbs	ip, ip, #0
100001da:	eb7e 0000 	sbcs.w	r0, lr, r0
100001de:	eb6e 0101 	sbc.w	r1, lr, r1
100001e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
100001e6:	d31b      	bcc.n	10000220 <__adddf3+0x124>
100001e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
100001ec:	d30c      	bcc.n	10000208 <__adddf3+0x10c>
100001ee:	0849      	lsrs	r1, r1, #1
100001f0:	ea5f 0030 	movs.w	r0, r0, rrx
100001f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
100001f8:	f104 0401 	add.w	r4, r4, #1
100001fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
10000200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
10000204:	f080 809a 	bcs.w	1000033c <__adddf3+0x240>
10000208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1000020c:	bf08      	it	eq
1000020e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
10000212:	f150 0000 	adcs.w	r0, r0, #0
10000216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000021a:	ea41 0105 	orr.w	r1, r1, r5
1000021e:	bd30      	pop	{r4, r5, pc}
10000220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
10000224:	4140      	adcs	r0, r0
10000226:	eb41 0101 	adc.w	r1, r1, r1
1000022a:	3c01      	subs	r4, #1
1000022c:	bf28      	it	cs
1000022e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
10000232:	d2e9      	bcs.n	10000208 <__adddf3+0x10c>
10000234:	f091 0f00 	teq	r1, #0
10000238:	bf04      	itt	eq
1000023a:	4601      	moveq	r1, r0
1000023c:	2000      	moveq	r0, #0
1000023e:	fab1 f381 	clz	r3, r1
10000242:	bf08      	it	eq
10000244:	3320      	addeq	r3, #32
10000246:	f1a3 030b 	sub.w	r3, r3, #11
1000024a:	f1b3 0220 	subs.w	r2, r3, #32
1000024e:	da0c      	bge.n	1000026a <__adddf3+0x16e>
10000250:	320c      	adds	r2, #12
10000252:	dd08      	ble.n	10000266 <__adddf3+0x16a>
10000254:	f102 0c14 	add.w	ip, r2, #20
10000258:	f1c2 020c 	rsb	r2, r2, #12
1000025c:	fa01 f00c 	lsl.w	r0, r1, ip
10000260:	fa21 f102 	lsr.w	r1, r1, r2
10000264:	e00c      	b.n	10000280 <__adddf3+0x184>
10000266:	f102 0214 	add.w	r2, r2, #20
1000026a:	bfd8      	it	le
1000026c:	f1c2 0c20 	rsble	ip, r2, #32
10000270:	fa01 f102 	lsl.w	r1, r1, r2
10000274:	fa20 fc0c 	lsr.w	ip, r0, ip
10000278:	bfdc      	itt	le
1000027a:	ea41 010c 	orrle.w	r1, r1, ip
1000027e:	4090      	lslle	r0, r2
10000280:	1ae4      	subs	r4, r4, r3
10000282:	bfa2      	ittt	ge
10000284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
10000288:	4329      	orrge	r1, r5
1000028a:	bd30      	popge	{r4, r5, pc}
1000028c:	ea6f 0404 	mvn.w	r4, r4
10000290:	3c1f      	subs	r4, #31
10000292:	da1c      	bge.n	100002ce <__adddf3+0x1d2>
10000294:	340c      	adds	r4, #12
10000296:	dc0e      	bgt.n	100002b6 <__adddf3+0x1ba>
10000298:	f104 0414 	add.w	r4, r4, #20
1000029c:	f1c4 0220 	rsb	r2, r4, #32
100002a0:	fa20 f004 	lsr.w	r0, r0, r4
100002a4:	fa01 f302 	lsl.w	r3, r1, r2
100002a8:	ea40 0003 	orr.w	r0, r0, r3
100002ac:	fa21 f304 	lsr.w	r3, r1, r4
100002b0:	ea45 0103 	orr.w	r1, r5, r3
100002b4:	bd30      	pop	{r4, r5, pc}
100002b6:	f1c4 040c 	rsb	r4, r4, #12
100002ba:	f1c4 0220 	rsb	r2, r4, #32
100002be:	fa20 f002 	lsr.w	r0, r0, r2
100002c2:	fa01 f304 	lsl.w	r3, r1, r4
100002c6:	ea40 0003 	orr.w	r0, r0, r3
100002ca:	4629      	mov	r1, r5
100002cc:	bd30      	pop	{r4, r5, pc}
100002ce:	fa21 f004 	lsr.w	r0, r1, r4
100002d2:	4629      	mov	r1, r5
100002d4:	bd30      	pop	{r4, r5, pc}
100002d6:	f094 0f00 	teq	r4, #0
100002da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
100002de:	bf06      	itte	eq
100002e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
100002e4:	3401      	addeq	r4, #1
100002e6:	3d01      	subne	r5, #1
100002e8:	e74e      	b.n	10000188 <__adddf3+0x8c>
100002ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
100002ee:	bf18      	it	ne
100002f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
100002f4:	d029      	beq.n	1000034a <__adddf3+0x24e>
100002f6:	ea94 0f05 	teq	r4, r5
100002fa:	bf08      	it	eq
100002fc:	ea90 0f02 	teqeq	r0, r2
10000300:	d005      	beq.n	1000030e <__adddf3+0x212>
10000302:	ea54 0c00 	orrs.w	ip, r4, r0
10000306:	bf04      	itt	eq
10000308:	4619      	moveq	r1, r3
1000030a:	4610      	moveq	r0, r2
1000030c:	bd30      	pop	{r4, r5, pc}
1000030e:	ea91 0f03 	teq	r1, r3
10000312:	bf1e      	ittt	ne
10000314:	2100      	movne	r1, #0
10000316:	2000      	movne	r0, #0
10000318:	bd30      	popne	{r4, r5, pc}
1000031a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1000031e:	d105      	bne.n	1000032c <__adddf3+0x230>
10000320:	0040      	lsls	r0, r0, #1
10000322:	4149      	adcs	r1, r1
10000324:	bf28      	it	cs
10000326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1000032a:	bd30      	pop	{r4, r5, pc}
1000032c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
10000330:	bf3c      	itt	cc
10000332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
10000336:	bd30      	popcc	{r4, r5, pc}
10000338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1000033c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
10000340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
10000344:	f04f 0000 	mov.w	r0, #0
10000348:	bd30      	pop	{r4, r5, pc}
1000034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1000034e:	bf1a      	itte	ne
10000350:	4619      	movne	r1, r3
10000352:	4610      	movne	r0, r2
10000354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
10000358:	bf1c      	itt	ne
1000035a:	460b      	movne	r3, r1
1000035c:	4602      	movne	r2, r0
1000035e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000362:	bf06      	itte	eq
10000364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
10000368:	ea91 0f03 	teqeq	r1, r3
1000036c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
10000370:	bd30      	pop	{r4, r5, pc}
10000372:	bf00      	nop

10000374 <__aeabi_ui2d>:
10000374:	f090 0f00 	teq	r0, #0
10000378:	bf04      	itt	eq
1000037a:	2100      	moveq	r1, #0
1000037c:	4770      	bxeq	lr
1000037e:	b530      	push	{r4, r5, lr}
10000380:	f44f 6480 	mov.w	r4, #1024	; 0x400
10000384:	f104 0432 	add.w	r4, r4, #50	; 0x32
10000388:	f04f 0500 	mov.w	r5, #0
1000038c:	f04f 0100 	mov.w	r1, #0
10000390:	e750      	b.n	10000234 <__adddf3+0x138>
10000392:	bf00      	nop

10000394 <__aeabi_i2d>:
10000394:	f090 0f00 	teq	r0, #0
10000398:	bf04      	itt	eq
1000039a:	2100      	moveq	r1, #0
1000039c:	4770      	bxeq	lr
1000039e:	b530      	push	{r4, r5, lr}
100003a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
100003a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
100003a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
100003ac:	bf48      	it	mi
100003ae:	4240      	negmi	r0, r0
100003b0:	f04f 0100 	mov.w	r1, #0
100003b4:	e73e      	b.n	10000234 <__adddf3+0x138>
100003b6:	bf00      	nop

100003b8 <__aeabi_f2d>:
100003b8:	0042      	lsls	r2, r0, #1
100003ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
100003be:	ea4f 0131 	mov.w	r1, r1, rrx
100003c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
100003c6:	bf1f      	itttt	ne
100003c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
100003cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
100003d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
100003d4:	4770      	bxne	lr
100003d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
100003da:	bf08      	it	eq
100003dc:	4770      	bxeq	lr
100003de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
100003e2:	bf04      	itt	eq
100003e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
100003e8:	4770      	bxeq	lr
100003ea:	b530      	push	{r4, r5, lr}
100003ec:	f44f 7460 	mov.w	r4, #896	; 0x380
100003f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
100003f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
100003f8:	e71c      	b.n	10000234 <__adddf3+0x138>
100003fa:	bf00      	nop

100003fc <__aeabi_ul2d>:
100003fc:	ea50 0201 	orrs.w	r2, r0, r1
10000400:	bf08      	it	eq
10000402:	4770      	bxeq	lr
10000404:	b530      	push	{r4, r5, lr}
10000406:	f04f 0500 	mov.w	r5, #0
1000040a:	e00a      	b.n	10000422 <__aeabi_l2d+0x16>

1000040c <__aeabi_l2d>:
1000040c:	ea50 0201 	orrs.w	r2, r0, r1
10000410:	bf08      	it	eq
10000412:	4770      	bxeq	lr
10000414:	b530      	push	{r4, r5, lr}
10000416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1000041a:	d502      	bpl.n	10000422 <__aeabi_l2d+0x16>
1000041c:	4240      	negs	r0, r0
1000041e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000422:	f44f 6480 	mov.w	r4, #1024	; 0x400
10000426:	f104 0432 	add.w	r4, r4, #50	; 0x32
1000042a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1000042e:	f43f aed8 	beq.w	100001e2 <__adddf3+0xe6>
10000432:	f04f 0203 	mov.w	r2, #3
10000436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1000043a:	bf18      	it	ne
1000043c:	3203      	addne	r2, #3
1000043e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
10000442:	bf18      	it	ne
10000444:	3203      	addne	r2, #3
10000446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1000044a:	f1c2 0320 	rsb	r3, r2, #32
1000044e:	fa00 fc03 	lsl.w	ip, r0, r3
10000452:	fa20 f002 	lsr.w	r0, r0, r2
10000456:	fa01 fe03 	lsl.w	lr, r1, r3
1000045a:	ea40 000e 	orr.w	r0, r0, lr
1000045e:	fa21 f102 	lsr.w	r1, r1, r2
10000462:	4414      	add	r4, r2
10000464:	e6bd      	b.n	100001e2 <__adddf3+0xe6>
10000466:	bf00      	nop

10000468 <__aeabi_dmul>:
10000468:	b570      	push	{r4, r5, r6, lr}
1000046a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1000046e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
10000472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
10000476:	bf1d      	ittte	ne
10000478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1000047c:	ea94 0f0c 	teqne	r4, ip
10000480:	ea95 0f0c 	teqne	r5, ip
10000484:	f000 f8de 	bleq	10000644 <__aeabi_dmul+0x1dc>
10000488:	442c      	add	r4, r5
1000048a:	ea81 0603 	eor.w	r6, r1, r3
1000048e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
10000492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
10000496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1000049a:	bf18      	it	ne
1000049c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
100004a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
100004a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
100004a8:	d038      	beq.n	1000051c <__aeabi_dmul+0xb4>
100004aa:	fba0 ce02 	umull	ip, lr, r0, r2
100004ae:	f04f 0500 	mov.w	r5, #0
100004b2:	fbe1 e502 	umlal	lr, r5, r1, r2
100004b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
100004ba:	fbe0 e503 	umlal	lr, r5, r0, r3
100004be:	f04f 0600 	mov.w	r6, #0
100004c2:	fbe1 5603 	umlal	r5, r6, r1, r3
100004c6:	f09c 0f00 	teq	ip, #0
100004ca:	bf18      	it	ne
100004cc:	f04e 0e01 	orrne.w	lr, lr, #1
100004d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
100004d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
100004d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
100004dc:	d204      	bcs.n	100004e8 <__aeabi_dmul+0x80>
100004de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
100004e2:	416d      	adcs	r5, r5
100004e4:	eb46 0606 	adc.w	r6, r6, r6
100004e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
100004ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
100004f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
100004f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
100004f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
100004fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
10000500:	bf88      	it	hi
10000502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
10000506:	d81e      	bhi.n	10000546 <__aeabi_dmul+0xde>
10000508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1000050c:	bf08      	it	eq
1000050e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
10000512:	f150 0000 	adcs.w	r0, r0, #0
10000516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1000051a:	bd70      	pop	{r4, r5, r6, pc}
1000051c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
10000520:	ea46 0101 	orr.w	r1, r6, r1
10000524:	ea40 0002 	orr.w	r0, r0, r2
10000528:	ea81 0103 	eor.w	r1, r1, r3
1000052c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
10000530:	bfc2      	ittt	gt
10000532:	ebd4 050c 	rsbsgt	r5, r4, ip
10000536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1000053a:	bd70      	popgt	{r4, r5, r6, pc}
1000053c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
10000540:	f04f 0e00 	mov.w	lr, #0
10000544:	3c01      	subs	r4, #1
10000546:	f300 80ab 	bgt.w	100006a0 <__aeabi_dmul+0x238>
1000054a:	f114 0f36 	cmn.w	r4, #54	; 0x36
1000054e:	bfde      	ittt	le
10000550:	2000      	movle	r0, #0
10000552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
10000556:	bd70      	pople	{r4, r5, r6, pc}
10000558:	f1c4 0400 	rsb	r4, r4, #0
1000055c:	3c20      	subs	r4, #32
1000055e:	da35      	bge.n	100005cc <__aeabi_dmul+0x164>
10000560:	340c      	adds	r4, #12
10000562:	dc1b      	bgt.n	1000059c <__aeabi_dmul+0x134>
10000564:	f104 0414 	add.w	r4, r4, #20
10000568:	f1c4 0520 	rsb	r5, r4, #32
1000056c:	fa00 f305 	lsl.w	r3, r0, r5
10000570:	fa20 f004 	lsr.w	r0, r0, r4
10000574:	fa01 f205 	lsl.w	r2, r1, r5
10000578:	ea40 0002 	orr.w	r0, r0, r2
1000057c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
10000580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
10000584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
10000588:	fa21 f604 	lsr.w	r6, r1, r4
1000058c:	eb42 0106 	adc.w	r1, r2, r6
10000590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
10000594:	bf08      	it	eq
10000596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1000059a:	bd70      	pop	{r4, r5, r6, pc}
1000059c:	f1c4 040c 	rsb	r4, r4, #12
100005a0:	f1c4 0520 	rsb	r5, r4, #32
100005a4:	fa00 f304 	lsl.w	r3, r0, r4
100005a8:	fa20 f005 	lsr.w	r0, r0, r5
100005ac:	fa01 f204 	lsl.w	r2, r1, r4
100005b0:	ea40 0002 	orr.w	r0, r0, r2
100005b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100005b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
100005bc:	f141 0100 	adc.w	r1, r1, #0
100005c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005c4:	bf08      	it	eq
100005c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
100005ca:	bd70      	pop	{r4, r5, r6, pc}
100005cc:	f1c4 0520 	rsb	r5, r4, #32
100005d0:	fa00 f205 	lsl.w	r2, r0, r5
100005d4:	ea4e 0e02 	orr.w	lr, lr, r2
100005d8:	fa20 f304 	lsr.w	r3, r0, r4
100005dc:	fa01 f205 	lsl.w	r2, r1, r5
100005e0:	ea43 0302 	orr.w	r3, r3, r2
100005e4:	fa21 f004 	lsr.w	r0, r1, r4
100005e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100005ec:	fa21 f204 	lsr.w	r2, r1, r4
100005f0:	ea20 0002 	bic.w	r0, r0, r2
100005f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
100005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
100005fc:	bf08      	it	eq
100005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
10000602:	bd70      	pop	{r4, r5, r6, pc}
10000604:	f094 0f00 	teq	r4, #0
10000608:	d10f      	bne.n	1000062a <__aeabi_dmul+0x1c2>
1000060a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1000060e:	0040      	lsls	r0, r0, #1
10000610:	eb41 0101 	adc.w	r1, r1, r1
10000614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
10000618:	bf08      	it	eq
1000061a:	3c01      	subeq	r4, #1
1000061c:	d0f7      	beq.n	1000060e <__aeabi_dmul+0x1a6>
1000061e:	ea41 0106 	orr.w	r1, r1, r6
10000622:	f095 0f00 	teq	r5, #0
10000626:	bf18      	it	ne
10000628:	4770      	bxne	lr
1000062a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1000062e:	0052      	lsls	r2, r2, #1
10000630:	eb43 0303 	adc.w	r3, r3, r3
10000634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
10000638:	bf08      	it	eq
1000063a:	3d01      	subeq	r5, #1
1000063c:	d0f7      	beq.n	1000062e <__aeabi_dmul+0x1c6>
1000063e:	ea43 0306 	orr.w	r3, r3, r6
10000642:	4770      	bx	lr
10000644:	ea94 0f0c 	teq	r4, ip
10000648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000064c:	bf18      	it	ne
1000064e:	ea95 0f0c 	teqne	r5, ip
10000652:	d00c      	beq.n	1000066e <__aeabi_dmul+0x206>
10000654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000658:	bf18      	it	ne
1000065a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000065e:	d1d1      	bne.n	10000604 <__aeabi_dmul+0x19c>
10000660:	ea81 0103 	eor.w	r1, r1, r3
10000664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
10000668:	f04f 0000 	mov.w	r0, #0
1000066c:	bd70      	pop	{r4, r5, r6, pc}
1000066e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000672:	bf06      	itte	eq
10000674:	4610      	moveq	r0, r2
10000676:	4619      	moveq	r1, r3
10000678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1000067c:	d019      	beq.n	100006b2 <__aeabi_dmul+0x24a>
1000067e:	ea94 0f0c 	teq	r4, ip
10000682:	d102      	bne.n	1000068a <__aeabi_dmul+0x222>
10000684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
10000688:	d113      	bne.n	100006b2 <__aeabi_dmul+0x24a>
1000068a:	ea95 0f0c 	teq	r5, ip
1000068e:	d105      	bne.n	1000069c <__aeabi_dmul+0x234>
10000690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
10000694:	bf1c      	itt	ne
10000696:	4610      	movne	r0, r2
10000698:	4619      	movne	r1, r3
1000069a:	d10a      	bne.n	100006b2 <__aeabi_dmul+0x24a>
1000069c:	ea81 0103 	eor.w	r1, r1, r3
100006a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
100006a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
100006ac:	f04f 0000 	mov.w	r0, #0
100006b0:	bd70      	pop	{r4, r5, r6, pc}
100006b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
100006b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
100006ba:	bd70      	pop	{r4, r5, r6, pc}

100006bc <__aeabi_ddiv>:
100006bc:	b570      	push	{r4, r5, r6, lr}
100006be:	f04f 0cff 	mov.w	ip, #255	; 0xff
100006c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
100006c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
100006ca:	bf1d      	ittte	ne
100006cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
100006d0:	ea94 0f0c 	teqne	r4, ip
100006d4:	ea95 0f0c 	teqne	r5, ip
100006d8:	f000 f8a7 	bleq	1000082a <__aeabi_ddiv+0x16e>
100006dc:	eba4 0405 	sub.w	r4, r4, r5
100006e0:	ea81 0e03 	eor.w	lr, r1, r3
100006e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
100006e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
100006ec:	f000 8088 	beq.w	10000800 <__aeabi_ddiv+0x144>
100006f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
100006f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
100006f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
100006fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
10000700:	ea4f 2202 	mov.w	r2, r2, lsl #8
10000704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
10000708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1000070c:	ea4f 2600 	mov.w	r6, r0, lsl #8
10000710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
10000714:	429d      	cmp	r5, r3
10000716:	bf08      	it	eq
10000718:	4296      	cmpeq	r6, r2
1000071a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1000071e:	f504 7440 	add.w	r4, r4, #768	; 0x300
10000722:	d202      	bcs.n	1000072a <__aeabi_ddiv+0x6e>
10000724:	085b      	lsrs	r3, r3, #1
10000726:	ea4f 0232 	mov.w	r2, r2, rrx
1000072a:	1ab6      	subs	r6, r6, r2
1000072c:	eb65 0503 	sbc.w	r5, r5, r3
10000730:	085b      	lsrs	r3, r3, #1
10000732:	ea4f 0232 	mov.w	r2, r2, rrx
10000736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1000073a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1000073e:	ebb6 0e02 	subs.w	lr, r6, r2
10000742:	eb75 0e03 	sbcs.w	lr, r5, r3
10000746:	bf22      	ittt	cs
10000748:	1ab6      	subcs	r6, r6, r2
1000074a:	4675      	movcs	r5, lr
1000074c:	ea40 000c 	orrcs.w	r0, r0, ip
10000750:	085b      	lsrs	r3, r3, #1
10000752:	ea4f 0232 	mov.w	r2, r2, rrx
10000756:	ebb6 0e02 	subs.w	lr, r6, r2
1000075a:	eb75 0e03 	sbcs.w	lr, r5, r3
1000075e:	bf22      	ittt	cs
10000760:	1ab6      	subcs	r6, r6, r2
10000762:	4675      	movcs	r5, lr
10000764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
10000768:	085b      	lsrs	r3, r3, #1
1000076a:	ea4f 0232 	mov.w	r2, r2, rrx
1000076e:	ebb6 0e02 	subs.w	lr, r6, r2
10000772:	eb75 0e03 	sbcs.w	lr, r5, r3
10000776:	bf22      	ittt	cs
10000778:	1ab6      	subcs	r6, r6, r2
1000077a:	4675      	movcs	r5, lr
1000077c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
10000780:	085b      	lsrs	r3, r3, #1
10000782:	ea4f 0232 	mov.w	r2, r2, rrx
10000786:	ebb6 0e02 	subs.w	lr, r6, r2
1000078a:	eb75 0e03 	sbcs.w	lr, r5, r3
1000078e:	bf22      	ittt	cs
10000790:	1ab6      	subcs	r6, r6, r2
10000792:	4675      	movcs	r5, lr
10000794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
10000798:	ea55 0e06 	orrs.w	lr, r5, r6
1000079c:	d018      	beq.n	100007d0 <__aeabi_ddiv+0x114>
1000079e:	ea4f 1505 	mov.w	r5, r5, lsl #4
100007a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
100007a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
100007aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
100007ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
100007b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
100007b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
100007ba:	d1c0      	bne.n	1000073e <__aeabi_ddiv+0x82>
100007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007c0:	d10b      	bne.n	100007da <__aeabi_ddiv+0x11e>
100007c2:	ea41 0100 	orr.w	r1, r1, r0
100007c6:	f04f 0000 	mov.w	r0, #0
100007ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
100007ce:	e7b6      	b.n	1000073e <__aeabi_ddiv+0x82>
100007d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
100007d4:	bf04      	itt	eq
100007d6:	4301      	orreq	r1, r0
100007d8:	2000      	moveq	r0, #0
100007da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
100007de:	bf88      	it	hi
100007e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
100007e4:	f63f aeaf 	bhi.w	10000546 <__aeabi_dmul+0xde>
100007e8:	ebb5 0c03 	subs.w	ip, r5, r3
100007ec:	bf04      	itt	eq
100007ee:	ebb6 0c02 	subseq.w	ip, r6, r2
100007f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
100007f6:	f150 0000 	adcs.w	r0, r0, #0
100007fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
100007fe:	bd70      	pop	{r4, r5, r6, pc}
10000800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
10000804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
10000808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1000080c:	bfc2      	ittt	gt
1000080e:	ebd4 050c 	rsbsgt	r5, r4, ip
10000812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
10000816:	bd70      	popgt	{r4, r5, r6, pc}
10000818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1000081c:	f04f 0e00 	mov.w	lr, #0
10000820:	3c01      	subs	r4, #1
10000822:	e690      	b.n	10000546 <__aeabi_dmul+0xde>
10000824:	ea45 0e06 	orr.w	lr, r5, r6
10000828:	e68d      	b.n	10000546 <__aeabi_dmul+0xde>
1000082a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1000082e:	ea94 0f0c 	teq	r4, ip
10000832:	bf08      	it	eq
10000834:	ea95 0f0c 	teqeq	r5, ip
10000838:	f43f af3b 	beq.w	100006b2 <__aeabi_dmul+0x24a>
1000083c:	ea94 0f0c 	teq	r4, ip
10000840:	d10a      	bne.n	10000858 <__aeabi_ddiv+0x19c>
10000842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
10000846:	f47f af34 	bne.w	100006b2 <__aeabi_dmul+0x24a>
1000084a:	ea95 0f0c 	teq	r5, ip
1000084e:	f47f af25 	bne.w	1000069c <__aeabi_dmul+0x234>
10000852:	4610      	mov	r0, r2
10000854:	4619      	mov	r1, r3
10000856:	e72c      	b.n	100006b2 <__aeabi_dmul+0x24a>
10000858:	ea95 0f0c 	teq	r5, ip
1000085c:	d106      	bne.n	1000086c <__aeabi_ddiv+0x1b0>
1000085e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
10000862:	f43f aefd 	beq.w	10000660 <__aeabi_dmul+0x1f8>
10000866:	4610      	mov	r0, r2
10000868:	4619      	mov	r1, r3
1000086a:	e722      	b.n	100006b2 <__aeabi_dmul+0x24a>
1000086c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
10000870:	bf18      	it	ne
10000872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
10000876:	f47f aec5 	bne.w	10000604 <__aeabi_dmul+0x19c>
1000087a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1000087e:	f47f af0d 	bne.w	1000069c <__aeabi_dmul+0x234>
10000882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
10000886:	f47f aeeb 	bne.w	10000660 <__aeabi_dmul+0x1f8>
1000088a:	e712      	b.n	100006b2 <__aeabi_dmul+0x24a>

1000088c <__gedf2>:
1000088c:	f04f 3cff 	mov.w	ip, #4294967295
10000890:	e006      	b.n	100008a0 <__cmpdf2+0x4>
10000892:	bf00      	nop

10000894 <__ledf2>:
10000894:	f04f 0c01 	mov.w	ip, #1
10000898:	e002      	b.n	100008a0 <__cmpdf2+0x4>
1000089a:	bf00      	nop

1000089c <__cmpdf2>:
1000089c:	f04f 0c01 	mov.w	ip, #1
100008a0:	f84d cd04 	str.w	ip, [sp, #-4]!
100008a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100008a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100008ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100008b0:	bf18      	it	ne
100008b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
100008b6:	d01b      	beq.n	100008f0 <__cmpdf2+0x54>
100008b8:	b001      	add	sp, #4
100008ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
100008be:	bf0c      	ite	eq
100008c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
100008c4:	ea91 0f03 	teqne	r1, r3
100008c8:	bf02      	ittt	eq
100008ca:	ea90 0f02 	teqeq	r0, r2
100008ce:	2000      	moveq	r0, #0
100008d0:	4770      	bxeq	lr
100008d2:	f110 0f00 	cmn.w	r0, #0
100008d6:	ea91 0f03 	teq	r1, r3
100008da:	bf58      	it	pl
100008dc:	4299      	cmppl	r1, r3
100008de:	bf08      	it	eq
100008e0:	4290      	cmpeq	r0, r2
100008e2:	bf2c      	ite	cs
100008e4:	17d8      	asrcs	r0, r3, #31
100008e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
100008ea:	f040 0001 	orr.w	r0, r0, #1
100008ee:	4770      	bx	lr
100008f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100008f8:	d102      	bne.n	10000900 <__cmpdf2+0x64>
100008fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
100008fe:	d107      	bne.n	10000910 <__cmpdf2+0x74>
10000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
10000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
10000908:	d1d6      	bne.n	100008b8 <__cmpdf2+0x1c>
1000090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1000090e:	d0d3      	beq.n	100008b8 <__cmpdf2+0x1c>
10000910:	f85d 0b04 	ldr.w	r0, [sp], #4
10000914:	4770      	bx	lr
10000916:	bf00      	nop

10000918 <__aeabi_cdrcmple>:
10000918:	4684      	mov	ip, r0
1000091a:	4610      	mov	r0, r2
1000091c:	4662      	mov	r2, ip
1000091e:	468c      	mov	ip, r1
10000920:	4619      	mov	r1, r3
10000922:	4663      	mov	r3, ip
10000924:	e000      	b.n	10000928 <__aeabi_cdcmpeq>
10000926:	bf00      	nop

10000928 <__aeabi_cdcmpeq>:
10000928:	b501      	push	{r0, lr}
1000092a:	f7ff ffb7 	bl	1000089c <__cmpdf2>
1000092e:	2800      	cmp	r0, #0
10000930:	bf48      	it	mi
10000932:	f110 0f00 	cmnmi.w	r0, #0
10000936:	bd01      	pop	{r0, pc}

10000938 <__aeabi_dcmpeq>:
10000938:	f84d ed08 	str.w	lr, [sp, #-8]!
1000093c:	f7ff fff4 	bl	10000928 <__aeabi_cdcmpeq>
10000940:	bf0c      	ite	eq
10000942:	2001      	moveq	r0, #1
10000944:	2000      	movne	r0, #0
10000946:	f85d fb08 	ldr.w	pc, [sp], #8
1000094a:	bf00      	nop

1000094c <__aeabi_dcmplt>:
1000094c:	f84d ed08 	str.w	lr, [sp, #-8]!
10000950:	f7ff ffea 	bl	10000928 <__aeabi_cdcmpeq>
10000954:	bf34      	ite	cc
10000956:	2001      	movcc	r0, #1
10000958:	2000      	movcs	r0, #0
1000095a:	f85d fb08 	ldr.w	pc, [sp], #8
1000095e:	bf00      	nop

10000960 <__aeabi_dcmple>:
10000960:	f84d ed08 	str.w	lr, [sp, #-8]!
10000964:	f7ff ffe0 	bl	10000928 <__aeabi_cdcmpeq>
10000968:	bf94      	ite	ls
1000096a:	2001      	movls	r0, #1
1000096c:	2000      	movhi	r0, #0
1000096e:	f85d fb08 	ldr.w	pc, [sp], #8
10000972:	bf00      	nop

10000974 <__aeabi_dcmpge>:
10000974:	f84d ed08 	str.w	lr, [sp, #-8]!
10000978:	f7ff ffce 	bl	10000918 <__aeabi_cdrcmple>
1000097c:	bf94      	ite	ls
1000097e:	2001      	movls	r0, #1
10000980:	2000      	movhi	r0, #0
10000982:	f85d fb08 	ldr.w	pc, [sp], #8
10000986:	bf00      	nop

10000988 <__aeabi_dcmpgt>:
10000988:	f84d ed08 	str.w	lr, [sp, #-8]!
1000098c:	f7ff ffc4 	bl	10000918 <__aeabi_cdrcmple>
10000990:	bf34      	ite	cc
10000992:	2001      	movcc	r0, #1
10000994:	2000      	movcs	r0, #0
10000996:	f85d fb08 	ldr.w	pc, [sp], #8
1000099a:	bf00      	nop

1000099c <__aeabi_dcmpun>:
1000099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
100009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009a4:	d102      	bne.n	100009ac <__aeabi_dcmpun+0x10>
100009a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
100009aa:	d10a      	bne.n	100009c2 <__aeabi_dcmpun+0x26>
100009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
100009b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
100009b4:	d102      	bne.n	100009bc <__aeabi_dcmpun+0x20>
100009b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
100009ba:	d102      	bne.n	100009c2 <__aeabi_dcmpun+0x26>
100009bc:	f04f 0000 	mov.w	r0, #0
100009c0:	4770      	bx	lr
100009c2:	f04f 0001 	mov.w	r0, #1
100009c6:	4770      	bx	lr

100009c8 <__aeabi_d2iz>:
100009c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
100009cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
100009d0:	d215      	bcs.n	100009fe <__aeabi_d2iz+0x36>
100009d2:	d511      	bpl.n	100009f8 <__aeabi_d2iz+0x30>
100009d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
100009d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
100009dc:	d912      	bls.n	10000a04 <__aeabi_d2iz+0x3c>
100009de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
100009e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
100009e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
100009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
100009ee:	fa23 f002 	lsr.w	r0, r3, r2
100009f2:	bf18      	it	ne
100009f4:	4240      	negne	r0, r0
100009f6:	4770      	bx	lr
100009f8:	f04f 0000 	mov.w	r0, #0
100009fc:	4770      	bx	lr
100009fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
10000a02:	d105      	bne.n	10000a10 <__aeabi_d2iz+0x48>
10000a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
10000a08:	bf08      	it	eq
10000a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
10000a0e:	4770      	bx	lr
10000a10:	f04f 0000 	mov.w	r0, #0
10000a14:	4770      	bx	lr
10000a16:	bf00      	nop

10000a18 <__aeabi_d2uiz>:
10000a18:	004a      	lsls	r2, r1, #1
10000a1a:	d211      	bcs.n	10000a40 <__aeabi_d2uiz+0x28>
10000a1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
10000a20:	d211      	bcs.n	10000a46 <__aeabi_d2uiz+0x2e>
10000a22:	d50d      	bpl.n	10000a40 <__aeabi_d2uiz+0x28>
10000a24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
10000a28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
10000a2c:	d40e      	bmi.n	10000a4c <__aeabi_d2uiz+0x34>
10000a2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000a32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10000a36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
10000a3a:	fa23 f002 	lsr.w	r0, r3, r2
10000a3e:	4770      	bx	lr
10000a40:	f04f 0000 	mov.w	r0, #0
10000a44:	4770      	bx	lr
10000a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
10000a4a:	d102      	bne.n	10000a52 <__aeabi_d2uiz+0x3a>
10000a4c:	f04f 30ff 	mov.w	r0, #4294967295
10000a50:	4770      	bx	lr
10000a52:	f04f 0000 	mov.w	r0, #0
10000a56:	4770      	bx	lr

10000a58 <__aeabi_d2f>:
10000a58:	ea4f 0241 	mov.w	r2, r1, lsl #1
10000a5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
10000a60:	bf24      	itt	cs
10000a62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
10000a66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
10000a6a:	d90d      	bls.n	10000a88 <__aeabi_d2f+0x30>
10000a6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
10000a70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
10000a74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
10000a78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
10000a7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
10000a80:	bf08      	it	eq
10000a82:	f020 0001 	biceq.w	r0, r0, #1
10000a86:	4770      	bx	lr
10000a88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
10000a8c:	d121      	bne.n	10000ad2 <__aeabi_d2f+0x7a>
10000a8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
10000a92:	bfbc      	itt	lt
10000a94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
10000a98:	4770      	bxlt	lr
10000a9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
10000a9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
10000aa2:	f1c2 0218 	rsb	r2, r2, #24
10000aa6:	f1c2 0c20 	rsb	ip, r2, #32
10000aaa:	fa10 f30c 	lsls.w	r3, r0, ip
10000aae:	fa20 f002 	lsr.w	r0, r0, r2
10000ab2:	bf18      	it	ne
10000ab4:	f040 0001 	orrne.w	r0, r0, #1
10000ab8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
10000abc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
10000ac0:	fa03 fc0c 	lsl.w	ip, r3, ip
10000ac4:	ea40 000c 	orr.w	r0, r0, ip
10000ac8:	fa23 f302 	lsr.w	r3, r3, r2
10000acc:	ea4f 0343 	mov.w	r3, r3, lsl #1
10000ad0:	e7cc      	b.n	10000a6c <__aeabi_d2f+0x14>
10000ad2:	ea7f 5362 	mvns.w	r3, r2, asr #21
10000ad6:	d107      	bne.n	10000ae8 <__aeabi_d2f+0x90>
10000ad8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
10000adc:	bf1e      	ittt	ne
10000ade:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
10000ae2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
10000ae6:	4770      	bxne	lr
10000ae8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
10000aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
10000af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
10000af4:	4770      	bx	lr
10000af6:	bf00      	nop

10000af8 <__aeabi_d2lz>:
10000af8:	b538      	push	{r3, r4, r5, lr}
10000afa:	2200      	movs	r2, #0
10000afc:	2300      	movs	r3, #0
10000afe:	4604      	mov	r4, r0
10000b00:	460d      	mov	r5, r1
10000b02:	f7ff ff23 	bl	1000094c <__aeabi_dcmplt>
10000b06:	b928      	cbnz	r0, 10000b14 <__aeabi_d2lz+0x1c>
10000b08:	4620      	mov	r0, r4
10000b0a:	4629      	mov	r1, r5
10000b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10000b10:	f000 b80a 	b.w	10000b28 <__aeabi_d2ulz>
10000b14:	4620      	mov	r0, r4
10000b16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
10000b1a:	f000 f805 	bl	10000b28 <__aeabi_d2ulz>
10000b1e:	4240      	negs	r0, r0
10000b20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
10000b24:	bd38      	pop	{r3, r4, r5, pc}
10000b26:	bf00      	nop

10000b28 <__aeabi_d2ulz>:
10000b28:	b5d0      	push	{r4, r6, r7, lr}
10000b2a:	4b0c      	ldr	r3, [pc, #48]	; (10000b5c <__aeabi_d2ulz+0x34>)
10000b2c:	2200      	movs	r2, #0
10000b2e:	4606      	mov	r6, r0
10000b30:	460f      	mov	r7, r1
10000b32:	f7ff fc99 	bl	10000468 <__aeabi_dmul>
10000b36:	f7ff ff6f 	bl	10000a18 <__aeabi_d2uiz>
10000b3a:	4604      	mov	r4, r0
10000b3c:	f7ff fc1a 	bl	10000374 <__aeabi_ui2d>
10000b40:	4b07      	ldr	r3, [pc, #28]	; (10000b60 <__aeabi_d2ulz+0x38>)
10000b42:	2200      	movs	r2, #0
10000b44:	f7ff fc90 	bl	10000468 <__aeabi_dmul>
10000b48:	4602      	mov	r2, r0
10000b4a:	460b      	mov	r3, r1
10000b4c:	4630      	mov	r0, r6
10000b4e:	4639      	mov	r1, r7
10000b50:	f7ff fad2 	bl	100000f8 <__aeabi_dsub>
10000b54:	f7ff ff60 	bl	10000a18 <__aeabi_d2uiz>
10000b58:	4621      	mov	r1, r4
10000b5a:	bdd0      	pop	{r4, r6, r7, pc}
10000b5c:	3df00000 	.word	0x3df00000
10000b60:	41f00000 	.word	0x41f00000

10000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000b64:	b480      	push	{r7}
10000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
10000b68:	4b0f      	ldr	r3, [pc, #60]	; (10000ba8 <SystemInit+0x44>)
10000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000b6e:	4a0e      	ldr	r2, [pc, #56]	; (10000ba8 <SystemInit+0x44>)
10000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
10000b78:	4b0c      	ldr	r3, [pc, #48]	; (10000bac <SystemInit+0x48>)
10000b7a:	2200      	movs	r2, #0
10000b7c:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
10000b7e:	4b0b      	ldr	r3, [pc, #44]	; (10000bac <SystemInit+0x48>)
10000b80:	2200      	movs	r2, #0
10000b82:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000b84:	4b09      	ldr	r3, [pc, #36]	; (10000bac <SystemInit+0x48>)
10000b86:	2200      	movs	r2, #0
10000b88:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
10000b8a:	4b08      	ldr	r3, [pc, #32]	; (10000bac <SystemInit+0x48>)
10000b8c:	2200      	movs	r2, #0
10000b8e:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
10000b90:	4b06      	ldr	r3, [pc, #24]	; (10000bac <SystemInit+0x48>)
10000b92:	2200      	movs	r2, #0
10000b94:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
10000b96:	4b05      	ldr	r3, [pc, #20]	; (10000bac <SystemInit+0x48>)
10000b98:	2200      	movs	r2, #0
10000b9a:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000b9c:	bf00      	nop
10000b9e:	46bd      	mov	sp, r7
10000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
10000ba4:	4770      	bx	lr
10000ba6:	bf00      	nop
10000ba8:	e000ed00 	.word	0xe000ed00
10000bac:	5000d0c0 	.word	0x5000d0c0

10000bb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
10000bb0:	b580      	push	{r7, lr}
10000bb2:	b086      	sub	sp, #24
10000bb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
10000bb6:	1d3b      	adds	r3, r7, #4
10000bb8:	2200      	movs	r2, #0
10000bba:	601a      	str	r2, [r3, #0]
10000bbc:	605a      	str	r2, [r3, #4]
10000bbe:	609a      	str	r2, [r3, #8]
10000bc0:	60da      	str	r2, [r3, #12]
10000bc2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
10000bc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bc8:	2280      	movs	r2, #128	; 0x80
10000bca:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOG_CLK_ENABLE();
10000bce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bd2:	2240      	movs	r2, #64	; 0x40
10000bd4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOA_CLK_ENABLE();
10000bd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000bdc:	2201      	movs	r2, #1
10000bde:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
10000be2:	2200      	movs	r2, #0
10000be4:	f44f 6180 	mov.w	r1, #1024	; 0x400
10000be8:	4821      	ldr	r0, [pc, #132]	; (10000c70 <MX_GPIO_Init+0xc0>)
10000bea:	f000 ff8d 	bl	10001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
10000bee:	2200      	movs	r2, #0
10000bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
10000bf4:	481f      	ldr	r0, [pc, #124]	; (10000c74 <MX_GPIO_Init+0xc4>)
10000bf6:	f000 ff87 	bl	10001b08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = KEY_USER1_Pin|KEY_USER2_Pin;
10000bfa:	230c      	movs	r3, #12
10000bfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
10000bfe:	4b1e      	ldr	r3, [pc, #120]	; (10000c78 <MX_GPIO_Init+0xc8>)
10000c00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
10000c02:	2300      	movs	r3, #0
10000c04:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
10000c06:	1d3b      	adds	r3, r7, #4
10000c08:	4619      	mov	r1, r3
10000c0a:	481a      	ldr	r0, [pc, #104]	; (10000c74 <MX_GPIO_Init+0xc4>)
10000c0c:	f000 fdba 	bl	10001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
10000c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
10000c14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10000c16:	2301      	movs	r3, #1
10000c18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
10000c1a:	2301      	movs	r3, #1
10000c1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
10000c1e:	2303      	movs	r3, #3
10000c20:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
10000c22:	1d3b      	adds	r3, r7, #4
10000c24:	4619      	mov	r1, r3
10000c26:	4812      	ldr	r0, [pc, #72]	; (10000c70 <MX_GPIO_Init+0xc0>)
10000c28:	f000 fdac 	bl	10001784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
10000c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
10000c30:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
10000c32:	2301      	movs	r3, #1
10000c34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
10000c36:	2301      	movs	r3, #1
10000c38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
10000c3a:	2303      	movs	r3, #3
10000c3c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
10000c3e:	1d3b      	adds	r3, r7, #4
10000c40:	4619      	mov	r1, r3
10000c42:	480c      	ldr	r0, [pc, #48]	; (10000c74 <MX_GPIO_Init+0xc4>)
10000c44:	f000 fd9e 	bl	10001784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
10000c48:	2200      	movs	r2, #0
10000c4a:	2101      	movs	r1, #1
10000c4c:	2008      	movs	r0, #8
10000c4e:	f000 fd62 	bl	10001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
10000c52:	2008      	movs	r0, #8
10000c54:	f000 fd7b 	bl	1000174e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
10000c58:	2200      	movs	r2, #0
10000c5a:	2101      	movs	r1, #1
10000c5c:	2009      	movs	r0, #9
10000c5e:	f000 fd5a 	bl	10001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
10000c62:	2009      	movs	r0, #9
10000c64:	f000 fd73 	bl	1000174e <HAL_NVIC_EnableIRQ>

}
10000c68:	bf00      	nop
10000c6a:	3718      	adds	r7, #24
10000c6c:	46bd      	mov	sp, r7
10000c6e:	bd80      	pop	{r7, pc}
10000c70:	50002000 	.word	0x50002000
10000c74:	50008000 	.word	0x50008000
10000c78:	10110000 	.word	0x10110000
10000c7c:	00000000 	.word	0x00000000

10000c80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000c80:	b580      	push	{r7, lr}
10000c82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
10000c84:	f000 fbd8 	bl	10001438 <HAL_Init>

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  if(IS_ENGINEERING_BOOT_MODE())
10000c88:	4b25      	ldr	r3, [pc, #148]	; (10000d20 <main+0xa0>)
10000c8a:	681b      	ldr	r3, [r3, #0]
10000c8c:	f003 0307 	and.w	r3, r3, #7
10000c90:	2b04      	cmp	r3, #4
10000c92:	d101      	bne.n	10000c98 <main+0x18>
  {
    /* Configure the system clock */
    SystemClock_Config();
10000c94:	f000 f862 	bl	10000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
10000c98:	f7ff ff8a 	bl	10000bb0 <MX_GPIO_Init>
  MX_UART4_Init();
10000c9c:	f000 fa76 	bl	1000118c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  DemoLedInit(); // 膷聡艦暮沤職盲拧聣暮藕聲膷聞職暮聢聺暮搂聥暮聦聳
10000ca0:	f000 fb8e 	bl	100013c0 <DemoLedInit>
  sys_freq = HAL_RCC_GetSystemCoreClockFreq(); // 膷掳聝莽聰篓暮艧聯暮聡藵膰聲掳膷聨藝暮聫聳莽艂钮莽钮聼膰聴艣茅聮聼茅藰聭膹偶??
10000ca4:	f002 fb62 	bl	1000336c <HAL_RCC_GetSystemCoreClockFreq>
10000ca8:	4603      	mov	r3, r0
10000caa:	4a1e      	ldr	r2, [pc, #120]	; (10000d24 <main+0xa4>)
10000cac:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LedBlinking(); // LED 茅聴艦莽聝聛
10000cae:	f000 fb9b 	bl	100013e8 <LedBlinking>
	  Key1Polling();
10000cb2:	f000 fb49 	bl	10001348 <Key1Polling>

	  printf("=========This is printf test=========\n\r");
10000cb6:	481c      	ldr	r0, [pc, #112]	; (10000d28 <main+0xa8>)
10000cb8:	f007 fa16 	bl	100080e8 <iprintf>
	  printf("test char = %c,%c\n\r", 'H', 'c');
10000cbc:	2263      	movs	r2, #99	; 0x63
10000cbe:	2148      	movs	r1, #72	; 0x48
10000cc0:	481a      	ldr	r0, [pc, #104]	; (10000d2c <main+0xac>)
10000cc2:	f007 fa11 	bl	100080e8 <iprintf>
	  printf("test string1 = %s\n\r", "www.100ask.net");//中文打印需要将文件编码改为 UTF-8,但会导致注释乱码
10000cc6:	491a      	ldr	r1, [pc, #104]	; (10000d30 <main+0xb0>)
10000cc8:	481a      	ldr	r0, [pc, #104]	; (10000d34 <main+0xb4>)
10000cca:	f007 fa0d 	bl	100080e8 <iprintf>
	  //printf("test string2 = %s\n\r", "深圳百问网科技有限公司");
	  printf("test decimal1 number = %d\n\r", 123456);
10000cce:	491a      	ldr	r1, [pc, #104]	; (10000d38 <main+0xb8>)
10000cd0:	481a      	ldr	r0, [pc, #104]	; (10000d3c <main+0xbc>)
10000cd2:	f007 fa09 	bl	100080e8 <iprintf>
	  printf("test decimal2 number = %d\n\r", -123456);
10000cd6:	491a      	ldr	r1, [pc, #104]	; (10000d40 <main+0xc0>)
10000cd8:	481a      	ldr	r0, [pc, #104]	; (10000d44 <main+0xc4>)
10000cda:	f007 fa05 	bl	100080e8 <iprintf>
	  printf("test hex1 number = 0x%x\n\r", 0x123456);
10000cde:	491a      	ldr	r1, [pc, #104]	; (10000d48 <main+0xc8>)
10000ce0:	481a      	ldr	r0, [pc, #104]	; (10000d4c <main+0xcc>)
10000ce2:	f007 fa01 	bl	100080e8 <iprintf>
	  printf("test hex2 number = 0x%08x\n\r", 0x123456);
10000ce6:	4918      	ldr	r1, [pc, #96]	; (10000d48 <main+0xc8>)
10000ce8:	4819      	ldr	r0, [pc, #100]	; (10000d50 <main+0xd0>)
10000cea:	f007 f9fd 	bl	100080e8 <iprintf>
	  printf("test float = %.5f\n\r", 3.1415);
10000cee:	a308      	add	r3, pc, #32	; (adr r3, 10000d10 <main+0x90>)
10000cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
10000cf4:	4817      	ldr	r0, [pc, #92]	; (10000d54 <main+0xd4>)
10000cf6:	f007 f9f7 	bl	100080e8 <iprintf>
	  printf("test double = %.10lf\n\r", 3.141592653);
10000cfa:	a307      	add	r3, pc, #28	; (adr r3, 10000d18 <main+0x98>)
10000cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
10000d00:	4815      	ldr	r0, [pc, #84]	; (10000d58 <main+0xd8>)
10000d02:	f007 f9f1 	bl	100080e8 <iprintf>

	  HAL_Delay(2000);
10000d06:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
10000d0a:	f000 fc05 	bl	10001518 <HAL_Delay>
  {
10000d0e:	e7ce      	b.n	10000cae <main+0x2e>
10000d10:	c083126f 	.word	0xc083126f
10000d14:	400921ca 	.word	0x400921ca
10000d18:	542fe938 	.word	0x542fe938
10000d1c:	400921fb 	.word	0x400921fb
10000d20:	50020000 	.word	0x50020000
10000d24:	100201f0 	.word	0x100201f0
10000d28:	1000bab0 	.word	0x1000bab0
10000d2c:	1000bad8 	.word	0x1000bad8
10000d30:	1000baec 	.word	0x1000baec
10000d34:	1000bafc 	.word	0x1000bafc
10000d38:	0001e240 	.word	0x0001e240
10000d3c:	1000bb10 	.word	0x1000bb10
10000d40:	fffe1dc0 	.word	0xfffe1dc0
10000d44:	1000bb2c 	.word	0x1000bb2c
10000d48:	00123456 	.word	0x00123456
10000d4c:	1000bb48 	.word	0x1000bb48
10000d50:	1000bb64 	.word	0x1000bb64
10000d54:	1000bb80 	.word	0x1000bb80
10000d58:	1000bb94 	.word	0x1000bb94

10000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
10000d5c:	b580      	push	{r7, lr}
10000d5e:	b0d2      	sub	sp, #328	; 0x148
10000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
10000d62:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d6a:	4618      	mov	r0, r3
10000d6c:	f44f 738a 	mov.w	r3, #276	; 0x114
10000d70:	461a      	mov	r2, r3
10000d72:	2100      	movs	r1, #0
10000d74:	f007 fa2d 	bl	100081d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
10000d78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d7c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000d80:	4618      	mov	r0, r3
10000d82:	2330      	movs	r3, #48	; 0x30
10000d84:	461a      	mov	r2, r3
10000d86:	2100      	movs	r1, #0
10000d88:	f007 fa23 	bl	100081d2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
10000d8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d90:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000d94:	2203      	movs	r2, #3
10000d96:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
10000d98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000d9c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000da0:	f44f 7280 	mov.w	r2, #256	; 0x100
10000da4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
10000da6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000daa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dae:	2201      	movs	r2, #1
10000db0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDivValue = RCC_HSI_DIV1;
10000db2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000db6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dba:	2200      	movs	r2, #0
10000dbc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
10000dbe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dc2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dc6:	2200      	movs	r2, #0
10000dc8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
10000dca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dd2:	2200      	movs	r2, #0
10000dd4:	661a      	str	r2, [r3, #96]	; 0x60
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_ON;
10000dd6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000dda:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dde:	2202      	movs	r2, #2
10000de0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  RCC_OscInitStruct.PLL3.PLLSource = RCC_PLL3SOURCE_HSE;
10000de4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000de8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dec:	2201      	movs	r2, #1
10000dee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  RCC_OscInitStruct.PLL3.PLLM = 2;
10000df2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000df6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000dfa:	2202      	movs	r2, #2
10000dfc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  RCC_OscInitStruct.PLL3.PLLN = 52;
10000e00:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e04:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e08:	2234      	movs	r2, #52	; 0x34
10000e0a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  RCC_OscInitStruct.PLL3.PLLP = 3;
10000e0e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e12:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e16:	2203      	movs	r2, #3
10000e18:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  RCC_OscInitStruct.PLL3.PLLQ = 2;
10000e1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e20:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e24:	2202      	movs	r2, #2
10000e26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  RCC_OscInitStruct.PLL3.PLLR = 2;
10000e2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e32:	2202      	movs	r2, #2
10000e34:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  RCC_OscInitStruct.PLL3.PLLRGE = RCC_PLL3IFRANGE_1;
10000e38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
10000e44:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  RCC_OscInitStruct.PLL3.PLLFRACV = 2048;
10000e48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e4c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000e54:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  RCC_OscInitStruct.PLL3.PLLMODE = RCC_PLL_FRACTIONAL;
10000e58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e5c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e60:	2201      	movs	r2, #1
10000e62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
10000e66:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e6a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
10000e6e:	2200      	movs	r2, #0
10000e70:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
10000e74:	f107 0334 	add.w	r3, r7, #52	; 0x34
10000e78:	4618      	mov	r0, r3
10000e7a:	f000 fe9b 	bl	10001bb4 <HAL_RCC_OscConfig>
10000e7e:	4603      	mov	r3, r0
10000e80:	2b00      	cmp	r3, #0
10000e82:	d001      	beq.n	10000e88 <SystemClock_Config+0x12c>
  {
    Error_Handler();
10000e84:	f000 f84a 	bl	10000f1c <Error_Handler>
  }

  /** RCC Clock Config
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_ACLK
10000e88:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e8c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e90:	22fe      	movs	r2, #254	; 0xfe
10000e92:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3|RCC_CLOCKTYPE_PCLK4
                              |RCC_CLOCKTYPE_PCLK5;
  RCC_ClkInitStruct.AXISSInit.AXI_Clock = RCC_AXISSOURCE_HSI;
10000e94:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000e98:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000e9c:	2200      	movs	r2, #0
10000e9e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.AXISSInit.AXI_Div = RCC_AXI_DIV1;
10000ea0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ea4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000ea8:	2200      	movs	r2, #0
10000eaa:	611a      	str	r2, [r3, #16]
  RCC_ClkInitStruct.MCUInit.MCU_Clock = RCC_MCUSSOURCE_PLL3;
10000eac:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000eb0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000eb4:	2203      	movs	r2, #3
10000eb6:	615a      	str	r2, [r3, #20]
  RCC_ClkInitStruct.MCUInit.MCU_Div = RCC_MCU_DIV1;
10000eb8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ebc:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000ec0:	2200      	movs	r2, #0
10000ec2:	619a      	str	r2, [r3, #24]
  RCC_ClkInitStruct.APB4_Div = RCC_APB4_DIV1;
10000ec4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ec8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000ecc:	2200      	movs	r2, #0
10000ece:	61da      	str	r2, [r3, #28]
  RCC_ClkInitStruct.APB5_Div = RCC_APB5_DIV1;
10000ed0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ed4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000ed8:	2200      	movs	r2, #0
10000eda:	621a      	str	r2, [r3, #32]
  RCC_ClkInitStruct.APB1_Div = RCC_APB1_DIV2;
10000edc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ee0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000ee4:	2201      	movs	r2, #1
10000ee6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_ClkInitStruct.APB2_Div = RCC_APB2_DIV2;
10000ee8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000eec:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000ef0:	2201      	movs	r2, #1
10000ef2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_ClkInitStruct.APB3_Div = RCC_APB3_DIV2;
10000ef4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
10000ef8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
10000efc:	2201      	movs	r2, #1
10000efe:	62da      	str	r2, [r3, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
10000f00:	1d3b      	adds	r3, r7, #4
10000f02:	4618      	mov	r0, r3
10000f04:	f001 fbf4 	bl	100026f0 <HAL_RCC_ClockConfig>
10000f08:	4603      	mov	r3, r0
10000f0a:	2b00      	cmp	r3, #0
10000f0c:	d001      	beq.n	10000f12 <SystemClock_Config+0x1b6>
  {
    Error_Handler();
10000f0e:	f000 f805 	bl	10000f1c <Error_Handler>
  }
}
10000f12:	bf00      	nop
10000f14:	f507 77a4 	add.w	r7, r7, #328	; 0x148
10000f18:	46bd      	mov	sp, r7
10000f1a:	bd80      	pop	{r7, pc}

10000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
10000f1c:	b480      	push	{r7}
10000f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
10000f20:	b672      	cpsid	i
}
10000f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
10000f24:	e7fe      	b.n	10000f24 <Error_Handler+0x8>

10000f26 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
10000f26:	b580      	push	{r7, lr}
10000f28:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
10000f2a:	2200      	movs	r2, #0
10000f2c:	2101      	movs	r1, #1
10000f2e:	f06f 000b 	mvn.w	r0, #11
10000f32:	f000 fbf0 	bl	10001716 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
10000f36:	2200      	movs	r2, #0
10000f38:	2101      	movs	r1, #1
10000f3a:	f06f 000a 	mvn.w	r0, #10
10000f3e:	f000 fbea 	bl	10001716 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
10000f42:	2200      	movs	r2, #0
10000f44:	2101      	movs	r1, #1
10000f46:	f06f 0009 	mvn.w	r0, #9
10000f4a:	f000 fbe4 	bl	10001716 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
10000f4e:	2200      	movs	r2, #0
10000f50:	2101      	movs	r1, #1
10000f52:	f06f 0004 	mvn.w	r0, #4
10000f56:	f000 fbde 	bl	10001716 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
10000f5a:	2200      	movs	r2, #0
10000f5c:	2101      	movs	r1, #1
10000f5e:	f06f 0003 	mvn.w	r0, #3
10000f62:	f000 fbd8 	bl	10001716 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
10000f66:	2200      	movs	r2, #0
10000f68:	2101      	movs	r1, #1
10000f6a:	f06f 0001 	mvn.w	r0, #1
10000f6e:	f000 fbd2 	bl	10001716 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_WAKEUP_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_WAKEUP_IRQn, 0, 0);
10000f72:	2200      	movs	r2, #0
10000f74:	2100      	movs	r1, #0
10000f76:	2091      	movs	r0, #145	; 0x91
10000f78:	f000 fbcd 	bl	10001716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_WAKEUP_IRQn);
10000f7c:	2091      	movs	r0, #145	; 0x91
10000f7e:	f000 fbe6 	bl	1000174e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10000f82:	bf00      	nop
10000f84:	bd80      	pop	{r7, pc}

10000f86 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10000f86:	b480      	push	{r7}
10000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
10000f8a:	e7fe      	b.n	10000f8a <NMI_Handler+0x4>

10000f8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000f8c:	b480      	push	{r7}
10000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10000f90:	e7fe      	b.n	10000f90 <HardFault_Handler+0x4>

10000f92 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
10000f92:	b480      	push	{r7}
10000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
10000f96:	e7fe      	b.n	10000f96 <MemManage_Handler+0x4>

10000f98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
10000f98:	b480      	push	{r7}
10000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10000f9c:	e7fe      	b.n	10000f9c <BusFault_Handler+0x4>

10000f9e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10000f9e:	b480      	push	{r7}
10000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10000fa2:	e7fe      	b.n	10000fa2 <UsageFault_Handler+0x4>

10000fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10000fa4:	b480      	push	{r7}
10000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
10000fa8:	bf00      	nop
10000faa:	46bd      	mov	sp, r7
10000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fb0:	4770      	bx	lr

10000fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000fb2:	b480      	push	{r7}
10000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
10000fb6:	bf00      	nop
10000fb8:	46bd      	mov	sp, r7
10000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fbe:	4770      	bx	lr

10000fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10000fc0:	b480      	push	{r7}
10000fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000fc4:	bf00      	nop
10000fc6:	46bd      	mov	sp, r7
10000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
10000fcc:	4770      	bx	lr

10000fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10000fce:	b580      	push	{r7, lr}
10000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000fd2:	f000 fa81 	bl	100014d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
10000fd6:	bf00      	nop
10000fd8:	bd80      	pop	{r7, pc}

10000fda <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
10000fda:	b580      	push	{r7, lr}
10000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_USER2_Pin);
10000fde:	2004      	movs	r0, #4
10000fe0:	f000 fdac 	bl	10001b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
10000fe4:	bf00      	nop
10000fe6:	bd80      	pop	{r7, pc}

10000fe8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
10000fe8:	b580      	push	{r7, lr}
10000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_USER1_Pin);
10000fec:	2008      	movs	r0, #8
10000fee:	f000 fda5 	bl	10001b3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
10000ff2:	bf00      	nop
10000ff4:	bd80      	pop	{r7, pc}

10000ff6 <RCC_WAKEUP_IRQHandler>:

/**
  * @brief This function handles RCC wake-up interrupt.
  */
void RCC_WAKEUP_IRQHandler(void)
{
10000ff6:	b580      	push	{r7, lr}
10000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 0 */

  /* USER CODE END RCC_WAKEUP_IRQn 0 */
  HAL_RCC_WAKEUP_IRQHandler();
10000ffa:	f002 fa37 	bl	1000346c <HAL_RCC_WAKEUP_IRQHandler>
  /* USER CODE BEGIN RCC_WAKEUP_IRQn 1 */

  /* USER CODE END RCC_WAKEUP_IRQn 1 */
}
10000ffe:	bf00      	nop
10001000:	bd80      	pop	{r7, pc}

10001002 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
10001002:	b480      	push	{r7}
10001004:	af00      	add	r7, sp, #0
  return 1;
10001006:	2301      	movs	r3, #1
}
10001008:	4618      	mov	r0, r3
1000100a:	46bd      	mov	sp, r7
1000100c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001010:	4770      	bx	lr

10001012 <_kill>:

int _kill(int pid, int sig)
{
10001012:	b580      	push	{r7, lr}
10001014:	b082      	sub	sp, #8
10001016:	af00      	add	r7, sp, #0
10001018:	6078      	str	r0, [r7, #4]
1000101a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
1000101c:	f007 f92c 	bl	10008278 <__errno>
10001020:	4603      	mov	r3, r0
10001022:	2216      	movs	r2, #22
10001024:	601a      	str	r2, [r3, #0]
  return -1;
10001026:	f04f 33ff 	mov.w	r3, #4294967295
}
1000102a:	4618      	mov	r0, r3
1000102c:	3708      	adds	r7, #8
1000102e:	46bd      	mov	sp, r7
10001030:	bd80      	pop	{r7, pc}

10001032 <_exit>:

void _exit (int status)
{
10001032:	b580      	push	{r7, lr}
10001034:	b082      	sub	sp, #8
10001036:	af00      	add	r7, sp, #0
10001038:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
1000103a:	f04f 31ff 	mov.w	r1, #4294967295
1000103e:	6878      	ldr	r0, [r7, #4]
10001040:	f7ff ffe7 	bl	10001012 <_kill>
  while (1) {}    /* Make sure we hang here */
10001044:	e7fe      	b.n	10001044 <_exit+0x12>

10001046 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
10001046:	b580      	push	{r7, lr}
10001048:	b086      	sub	sp, #24
1000104a:	af00      	add	r7, sp, #0
1000104c:	60f8      	str	r0, [r7, #12]
1000104e:	60b9      	str	r1, [r7, #8]
10001050:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
10001052:	2300      	movs	r3, #0
10001054:	617b      	str	r3, [r7, #20]
10001056:	e00a      	b.n	1000106e <_read+0x28>
  {
    *ptr++ = __io_getchar();
10001058:	f3af 8000 	nop.w
1000105c:	4601      	mov	r1, r0
1000105e:	68bb      	ldr	r3, [r7, #8]
10001060:	1c5a      	adds	r2, r3, #1
10001062:	60ba      	str	r2, [r7, #8]
10001064:	b2ca      	uxtb	r2, r1
10001066:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
10001068:	697b      	ldr	r3, [r7, #20]
1000106a:	3301      	adds	r3, #1
1000106c:	617b      	str	r3, [r7, #20]
1000106e:	697a      	ldr	r2, [r7, #20]
10001070:	687b      	ldr	r3, [r7, #4]
10001072:	429a      	cmp	r2, r3
10001074:	dbf0      	blt.n	10001058 <_read+0x12>
  }

  return len;
10001076:	687b      	ldr	r3, [r7, #4]
}
10001078:	4618      	mov	r0, r3
1000107a:	3718      	adds	r7, #24
1000107c:	46bd      	mov	sp, r7
1000107e:	bd80      	pop	{r7, pc}

10001080 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
10001080:	b580      	push	{r7, lr}
10001082:	b086      	sub	sp, #24
10001084:	af00      	add	r7, sp, #0
10001086:	60f8      	str	r0, [r7, #12]
10001088:	60b9      	str	r1, [r7, #8]
1000108a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
1000108c:	2300      	movs	r3, #0
1000108e:	617b      	str	r3, [r7, #20]
10001090:	e009      	b.n	100010a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
10001092:	68bb      	ldr	r3, [r7, #8]
10001094:	1c5a      	adds	r2, r3, #1
10001096:	60ba      	str	r2, [r7, #8]
10001098:	781b      	ldrb	r3, [r3, #0]
1000109a:	4618      	mov	r0, r3
1000109c:	f000 f940 	bl	10001320 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
100010a0:	697b      	ldr	r3, [r7, #20]
100010a2:	3301      	adds	r3, #1
100010a4:	617b      	str	r3, [r7, #20]
100010a6:	697a      	ldr	r2, [r7, #20]
100010a8:	687b      	ldr	r3, [r7, #4]
100010aa:	429a      	cmp	r2, r3
100010ac:	dbf1      	blt.n	10001092 <_write+0x12>
  }
  return len;
100010ae:	687b      	ldr	r3, [r7, #4]
}
100010b0:	4618      	mov	r0, r3
100010b2:	3718      	adds	r7, #24
100010b4:	46bd      	mov	sp, r7
100010b6:	bd80      	pop	{r7, pc}

100010b8 <_close>:

int _close(int file)
{
100010b8:	b480      	push	{r7}
100010ba:	b083      	sub	sp, #12
100010bc:	af00      	add	r7, sp, #0
100010be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
100010c0:	f04f 33ff 	mov.w	r3, #4294967295
}
100010c4:	4618      	mov	r0, r3
100010c6:	370c      	adds	r7, #12
100010c8:	46bd      	mov	sp, r7
100010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
100010ce:	4770      	bx	lr

100010d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
100010d0:	b480      	push	{r7}
100010d2:	b083      	sub	sp, #12
100010d4:	af00      	add	r7, sp, #0
100010d6:	6078      	str	r0, [r7, #4]
100010d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
100010da:	683b      	ldr	r3, [r7, #0]
100010dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
100010e0:	605a      	str	r2, [r3, #4]
  return 0;
100010e2:	2300      	movs	r3, #0
}
100010e4:	4618      	mov	r0, r3
100010e6:	370c      	adds	r7, #12
100010e8:	46bd      	mov	sp, r7
100010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
100010ee:	4770      	bx	lr

100010f0 <_isatty>:

int _isatty(int file)
{
100010f0:	b480      	push	{r7}
100010f2:	b083      	sub	sp, #12
100010f4:	af00      	add	r7, sp, #0
100010f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
100010f8:	2301      	movs	r3, #1
}
100010fa:	4618      	mov	r0, r3
100010fc:	370c      	adds	r7, #12
100010fe:	46bd      	mov	sp, r7
10001100:	f85d 7b04 	ldr.w	r7, [sp], #4
10001104:	4770      	bx	lr

10001106 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
10001106:	b480      	push	{r7}
10001108:	b085      	sub	sp, #20
1000110a:	af00      	add	r7, sp, #0
1000110c:	60f8      	str	r0, [r7, #12]
1000110e:	60b9      	str	r1, [r7, #8]
10001110:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
10001112:	2300      	movs	r3, #0
}
10001114:	4618      	mov	r0, r3
10001116:	3714      	adds	r7, #20
10001118:	46bd      	mov	sp, r7
1000111a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000111e:	4770      	bx	lr

10001120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
10001120:	b580      	push	{r7, lr}
10001122:	b086      	sub	sp, #24
10001124:	af00      	add	r7, sp, #0
10001126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
10001128:	4a14      	ldr	r2, [pc, #80]	; (1000117c <_sbrk+0x5c>)
1000112a:	4b15      	ldr	r3, [pc, #84]	; (10001180 <_sbrk+0x60>)
1000112c:	1ad3      	subs	r3, r2, r3
1000112e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
10001130:	697b      	ldr	r3, [r7, #20]
10001132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
10001134:	4b13      	ldr	r3, [pc, #76]	; (10001184 <_sbrk+0x64>)
10001136:	681b      	ldr	r3, [r3, #0]
10001138:	2b00      	cmp	r3, #0
1000113a:	d102      	bne.n	10001142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
1000113c:	4b11      	ldr	r3, [pc, #68]	; (10001184 <_sbrk+0x64>)
1000113e:	4a12      	ldr	r2, [pc, #72]	; (10001188 <_sbrk+0x68>)
10001140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
10001142:	4b10      	ldr	r3, [pc, #64]	; (10001184 <_sbrk+0x64>)
10001144:	681a      	ldr	r2, [r3, #0]
10001146:	687b      	ldr	r3, [r7, #4]
10001148:	4413      	add	r3, r2
1000114a:	693a      	ldr	r2, [r7, #16]
1000114c:	429a      	cmp	r2, r3
1000114e:	d207      	bcs.n	10001160 <_sbrk+0x40>
  {
    errno = ENOMEM;
10001150:	f007 f892 	bl	10008278 <__errno>
10001154:	4603      	mov	r3, r0
10001156:	220c      	movs	r2, #12
10001158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
1000115a:	f04f 33ff 	mov.w	r3, #4294967295
1000115e:	e009      	b.n	10001174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
10001160:	4b08      	ldr	r3, [pc, #32]	; (10001184 <_sbrk+0x64>)
10001162:	681b      	ldr	r3, [r3, #0]
10001164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
10001166:	4b07      	ldr	r3, [pc, #28]	; (10001184 <_sbrk+0x64>)
10001168:	681a      	ldr	r2, [r3, #0]
1000116a:	687b      	ldr	r3, [r7, #4]
1000116c:	4413      	add	r3, r2
1000116e:	4a05      	ldr	r2, [pc, #20]	; (10001184 <_sbrk+0x64>)
10001170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
10001172:	68fb      	ldr	r3, [r7, #12]
}
10001174:	4618      	mov	r0, r3
10001176:	3718      	adds	r7, #24
10001178:	46bd      	mov	sp, r7
1000117a:	bd80      	pop	{r7, pc}
1000117c:	10040000 	.word	0x10040000
10001180:	00000400 	.word	0x00000400
10001184:	100201f4 	.word	0x100201f4
10001188:	100203e0 	.word	0x100203e0

1000118c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
1000118c:	b580      	push	{r7, lr}
1000118e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
10001190:	4b22      	ldr	r3, [pc, #136]	; (1000121c <MX_UART4_Init+0x90>)
10001192:	4a23      	ldr	r2, [pc, #140]	; (10001220 <MX_UART4_Init+0x94>)
10001194:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
10001196:	4b21      	ldr	r3, [pc, #132]	; (1000121c <MX_UART4_Init+0x90>)
10001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1000119c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
1000119e:	4b1f      	ldr	r3, [pc, #124]	; (1000121c <MX_UART4_Init+0x90>)
100011a0:	2200      	movs	r2, #0
100011a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
100011a4:	4b1d      	ldr	r3, [pc, #116]	; (1000121c <MX_UART4_Init+0x90>)
100011a6:	2200      	movs	r2, #0
100011a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
100011aa:	4b1c      	ldr	r3, [pc, #112]	; (1000121c <MX_UART4_Init+0x90>)
100011ac:	2200      	movs	r2, #0
100011ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
100011b0:	4b1a      	ldr	r3, [pc, #104]	; (1000121c <MX_UART4_Init+0x90>)
100011b2:	220c      	movs	r2, #12
100011b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
100011b6:	4b19      	ldr	r3, [pc, #100]	; (1000121c <MX_UART4_Init+0x90>)
100011b8:	2200      	movs	r2, #0
100011ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
100011bc:	4b17      	ldr	r3, [pc, #92]	; (1000121c <MX_UART4_Init+0x90>)
100011be:	2200      	movs	r2, #0
100011c0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
100011c2:	4b16      	ldr	r3, [pc, #88]	; (1000121c <MX_UART4_Init+0x90>)
100011c4:	2200      	movs	r2, #0
100011c6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
100011c8:	4b14      	ldr	r3, [pc, #80]	; (1000121c <MX_UART4_Init+0x90>)
100011ca:	2200      	movs	r2, #0
100011cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
100011ce:	4b13      	ldr	r3, [pc, #76]	; (1000121c <MX_UART4_Init+0x90>)
100011d0:	2200      	movs	r2, #0
100011d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
100011d4:	4811      	ldr	r0, [pc, #68]	; (1000121c <MX_UART4_Init+0x90>)
100011d6:	f004 fc3d 	bl	10005a54 <HAL_UART_Init>
100011da:	4603      	mov	r3, r0
100011dc:	2b00      	cmp	r3, #0
100011de:	d001      	beq.n	100011e4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
100011e0:	f7ff fe9c 	bl	10000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
100011e4:	2100      	movs	r1, #0
100011e6:	480d      	ldr	r0, [pc, #52]	; (1000121c <MX_UART4_Init+0x90>)
100011e8:	f005 ff65 	bl	100070b6 <HAL_UARTEx_SetTxFifoThreshold>
100011ec:	4603      	mov	r3, r0
100011ee:	2b00      	cmp	r3, #0
100011f0:	d001      	beq.n	100011f6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
100011f2:	f7ff fe93 	bl	10000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
100011f6:	2100      	movs	r1, #0
100011f8:	4808      	ldr	r0, [pc, #32]	; (1000121c <MX_UART4_Init+0x90>)
100011fa:	f005 ff9a 	bl	10007132 <HAL_UARTEx_SetRxFifoThreshold>
100011fe:	4603      	mov	r3, r0
10001200:	2b00      	cmp	r3, #0
10001202:	d001      	beq.n	10001208 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
10001204:	f7ff fe8a 	bl	10000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
10001208:	4804      	ldr	r0, [pc, #16]	; (1000121c <MX_UART4_Init+0x90>)
1000120a:	f005 ff1b 	bl	10007044 <HAL_UARTEx_DisableFifoMode>
1000120e:	4603      	mov	r3, r0
10001210:	2b00      	cmp	r3, #0
10001212:	d001      	beq.n	10001218 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
10001214:	f7ff fe82 	bl	10000f1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
10001218:	bf00      	nop
1000121a:	bd80      	pop	{r7, pc}
1000121c:	100201f8 	.word	0x100201f8
10001220:	40010000 	.word	0x40010000

10001224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
10001224:	b580      	push	{r7, lr}
10001226:	b0de      	sub	sp, #376	; 0x178
10001228:	af00      	add	r7, sp, #0
1000122a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000122e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10001232:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
10001234:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001238:	2200      	movs	r2, #0
1000123a:	601a      	str	r2, [r3, #0]
1000123c:	605a      	str	r2, [r3, #4]
1000123e:	609a      	str	r2, [r3, #8]
10001240:	60da      	str	r2, [r3, #12]
10001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
10001244:	f507 73bc 	add.w	r3, r7, #376	; 0x178
10001248:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
1000124c:	4618      	mov	r0, r3
1000124e:	f44f 73ac 	mov.w	r3, #344	; 0x158
10001252:	461a      	mov	r2, r3
10001254:	2100      	movs	r1, #0
10001256:	f006 ffbc 	bl	100081d2 <memset>
  if(uartHandle->Instance==UART4)
1000125a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000125e:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
10001262:	681b      	ldr	r3, [r3, #0]
10001264:	681b      	ldr	r3, [r3, #0]
10001266:	4a2b      	ldr	r2, [pc, #172]	; (10001314 <HAL_UART_MspInit+0xf0>)
10001268:	4293      	cmp	r3, r2
1000126a:	d14d      	bne.n	10001308 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  if(IS_ENGINEERING_BOOT_MODE())
1000126c:	4b2a      	ldr	r3, [pc, #168]	; (10001318 <HAL_UART_MspInit+0xf4>)
1000126e:	681b      	ldr	r3, [r3, #0]
10001270:	f003 0307 	and.w	r3, r3, #7
10001274:	2b04      	cmp	r3, #4
10001276:	d113      	bne.n	100012a0 <HAL_UART_MspInit+0x7c>
  {

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART24;
10001278:	f507 73bc 	add.w	r3, r7, #376	; 0x178
1000127c:	f5a3 71b8 	sub.w	r1, r3, #368	; 0x170
10001280:	f04f 0202 	mov.w	r2, #2
10001284:	f04f 0300 	mov.w	r3, #0
10001288:	e9c1 2300 	strd	r2, r3, [r1]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
1000128c:	f107 0308 	add.w	r3, r7, #8
10001290:	4618      	mov	r0, r3
10001292:	f002 fd4b 	bl	10003d2c <HAL_RCCEx_PeriphCLKConfig>
10001296:	4603      	mov	r3, r0
10001298:	2b00      	cmp	r3, #0
1000129a:	d001      	beq.n	100012a0 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
1000129c:	f7ff fe3e 	bl	10000f1c <Error_Handler>
    }

  }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
100012a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
100012a8:	f8c3 2a80 	str.w	r2, [r3, #2688]	; 0xa80

    __HAL_RCC_GPIOA_CLK_ENABLE();
100012ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100012b0:	2201      	movs	r2, #1
100012b2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
100012b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
100012ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF;
100012be:	2302      	movs	r3, #2
100012c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100012c4:	2300      	movs	r3, #0
100012c6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
100012ca:	2306      	movs	r3, #6
100012cc:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100012d0:	f507 73b2 	add.w	r3, r7, #356	; 0x164
100012d4:	4619      	mov	r1, r3
100012d6:	4811      	ldr	r0, [pc, #68]	; (1000131c <HAL_UART_MspInit+0xf8>)
100012d8:	f000 fa54 	bl	10001784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
100012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
100012e0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
100012e4:	2302      	movs	r3, #2
100012e6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    GPIO_InitStruct.Pull = GPIO_NOPULL;
100012ea:	2300      	movs	r3, #0
100012ec:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
100012f0:	2300      	movs	r3, #0
100012f2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
100012f6:	2306      	movs	r3, #6
100012f8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
100012fc:	f507 73b2 	add.w	r3, r7, #356	; 0x164
10001300:	4619      	mov	r1, r3
10001302:	4806      	ldr	r0, [pc, #24]	; (1000131c <HAL_UART_MspInit+0xf8>)
10001304:	f000 fa3e 	bl	10001784 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
10001308:	bf00      	nop
1000130a:	f507 77bc 	add.w	r7, r7, #376	; 0x178
1000130e:	46bd      	mov	sp, r7
10001310:	bd80      	pop	{r7, pc}
10001312:	bf00      	nop
10001314:	40010000 	.word	0x40010000
10001318:	50020000 	.word	0x50020000
1000131c:	50002000 	.word	0x50002000

10001320 <__io_putchar>:
/* USER CODE BEGIN 1 */
// 加上此段才可以使用 printf()函数
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
PUTCHAR_PROTOTYPE
{
10001320:	b580      	push	{r7, lr}
10001322:	b082      	sub	sp, #8
10001324:	af00      	add	r7, sp, #0
10001326:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart4, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
10001328:	1d39      	adds	r1, r7, #4
1000132a:	f04f 33ff 	mov.w	r3, #4294967295
1000132e:	2201      	movs	r2, #1
10001330:	4803      	ldr	r0, [pc, #12]	; (10001340 <__io_putchar+0x20>)
10001332:	f004 fbdf 	bl	10005af4 <HAL_UART_Transmit>
	return ch;
10001336:	687b      	ldr	r3, [r7, #4]
}
10001338:	4618      	mov	r0, r3
1000133a:	3708      	adds	r7, #8
1000133c:	46bd      	mov	sp, r7
1000133e:	bd80      	pop	{r7, pc}
10001340:	100201f8 	.word	0x100201f8

10001344 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10001344:	e7fe      	b.n	10001344 <ADC1_IRQHandler>
	...

10001348 <Key1Polling>:
 *  返回值：无
 *  函数作用：使用轮询方式查询键是否按下，通过按下控制灯亮灭
*/
static bool key1_flag = false;
void Key1Polling(void)
{
10001348:	b580      	push	{r7, lr}
1000134a:	af00      	add	r7, sp, #0
    if(READ_KEY1 == PUSH_DOWN)     // 如果检测到键被按下
1000134c:	2108      	movs	r1, #8
1000134e:	4819      	ldr	r0, [pc, #100]	; (100013b4 <Key1Polling+0x6c>)
10001350:	f000 fbc2 	bl	10001ad8 <HAL_GPIO_ReadPin>
10001354:	4603      	mov	r3, r0
10001356:	2b00      	cmp	r3, #0
10001358:	d129      	bne.n	100013ae <Key1Polling+0x66>
    {
    	HAL_Delay(5);               //  延时5ms防按键抖动
1000135a:	2005      	movs	r0, #5
1000135c:	f000 f8dc 	bl	10001518 <HAL_Delay>
        if(READ_KEY1 == PUSH_DOWN) // 如果防抖动后按键依然是处于被按下的状态，就认为按键被按下过
10001360:	2108      	movs	r1, #8
10001362:	4814      	ldr	r0, [pc, #80]	; (100013b4 <Key1Polling+0x6c>)
10001364:	f000 fbb8 	bl	10001ad8 <HAL_GPIO_ReadPin>
10001368:	4603      	mov	r3, r0
1000136a:	2b00      	cmp	r3, #0
1000136c:	d11f      	bne.n	100013ae <Key1Polling+0x66>
        {
        	key1_flag = !key1_flag; // 用一个标志位来判断按键被按下次数
1000136e:	4b12      	ldr	r3, [pc, #72]	; (100013b8 <Key1Polling+0x70>)
10001370:	781b      	ldrb	r3, [r3, #0]
10001372:	2b00      	cmp	r3, #0
10001374:	bf14      	ite	ne
10001376:	2301      	movne	r3, #1
10001378:	2300      	moveq	r3, #0
1000137a:	b2db      	uxtb	r3, r3
1000137c:	f083 0301 	eor.w	r3, r3, #1
10001380:	b2db      	uxtb	r3, r3
10001382:	f003 0301 	and.w	r3, r3, #1
10001386:	b2da      	uxtb	r2, r3
10001388:	4b0b      	ldr	r3, [pc, #44]	; (100013b8 <Key1Polling+0x70>)
1000138a:	701a      	strb	r2, [r3, #0]
        	if(key1_flag)
1000138c:	4b0a      	ldr	r3, [pc, #40]	; (100013b8 <Key1Polling+0x70>)
1000138e:	781b      	ldrb	r3, [r3, #0]
10001390:	2b00      	cmp	r3, #0
10001392:	d006      	beq.n	100013a2 <Key1Polling+0x5a>
        	{
        		LED_GREEN_ON();
10001394:	2200      	movs	r2, #0
10001396:	f44f 6180 	mov.w	r1, #1024	; 0x400
1000139a:	4808      	ldr	r0, [pc, #32]	; (100013bc <Key1Polling+0x74>)
1000139c:	f000 fbb4 	bl	10001b08 <HAL_GPIO_WritePin>
        	{
        		LED_GREEN_OFF();
        	}
        }
    }
}
100013a0:	e005      	b.n	100013ae <Key1Polling+0x66>
        		LED_GREEN_OFF();
100013a2:	2201      	movs	r2, #1
100013a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
100013a8:	4804      	ldr	r0, [pc, #16]	; (100013bc <Key1Polling+0x74>)
100013aa:	f000 fbad 	bl	10001b08 <HAL_GPIO_WritePin>
}
100013ae:	bf00      	nop
100013b0:	bd80      	pop	{r7, pc}
100013b2:	bf00      	nop
100013b4:	50008000 	.word	0x50008000
100013b8:	1002028c 	.word	0x1002028c
100013bc:	50002000 	.word	0x50002000

100013c0 <DemoLedInit>:
#include "driver_led.h"

void DemoLedInit(void)
{
100013c0:	b580      	push	{r7, lr}
100013c2:	af00      	add	r7, sp, #0
    /* LED 对应的引脚的初始化,已经由 STM32CubeMX 在 main.c 自动生成 */

    /* 两个灯初始化状态为亮 */
    LED_GREEN_ON();
100013c4:	2200      	movs	r2, #0
100013c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
100013ca:	4805      	ldr	r0, [pc, #20]	; (100013e0 <DemoLedInit+0x20>)
100013cc:	f000 fb9c 	bl	10001b08 <HAL_GPIO_WritePin>
    LED_YELLOW_ON();
100013d0:	2200      	movs	r2, #0
100013d2:	f44f 7180 	mov.w	r1, #256	; 0x100
100013d6:	4803      	ldr	r0, [pc, #12]	; (100013e4 <DemoLedInit+0x24>)
100013d8:	f000 fb96 	bl	10001b08 <HAL_GPIO_WritePin>
}
100013dc:	bf00      	nop
100013de:	bd80      	pop	{r7, pc}
100013e0:	50002000 	.word	0x50002000
100013e4:	50008000 	.word	0x50008000

100013e8 <LedBlinking>:

void LedBlinking(void)
{
100013e8:	b580      	push	{r7, lr}
100013ea:	af00      	add	r7, sp, #0
    /* LED2(GREEN)和 LED3(YELLOW)间隔 1S 闪烁 */

    LED_GREEN_ON();
100013ec:	2200      	movs	r2, #0
100013ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
100013f2:	480f      	ldr	r0, [pc, #60]	; (10001430 <LedBlinking+0x48>)
100013f4:	f000 fb88 	bl	10001b08 <HAL_GPIO_WritePin>
    LED_YELLOW_ON();
100013f8:	2200      	movs	r2, #0
100013fa:	f44f 7180 	mov.w	r1, #256	; 0x100
100013fe:	480d      	ldr	r0, [pc, #52]	; (10001434 <LedBlinking+0x4c>)
10001400:	f000 fb82 	bl	10001b08 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
10001404:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
10001408:	f000 f886 	bl	10001518 <HAL_Delay>
    LED_GREEN_OFF();
1000140c:	2201      	movs	r2, #1
1000140e:	f44f 6180 	mov.w	r1, #1024	; 0x400
10001412:	4807      	ldr	r0, [pc, #28]	; (10001430 <LedBlinking+0x48>)
10001414:	f000 fb78 	bl	10001b08 <HAL_GPIO_WritePin>
    LED_YELLOW_OFF();
10001418:	2201      	movs	r2, #1
1000141a:	f44f 7180 	mov.w	r1, #256	; 0x100
1000141e:	4805      	ldr	r0, [pc, #20]	; (10001434 <LedBlinking+0x4c>)
10001420:	f000 fb72 	bl	10001b08 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
10001424:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
10001428:	f000 f876 	bl	10001518 <HAL_Delay>
}
1000142c:	bf00      	nop
1000142e:	bd80      	pop	{r7, pc}
10001430:	50002000 	.word	0x50002000
10001434:	50008000 	.word	0x50008000

10001438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
10001438:	b580      	push	{r7, lr}
1000143a:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
1000143c:	2003      	movs	r0, #3
1000143e:	f000 f95f 	bl	10001700 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10001442:	f001 ff93 	bl	1000336c <HAL_RCC_GetSystemCoreClockFreq>
10001446:	4603      	mov	r3, r0
10001448:	4a07      	ldr	r2, [pc, #28]	; (10001468 <HAL_Init+0x30>)
1000144a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
1000144c:	200f      	movs	r0, #15
1000144e:	f000 f80d 	bl	1000146c <HAL_InitTick>
10001452:	4603      	mov	r3, r0
10001454:	2b00      	cmp	r3, #0
10001456:	d001      	beq.n	1000145c <HAL_Init+0x24>
  {
    return HAL_ERROR;
10001458:	2301      	movs	r3, #1
1000145a:	e002      	b.n	10001462 <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
1000145c:	f7ff fd63 	bl	10000f26 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
10001460:	2300      	movs	r3, #0
}
10001462:	4618      	mov	r0, r3
10001464:	bd80      	pop	{r7, pc}
10001466:	bf00      	nop
10001468:	10020000 	.word	0x10020000

1000146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
1000146c:	b580      	push	{r7, lr}
1000146e:	b082      	sub	sp, #8
10001470:	af00      	add	r7, sp, #0
10001472:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
10001474:	4b15      	ldr	r3, [pc, #84]	; (100014cc <HAL_InitTick+0x60>)
10001476:	781b      	ldrb	r3, [r3, #0]
10001478:	2b00      	cmp	r3, #0
1000147a:	d101      	bne.n	10001480 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
1000147c:	2301      	movs	r3, #1
1000147e:	e021      	b.n	100014c4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
10001480:	4b13      	ldr	r3, [pc, #76]	; (100014d0 <HAL_InitTick+0x64>)
10001482:	681a      	ldr	r2, [r3, #0]
10001484:	4b11      	ldr	r3, [pc, #68]	; (100014cc <HAL_InitTick+0x60>)
10001486:	781b      	ldrb	r3, [r3, #0]
10001488:	4619      	mov	r1, r3
1000148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1000148e:	fbb3 f3f1 	udiv	r3, r3, r1
10001492:	fbb2 f3f3 	udiv	r3, r2, r3
10001496:	4618      	mov	r0, r3
10001498:	f000 f967 	bl	1000176a <HAL_SYSTICK_Config>
1000149c:	4603      	mov	r3, r0
1000149e:	2b00      	cmp	r3, #0
100014a0:	d001      	beq.n	100014a6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
100014a2:	2301      	movs	r3, #1
100014a4:	e00e      	b.n	100014c4 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
100014a6:	687b      	ldr	r3, [r7, #4]
100014a8:	2b0f      	cmp	r3, #15
100014aa:	d80a      	bhi.n	100014c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
100014ac:	2200      	movs	r2, #0
100014ae:	6879      	ldr	r1, [r7, #4]
100014b0:	f04f 30ff 	mov.w	r0, #4294967295
100014b4:	f000 f92f 	bl	10001716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
100014b8:	4a06      	ldr	r2, [pc, #24]	; (100014d4 <HAL_InitTick+0x68>)
100014ba:	687b      	ldr	r3, [r7, #4]
100014bc:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
100014be:	2300      	movs	r3, #0
100014c0:	e000      	b.n	100014c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
100014c2:	2301      	movs	r3, #1
}
100014c4:	4618      	mov	r0, r3
100014c6:	3708      	adds	r7, #8
100014c8:	46bd      	mov	sp, r7
100014ca:	bd80      	pop	{r7, pc}
100014cc:	10020008 	.word	0x10020008
100014d0:	10020000 	.word	0x10020000
100014d4:	10020004 	.word	0x10020004

100014d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
100014d8:	b480      	push	{r7}
100014da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
100014dc:	4b06      	ldr	r3, [pc, #24]	; (100014f8 <HAL_IncTick+0x20>)
100014de:	781b      	ldrb	r3, [r3, #0]
100014e0:	461a      	mov	r2, r3
100014e2:	4b06      	ldr	r3, [pc, #24]	; (100014fc <HAL_IncTick+0x24>)
100014e4:	681b      	ldr	r3, [r3, #0]
100014e6:	4413      	add	r3, r2
100014e8:	4a04      	ldr	r2, [pc, #16]	; (100014fc <HAL_IncTick+0x24>)
100014ea:	6013      	str	r3, [r2, #0]
}
100014ec:	bf00      	nop
100014ee:	46bd      	mov	sp, r7
100014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
100014f4:	4770      	bx	lr
100014f6:	bf00      	nop
100014f8:	10020008 	.word	0x10020008
100014fc:	10020290 	.word	0x10020290

10001500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10001500:	b480      	push	{r7}
10001502:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10001504:	4b03      	ldr	r3, [pc, #12]	; (10001514 <HAL_GetTick+0x14>)
10001506:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10001508:	4618      	mov	r0, r3
1000150a:	46bd      	mov	sp, r7
1000150c:	f85d 7b04 	ldr.w	r7, [sp], #4
10001510:	4770      	bx	lr
10001512:	bf00      	nop
10001514:	10020290 	.word	0x10020290

10001518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10001518:	b580      	push	{r7, lr}
1000151a:	b084      	sub	sp, #16
1000151c:	af00      	add	r7, sp, #0
1000151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10001520:	f7ff ffee 	bl	10001500 <HAL_GetTick>
10001524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10001526:	687b      	ldr	r3, [r7, #4]
10001528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
1000152a:	68fb      	ldr	r3, [r7, #12]
1000152c:	f1b3 3fff 	cmp.w	r3, #4294967295
10001530:	d005      	beq.n	1000153e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10001532:	4b0a      	ldr	r3, [pc, #40]	; (1000155c <HAL_Delay+0x44>)
10001534:	781b      	ldrb	r3, [r3, #0]
10001536:	461a      	mov	r2, r3
10001538:	68fb      	ldr	r3, [r7, #12]
1000153a:	4413      	add	r3, r2
1000153c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
1000153e:	bf00      	nop
10001540:	f7ff ffde 	bl	10001500 <HAL_GetTick>
10001544:	4602      	mov	r2, r0
10001546:	68bb      	ldr	r3, [r7, #8]
10001548:	1ad3      	subs	r3, r2, r3
1000154a:	68fa      	ldr	r2, [r7, #12]
1000154c:	429a      	cmp	r2, r3
1000154e:	d8f7      	bhi.n	10001540 <HAL_Delay+0x28>
  {
  }
}
10001550:	bf00      	nop
10001552:	bf00      	nop
10001554:	3710      	adds	r7, #16
10001556:	46bd      	mov	sp, r7
10001558:	bd80      	pop	{r7, pc}
1000155a:	bf00      	nop
1000155c:	10020008 	.word	0x10020008

10001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10001560:	b480      	push	{r7}
10001562:	b085      	sub	sp, #20
10001564:	af00      	add	r7, sp, #0
10001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10001568:	687b      	ldr	r3, [r7, #4]
1000156a:	f003 0307 	and.w	r3, r3, #7
1000156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10001570:	4b0c      	ldr	r3, [pc, #48]	; (100015a4 <__NVIC_SetPriorityGrouping+0x44>)
10001572:	68db      	ldr	r3, [r3, #12]
10001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10001576:	68ba      	ldr	r2, [r7, #8]
10001578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
1000157c:	4013      	ands	r3, r2
1000157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10001580:	68fb      	ldr	r3, [r7, #12]
10001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10001584:	68bb      	ldr	r3, [r7, #8]
10001586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10001588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
1000158c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10001590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10001592:	4a04      	ldr	r2, [pc, #16]	; (100015a4 <__NVIC_SetPriorityGrouping+0x44>)
10001594:	68bb      	ldr	r3, [r7, #8]
10001596:	60d3      	str	r3, [r2, #12]
}
10001598:	bf00      	nop
1000159a:	3714      	adds	r7, #20
1000159c:	46bd      	mov	sp, r7
1000159e:	f85d 7b04 	ldr.w	r7, [sp], #4
100015a2:	4770      	bx	lr
100015a4:	e000ed00 	.word	0xe000ed00

100015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
100015a8:	b480      	push	{r7}
100015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
100015ac:	4b04      	ldr	r3, [pc, #16]	; (100015c0 <__NVIC_GetPriorityGrouping+0x18>)
100015ae:	68db      	ldr	r3, [r3, #12]
100015b0:	0a1b      	lsrs	r3, r3, #8
100015b2:	f003 0307 	and.w	r3, r3, #7
}
100015b6:	4618      	mov	r0, r3
100015b8:	46bd      	mov	sp, r7
100015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
100015be:	4770      	bx	lr
100015c0:	e000ed00 	.word	0xe000ed00

100015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
100015c4:	b480      	push	{r7}
100015c6:	b083      	sub	sp, #12
100015c8:	af00      	add	r7, sp, #0
100015ca:	4603      	mov	r3, r0
100015cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
100015ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100015d2:	2b00      	cmp	r3, #0
100015d4:	db0b      	blt.n	100015ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
100015d6:	88fb      	ldrh	r3, [r7, #6]
100015d8:	f003 021f 	and.w	r2, r3, #31
100015dc:	4907      	ldr	r1, [pc, #28]	; (100015fc <__NVIC_EnableIRQ+0x38>)
100015de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
100015e2:	095b      	lsrs	r3, r3, #5
100015e4:	2001      	movs	r0, #1
100015e6:	fa00 f202 	lsl.w	r2, r0, r2
100015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
100015ee:	bf00      	nop
100015f0:	370c      	adds	r7, #12
100015f2:	46bd      	mov	sp, r7
100015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
100015f8:	4770      	bx	lr
100015fa:	bf00      	nop
100015fc:	e000e100 	.word	0xe000e100

10001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10001600:	b480      	push	{r7}
10001602:	b083      	sub	sp, #12
10001604:	af00      	add	r7, sp, #0
10001606:	4603      	mov	r3, r0
10001608:	6039      	str	r1, [r7, #0]
1000160a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
1000160c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10001610:	2b00      	cmp	r3, #0
10001612:	db0a      	blt.n	1000162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10001614:	683b      	ldr	r3, [r7, #0]
10001616:	b2da      	uxtb	r2, r3
10001618:	490c      	ldr	r1, [pc, #48]	; (1000164c <__NVIC_SetPriority+0x4c>)
1000161a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000161e:	0112      	lsls	r2, r2, #4
10001620:	b2d2      	uxtb	r2, r2
10001622:	440b      	add	r3, r1
10001624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10001628:	e00a      	b.n	10001640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1000162a:	683b      	ldr	r3, [r7, #0]
1000162c:	b2da      	uxtb	r2, r3
1000162e:	4908      	ldr	r1, [pc, #32]	; (10001650 <__NVIC_SetPriority+0x50>)
10001630:	88fb      	ldrh	r3, [r7, #6]
10001632:	f003 030f 	and.w	r3, r3, #15
10001636:	3b04      	subs	r3, #4
10001638:	0112      	lsls	r2, r2, #4
1000163a:	b2d2      	uxtb	r2, r2
1000163c:	440b      	add	r3, r1
1000163e:	761a      	strb	r2, [r3, #24]
}
10001640:	bf00      	nop
10001642:	370c      	adds	r7, #12
10001644:	46bd      	mov	sp, r7
10001646:	f85d 7b04 	ldr.w	r7, [sp], #4
1000164a:	4770      	bx	lr
1000164c:	e000e100 	.word	0xe000e100
10001650:	e000ed00 	.word	0xe000ed00

10001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10001654:	b480      	push	{r7}
10001656:	b089      	sub	sp, #36	; 0x24
10001658:	af00      	add	r7, sp, #0
1000165a:	60f8      	str	r0, [r7, #12]
1000165c:	60b9      	str	r1, [r7, #8]
1000165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10001660:	68fb      	ldr	r3, [r7, #12]
10001662:	f003 0307 	and.w	r3, r3, #7
10001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10001668:	69fb      	ldr	r3, [r7, #28]
1000166a:	f1c3 0307 	rsb	r3, r3, #7
1000166e:	2b04      	cmp	r3, #4
10001670:	bf28      	it	cs
10001672:	2304      	movcs	r3, #4
10001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10001676:	69fb      	ldr	r3, [r7, #28]
10001678:	3304      	adds	r3, #4
1000167a:	2b06      	cmp	r3, #6
1000167c:	d902      	bls.n	10001684 <NVIC_EncodePriority+0x30>
1000167e:	69fb      	ldr	r3, [r7, #28]
10001680:	3b03      	subs	r3, #3
10001682:	e000      	b.n	10001686 <NVIC_EncodePriority+0x32>
10001684:	2300      	movs	r3, #0
10001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10001688:	f04f 32ff 	mov.w	r2, #4294967295
1000168c:	69bb      	ldr	r3, [r7, #24]
1000168e:	fa02 f303 	lsl.w	r3, r2, r3
10001692:	43da      	mvns	r2, r3
10001694:	68bb      	ldr	r3, [r7, #8]
10001696:	401a      	ands	r2, r3
10001698:	697b      	ldr	r3, [r7, #20]
1000169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
1000169c:	f04f 31ff 	mov.w	r1, #4294967295
100016a0:	697b      	ldr	r3, [r7, #20]
100016a2:	fa01 f303 	lsl.w	r3, r1, r3
100016a6:	43d9      	mvns	r1, r3
100016a8:	687b      	ldr	r3, [r7, #4]
100016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
100016ac:	4313      	orrs	r3, r2
         );
}
100016ae:	4618      	mov	r0, r3
100016b0:	3724      	adds	r7, #36	; 0x24
100016b2:	46bd      	mov	sp, r7
100016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
100016b8:	4770      	bx	lr
	...

100016bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
100016bc:	b580      	push	{r7, lr}
100016be:	b082      	sub	sp, #8
100016c0:	af00      	add	r7, sp, #0
100016c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
100016c4:	687b      	ldr	r3, [r7, #4]
100016c6:	3b01      	subs	r3, #1
100016c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
100016cc:	d301      	bcc.n	100016d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
100016ce:	2301      	movs	r3, #1
100016d0:	e00f      	b.n	100016f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
100016d2:	4a0a      	ldr	r2, [pc, #40]	; (100016fc <SysTick_Config+0x40>)
100016d4:	687b      	ldr	r3, [r7, #4]
100016d6:	3b01      	subs	r3, #1
100016d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
100016da:	210f      	movs	r1, #15
100016dc:	f04f 30ff 	mov.w	r0, #4294967295
100016e0:	f7ff ff8e 	bl	10001600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
100016e4:	4b05      	ldr	r3, [pc, #20]	; (100016fc <SysTick_Config+0x40>)
100016e6:	2200      	movs	r2, #0
100016e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
100016ea:	4b04      	ldr	r3, [pc, #16]	; (100016fc <SysTick_Config+0x40>)
100016ec:	2207      	movs	r2, #7
100016ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
100016f0:	2300      	movs	r3, #0
}
100016f2:	4618      	mov	r0, r3
100016f4:	3708      	adds	r7, #8
100016f6:	46bd      	mov	sp, r7
100016f8:	bd80      	pop	{r7, pc}
100016fa:	bf00      	nop
100016fc:	e000e010 	.word	0xe000e010

10001700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10001700:	b580      	push	{r7, lr}
10001702:	b082      	sub	sp, #8
10001704:	af00      	add	r7, sp, #0
10001706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10001708:	6878      	ldr	r0, [r7, #4]
1000170a:	f7ff ff29 	bl	10001560 <__NVIC_SetPriorityGrouping>
}
1000170e:	bf00      	nop
10001710:	3708      	adds	r7, #8
10001712:	46bd      	mov	sp, r7
10001714:	bd80      	pop	{r7, pc}

10001716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10001716:	b580      	push	{r7, lr}
10001718:	b086      	sub	sp, #24
1000171a:	af00      	add	r7, sp, #0
1000171c:	4603      	mov	r3, r0
1000171e:	60b9      	str	r1, [r7, #8]
10001720:	607a      	str	r2, [r7, #4]
10001722:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10001724:	2300      	movs	r3, #0
10001726:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10001728:	f7ff ff3e 	bl	100015a8 <__NVIC_GetPriorityGrouping>
1000172c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
1000172e:	687a      	ldr	r2, [r7, #4]
10001730:	68b9      	ldr	r1, [r7, #8]
10001732:	6978      	ldr	r0, [r7, #20]
10001734:	f7ff ff8e 	bl	10001654 <NVIC_EncodePriority>
10001738:	4602      	mov	r2, r0
1000173a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
1000173e:	4611      	mov	r1, r2
10001740:	4618      	mov	r0, r3
10001742:	f7ff ff5d 	bl	10001600 <__NVIC_SetPriority>
}
10001746:	bf00      	nop
10001748:	3718      	adds	r7, #24
1000174a:	46bd      	mov	sp, r7
1000174c:	bd80      	pop	{r7, pc}

1000174e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
1000174e:	b580      	push	{r7, lr}
10001750:	b082      	sub	sp, #8
10001752:	af00      	add	r7, sp, #0
10001754:	4603      	mov	r3, r0
10001756:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10001758:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
1000175c:	4618      	mov	r0, r3
1000175e:	f7ff ff31 	bl	100015c4 <__NVIC_EnableIRQ>
}
10001762:	bf00      	nop
10001764:	3708      	adds	r7, #8
10001766:	46bd      	mov	sp, r7
10001768:	bd80      	pop	{r7, pc}

1000176a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
1000176a:	b580      	push	{r7, lr}
1000176c:	b082      	sub	sp, #8
1000176e:	af00      	add	r7, sp, #0
10001770:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
10001772:	6878      	ldr	r0, [r7, #4]
10001774:	f7ff ffa2 	bl	100016bc <SysTick_Config>
10001778:	4603      	mov	r3, r0
}
1000177a:	4618      	mov	r0, r3
1000177c:	3708      	adds	r7, #8
1000177e:	46bd      	mov	sp, r7
10001780:	bd80      	pop	{r7, pc}
	...

10001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
10001784:	b480      	push	{r7}
10001786:	b089      	sub	sp, #36	; 0x24
10001788:	af00      	add	r7, sp, #0
1000178a:	6078      	str	r0, [r7, #4]
1000178c:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
1000178e:	4b8a      	ldr	r3, [pc, #552]	; (100019b8 <HAL_GPIO_Init+0x234>)
10001790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
10001792:	2300      	movs	r3, #0
10001794:	61fb      	str	r3, [r7, #28]
10001796:	e191      	b.n	10001abc <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
10001798:	2201      	movs	r2, #1
1000179a:	69fb      	ldr	r3, [r7, #28]
1000179c:	fa02 f303 	lsl.w	r3, r2, r3
100017a0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
100017a2:	683b      	ldr	r3, [r7, #0]
100017a4:	681b      	ldr	r3, [r3, #0]
100017a6:	693a      	ldr	r2, [r7, #16]
100017a8:	4013      	ands	r3, r2
100017aa:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
100017ac:	68fa      	ldr	r2, [r7, #12]
100017ae:	693b      	ldr	r3, [r7, #16]
100017b0:	429a      	cmp	r2, r3
100017b2:	f040 8180 	bne.w	10001ab6 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100017b6:	683b      	ldr	r3, [r7, #0]
100017b8:	685b      	ldr	r3, [r3, #4]
100017ba:	2b02      	cmp	r3, #2
100017bc:	d003      	beq.n	100017c6 <HAL_GPIO_Init+0x42>
100017be:	683b      	ldr	r3, [r7, #0]
100017c0:	685b      	ldr	r3, [r3, #4]
100017c2:	2b12      	cmp	r3, #18
100017c4:	d123      	bne.n	1000180e <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
100017c6:	69fb      	ldr	r3, [r7, #28]
100017c8:	08da      	lsrs	r2, r3, #3
100017ca:	687b      	ldr	r3, [r7, #4]
100017cc:	3208      	adds	r2, #8
100017ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
100017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
100017d4:	69fb      	ldr	r3, [r7, #28]
100017d6:	f003 0307 	and.w	r3, r3, #7
100017da:	009b      	lsls	r3, r3, #2
100017dc:	220f      	movs	r2, #15
100017de:	fa02 f303 	lsl.w	r3, r2, r3
100017e2:	43db      	mvns	r3, r3
100017e4:	69ba      	ldr	r2, [r7, #24]
100017e6:	4013      	ands	r3, r2
100017e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
100017ea:	683b      	ldr	r3, [r7, #0]
100017ec:	691a      	ldr	r2, [r3, #16]
100017ee:	69fb      	ldr	r3, [r7, #28]
100017f0:	f003 0307 	and.w	r3, r3, #7
100017f4:	009b      	lsls	r3, r3, #2
100017f6:	fa02 f303 	lsl.w	r3, r2, r3
100017fa:	69ba      	ldr	r2, [r7, #24]
100017fc:	4313      	orrs	r3, r2
100017fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10001800:	69fb      	ldr	r3, [r7, #28]
10001802:	08da      	lsrs	r2, r3, #3
10001804:	687b      	ldr	r3, [r7, #4]
10001806:	3208      	adds	r2, #8
10001808:	69b9      	ldr	r1, [r7, #24]
1000180a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
1000180e:	687b      	ldr	r3, [r7, #4]
10001810:	681b      	ldr	r3, [r3, #0]
10001812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10001814:	69fb      	ldr	r3, [r7, #28]
10001816:	005b      	lsls	r3, r3, #1
10001818:	2203      	movs	r2, #3
1000181a:	fa02 f303 	lsl.w	r3, r2, r3
1000181e:	43db      	mvns	r3, r3
10001820:	69ba      	ldr	r2, [r7, #24]
10001822:	4013      	ands	r3, r2
10001824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10001826:	683b      	ldr	r3, [r7, #0]
10001828:	685b      	ldr	r3, [r3, #4]
1000182a:	f003 0203 	and.w	r2, r3, #3
1000182e:	69fb      	ldr	r3, [r7, #28]
10001830:	005b      	lsls	r3, r3, #1
10001832:	fa02 f303 	lsl.w	r3, r2, r3
10001836:	69ba      	ldr	r2, [r7, #24]
10001838:	4313      	orrs	r3, r2
1000183a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
1000183c:	687b      	ldr	r3, [r7, #4]
1000183e:	69ba      	ldr	r2, [r7, #24]
10001840:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10001842:	683b      	ldr	r3, [r7, #0]
10001844:	685b      	ldr	r3, [r3, #4]
10001846:	2b01      	cmp	r3, #1
10001848:	d00b      	beq.n	10001862 <HAL_GPIO_Init+0xde>
1000184a:	683b      	ldr	r3, [r7, #0]
1000184c:	685b      	ldr	r3, [r3, #4]
1000184e:	2b02      	cmp	r3, #2
10001850:	d007      	beq.n	10001862 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001852:	683b      	ldr	r3, [r7, #0]
10001854:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10001856:	2b11      	cmp	r3, #17
10001858:	d003      	beq.n	10001862 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000185a:	683b      	ldr	r3, [r7, #0]
1000185c:	685b      	ldr	r3, [r3, #4]
1000185e:	2b12      	cmp	r3, #18
10001860:	d130      	bne.n	100018c4 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10001862:	687b      	ldr	r3, [r7, #4]
10001864:	689b      	ldr	r3, [r3, #8]
10001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10001868:	69fb      	ldr	r3, [r7, #28]
1000186a:	005b      	lsls	r3, r3, #1
1000186c:	2203      	movs	r2, #3
1000186e:	fa02 f303 	lsl.w	r3, r2, r3
10001872:	43db      	mvns	r3, r3
10001874:	69ba      	ldr	r2, [r7, #24]
10001876:	4013      	ands	r3, r2
10001878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
1000187a:	683b      	ldr	r3, [r7, #0]
1000187c:	68da      	ldr	r2, [r3, #12]
1000187e:	69fb      	ldr	r3, [r7, #28]
10001880:	005b      	lsls	r3, r3, #1
10001882:	fa02 f303 	lsl.w	r3, r2, r3
10001886:	69ba      	ldr	r2, [r7, #24]
10001888:	4313      	orrs	r3, r2
1000188a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
1000188c:	687b      	ldr	r3, [r7, #4]
1000188e:	69ba      	ldr	r2, [r7, #24]
10001890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
10001892:	687b      	ldr	r3, [r7, #4]
10001894:	685b      	ldr	r3, [r3, #4]
10001896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
10001898:	2201      	movs	r2, #1
1000189a:	69fb      	ldr	r3, [r7, #28]
1000189c:	fa02 f303 	lsl.w	r3, r2, r3
100018a0:	43db      	mvns	r3, r3
100018a2:	69ba      	ldr	r2, [r7, #24]
100018a4:	4013      	ands	r3, r2
100018a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
100018a8:	683b      	ldr	r3, [r7, #0]
100018aa:	685b      	ldr	r3, [r3, #4]
100018ac:	091b      	lsrs	r3, r3, #4
100018ae:	f003 0201 	and.w	r2, r3, #1
100018b2:	69fb      	ldr	r3, [r7, #28]
100018b4:	fa02 f303 	lsl.w	r3, r2, r3
100018b8:	69ba      	ldr	r2, [r7, #24]
100018ba:	4313      	orrs	r3, r2
100018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
100018be:	687b      	ldr	r3, [r7, #4]
100018c0:	69ba      	ldr	r2, [r7, #24]
100018c2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
100018c4:	687b      	ldr	r3, [r7, #4]
100018c6:	68db      	ldr	r3, [r3, #12]
100018c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
100018ca:	69fb      	ldr	r3, [r7, #28]
100018cc:	005b      	lsls	r3, r3, #1
100018ce:	2203      	movs	r2, #3
100018d0:	fa02 f303 	lsl.w	r3, r2, r3
100018d4:	43db      	mvns	r3, r3
100018d6:	69ba      	ldr	r2, [r7, #24]
100018d8:	4013      	ands	r3, r2
100018da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
100018dc:	683b      	ldr	r3, [r7, #0]
100018de:	689a      	ldr	r2, [r3, #8]
100018e0:	69fb      	ldr	r3, [r7, #28]
100018e2:	005b      	lsls	r3, r3, #1
100018e4:	fa02 f303 	lsl.w	r3, r2, r3
100018e8:	69ba      	ldr	r2, [r7, #24]
100018ea:	4313      	orrs	r3, r2
100018ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
100018ee:	687b      	ldr	r3, [r7, #4]
100018f0:	69ba      	ldr	r2, [r7, #24]
100018f2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
100018f4:	683b      	ldr	r3, [r7, #0]
100018f6:	685b      	ldr	r3, [r3, #4]
100018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
100018fc:	2b00      	cmp	r3, #0
100018fe:	f000 80da 	beq.w	10001ab6 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10001902:	4a2e      	ldr	r2, [pc, #184]	; (100019bc <HAL_GPIO_Init+0x238>)
10001904:	69fb      	ldr	r3, [r7, #28]
10001906:	089b      	lsrs	r3, r3, #2
10001908:	3318      	adds	r3, #24
1000190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10001910:	69fb      	ldr	r3, [r7, #28]
10001912:	f003 0303 	and.w	r3, r3, #3
10001916:	00db      	lsls	r3, r3, #3
10001918:	22ff      	movs	r2, #255	; 0xff
1000191a:	fa02 f303 	lsl.w	r3, r2, r3
1000191e:	43db      	mvns	r3, r3
10001920:	69ba      	ldr	r2, [r7, #24]
10001922:	4013      	ands	r3, r2
10001924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10001926:	687b      	ldr	r3, [r7, #4]
10001928:	4a25      	ldr	r2, [pc, #148]	; (100019c0 <HAL_GPIO_Init+0x23c>)
1000192a:	4293      	cmp	r3, r2
1000192c:	d05e      	beq.n	100019ec <HAL_GPIO_Init+0x268>
1000192e:	687b      	ldr	r3, [r7, #4]
10001930:	4a24      	ldr	r2, [pc, #144]	; (100019c4 <HAL_GPIO_Init+0x240>)
10001932:	4293      	cmp	r3, r2
10001934:	d03d      	beq.n	100019b2 <HAL_GPIO_Init+0x22e>
10001936:	687b      	ldr	r3, [r7, #4]
10001938:	4a23      	ldr	r2, [pc, #140]	; (100019c8 <HAL_GPIO_Init+0x244>)
1000193a:	4293      	cmp	r3, r2
1000193c:	d037      	beq.n	100019ae <HAL_GPIO_Init+0x22a>
1000193e:	687b      	ldr	r3, [r7, #4]
10001940:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10001944:	d031      	beq.n	100019aa <HAL_GPIO_Init+0x226>
10001946:	687b      	ldr	r3, [r7, #4]
10001948:	4a20      	ldr	r2, [pc, #128]	; (100019cc <HAL_GPIO_Init+0x248>)
1000194a:	4293      	cmp	r3, r2
1000194c:	d02b      	beq.n	100019a6 <HAL_GPIO_Init+0x222>
1000194e:	687b      	ldr	r3, [r7, #4]
10001950:	4a1f      	ldr	r2, [pc, #124]	; (100019d0 <HAL_GPIO_Init+0x24c>)
10001952:	4293      	cmp	r3, r2
10001954:	d025      	beq.n	100019a2 <HAL_GPIO_Init+0x21e>
10001956:	687b      	ldr	r3, [r7, #4]
10001958:	4a1e      	ldr	r2, [pc, #120]	; (100019d4 <HAL_GPIO_Init+0x250>)
1000195a:	4293      	cmp	r3, r2
1000195c:	d01f      	beq.n	1000199e <HAL_GPIO_Init+0x21a>
1000195e:	687b      	ldr	r3, [r7, #4]
10001960:	4a1d      	ldr	r2, [pc, #116]	; (100019d8 <HAL_GPIO_Init+0x254>)
10001962:	4293      	cmp	r3, r2
10001964:	d019      	beq.n	1000199a <HAL_GPIO_Init+0x216>
10001966:	687b      	ldr	r3, [r7, #4]
10001968:	4a1c      	ldr	r2, [pc, #112]	; (100019dc <HAL_GPIO_Init+0x258>)
1000196a:	4293      	cmp	r3, r2
1000196c:	d013      	beq.n	10001996 <HAL_GPIO_Init+0x212>
1000196e:	687b      	ldr	r3, [r7, #4]
10001970:	4a1b      	ldr	r2, [pc, #108]	; (100019e0 <HAL_GPIO_Init+0x25c>)
10001972:	4293      	cmp	r3, r2
10001974:	d00d      	beq.n	10001992 <HAL_GPIO_Init+0x20e>
10001976:	687b      	ldr	r3, [r7, #4]
10001978:	4a1a      	ldr	r2, [pc, #104]	; (100019e4 <HAL_GPIO_Init+0x260>)
1000197a:	4293      	cmp	r3, r2
1000197c:	d007      	beq.n	1000198e <HAL_GPIO_Init+0x20a>
1000197e:	687b      	ldr	r3, [r7, #4]
10001980:	4a19      	ldr	r2, [pc, #100]	; (100019e8 <HAL_GPIO_Init+0x264>)
10001982:	4293      	cmp	r3, r2
10001984:	d101      	bne.n	1000198a <HAL_GPIO_Init+0x206>
10001986:	230b      	movs	r3, #11
10001988:	e031      	b.n	100019ee <HAL_GPIO_Init+0x26a>
1000198a:	2319      	movs	r3, #25
1000198c:	e02f      	b.n	100019ee <HAL_GPIO_Init+0x26a>
1000198e:	230a      	movs	r3, #10
10001990:	e02d      	b.n	100019ee <HAL_GPIO_Init+0x26a>
10001992:	2309      	movs	r3, #9
10001994:	e02b      	b.n	100019ee <HAL_GPIO_Init+0x26a>
10001996:	2308      	movs	r3, #8
10001998:	e029      	b.n	100019ee <HAL_GPIO_Init+0x26a>
1000199a:	2307      	movs	r3, #7
1000199c:	e027      	b.n	100019ee <HAL_GPIO_Init+0x26a>
1000199e:	2306      	movs	r3, #6
100019a0:	e025      	b.n	100019ee <HAL_GPIO_Init+0x26a>
100019a2:	2305      	movs	r3, #5
100019a4:	e023      	b.n	100019ee <HAL_GPIO_Init+0x26a>
100019a6:	2304      	movs	r3, #4
100019a8:	e021      	b.n	100019ee <HAL_GPIO_Init+0x26a>
100019aa:	2303      	movs	r3, #3
100019ac:	e01f      	b.n	100019ee <HAL_GPIO_Init+0x26a>
100019ae:	2302      	movs	r3, #2
100019b0:	e01d      	b.n	100019ee <HAL_GPIO_Init+0x26a>
100019b2:	2301      	movs	r3, #1
100019b4:	e01b      	b.n	100019ee <HAL_GPIO_Init+0x26a>
100019b6:	bf00      	nop
100019b8:	5000d0c0 	.word	0x5000d0c0
100019bc:	5000d000 	.word	0x5000d000
100019c0:	50002000 	.word	0x50002000
100019c4:	50003000 	.word	0x50003000
100019c8:	50004000 	.word	0x50004000
100019cc:	50006000 	.word	0x50006000
100019d0:	50007000 	.word	0x50007000
100019d4:	50008000 	.word	0x50008000
100019d8:	50009000 	.word	0x50009000
100019dc:	5000a000 	.word	0x5000a000
100019e0:	5000b000 	.word	0x5000b000
100019e4:	5000c000 	.word	0x5000c000
100019e8:	54004000 	.word	0x54004000
100019ec:	2300      	movs	r3, #0
100019ee:	69fa      	ldr	r2, [r7, #28]
100019f0:	f002 0203 	and.w	r2, r2, #3
100019f4:	00d2      	lsls	r2, r2, #3
100019f6:	4093      	lsls	r3, r2
100019f8:	461a      	mov	r2, r3
100019fa:	69bb      	ldr	r3, [r7, #24]
100019fc:	4313      	orrs	r3, r2
100019fe:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10001a00:	4934      	ldr	r1, [pc, #208]	; (10001ad4 <HAL_GPIO_Init+0x350>)
10001a02:	69fb      	ldr	r3, [r7, #28]
10001a04:	089b      	lsrs	r3, r3, #2
10001a06:	3318      	adds	r3, #24
10001a08:	69ba      	ldr	r2, [r7, #24]
10001a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
10001a0e:	697b      	ldr	r3, [r7, #20]
10001a10:	681b      	ldr	r3, [r3, #0]
10001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001a14:	68fb      	ldr	r3, [r7, #12]
10001a16:	43db      	mvns	r3, r3
10001a18:	69ba      	ldr	r2, [r7, #24]
10001a1a:	4013      	ands	r3, r2
10001a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
10001a1e:	683b      	ldr	r3, [r7, #0]
10001a20:	685b      	ldr	r3, [r3, #4]
10001a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10001a26:	2b00      	cmp	r3, #0
10001a28:	d003      	beq.n	10001a32 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
10001a2a:	69ba      	ldr	r2, [r7, #24]
10001a2c:	68fb      	ldr	r3, [r7, #12]
10001a2e:	4313      	orrs	r3, r2
10001a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10001a32:	697b      	ldr	r3, [r7, #20]
10001a34:	69ba      	ldr	r2, [r7, #24]
10001a36:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10001a38:	697b      	ldr	r3, [r7, #20]
10001a3a:	685b      	ldr	r3, [r3, #4]
10001a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001a3e:	68fb      	ldr	r3, [r7, #12]
10001a40:	43db      	mvns	r3, r3
10001a42:	69ba      	ldr	r2, [r7, #24]
10001a44:	4013      	ands	r3, r2
10001a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10001a48:	683b      	ldr	r3, [r7, #0]
10001a4a:	685b      	ldr	r3, [r3, #4]
10001a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10001a50:	2b00      	cmp	r3, #0
10001a52:	d003      	beq.n	10001a5c <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10001a54:	69ba      	ldr	r2, [r7, #24]
10001a56:	68fb      	ldr	r3, [r7, #12]
10001a58:	4313      	orrs	r3, r2
10001a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
10001a5c:	697b      	ldr	r3, [r7, #20]
10001a5e:	69ba      	ldr	r2, [r7, #24]
10001a60:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10001a62:	4b1c      	ldr	r3, [pc, #112]	; (10001ad4 <HAL_GPIO_Init+0x350>)
10001a64:	681b      	ldr	r3, [r3, #0]
10001a66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001a68:	68fb      	ldr	r3, [r7, #12]
10001a6a:	43db      	mvns	r3, r3
10001a6c:	69ba      	ldr	r2, [r7, #24]
10001a6e:	4013      	ands	r3, r2
10001a70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
10001a72:	683b      	ldr	r3, [r7, #0]
10001a74:	685b      	ldr	r3, [r3, #4]
10001a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
10001a7a:	2b00      	cmp	r3, #0
10001a7c:	d003      	beq.n	10001a86 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
10001a7e:	69ba      	ldr	r2, [r7, #24]
10001a80:	68fb      	ldr	r3, [r7, #12]
10001a82:	4313      	orrs	r3, r2
10001a84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
10001a86:	4a13      	ldr	r2, [pc, #76]	; (10001ad4 <HAL_GPIO_Init+0x350>)
10001a88:	69bb      	ldr	r3, [r7, #24]
10001a8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
10001a8c:	4b11      	ldr	r3, [pc, #68]	; (10001ad4 <HAL_GPIO_Init+0x350>)
10001a8e:	685b      	ldr	r3, [r3, #4]
10001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001a92:	68fb      	ldr	r3, [r7, #12]
10001a94:	43db      	mvns	r3, r3
10001a96:	69ba      	ldr	r2, [r7, #24]
10001a98:	4013      	ands	r3, r2
10001a9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
10001a9c:	683b      	ldr	r3, [r7, #0]
10001a9e:	685b      	ldr	r3, [r3, #4]
10001aa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
10001aa4:	2b00      	cmp	r3, #0
10001aa6:	d003      	beq.n	10001ab0 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
10001aa8:	69ba      	ldr	r2, [r7, #24]
10001aaa:	68fb      	ldr	r3, [r7, #12]
10001aac:	4313      	orrs	r3, r2
10001aae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
10001ab0:	4a08      	ldr	r2, [pc, #32]	; (10001ad4 <HAL_GPIO_Init+0x350>)
10001ab2:	69bb      	ldr	r3, [r7, #24]
10001ab4:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
10001ab6:	69fb      	ldr	r3, [r7, #28]
10001ab8:	3301      	adds	r3, #1
10001aba:	61fb      	str	r3, [r7, #28]
10001abc:	69fb      	ldr	r3, [r7, #28]
10001abe:	2b0f      	cmp	r3, #15
10001ac0:	f67f ae6a 	bls.w	10001798 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
10001ac4:	bf00      	nop
10001ac6:	bf00      	nop
10001ac8:	3724      	adds	r7, #36	; 0x24
10001aca:	46bd      	mov	sp, r7
10001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ad0:	4770      	bx	lr
10001ad2:	bf00      	nop
10001ad4:	5000d000 	.word	0x5000d000

10001ad8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10001ad8:	b480      	push	{r7}
10001ada:	b085      	sub	sp, #20
10001adc:	af00      	add	r7, sp, #0
10001ade:	6078      	str	r0, [r7, #4]
10001ae0:	460b      	mov	r3, r1
10001ae2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
10001ae4:	687b      	ldr	r3, [r7, #4]
10001ae6:	691a      	ldr	r2, [r3, #16]
10001ae8:	887b      	ldrh	r3, [r7, #2]
10001aea:	4013      	ands	r3, r2
10001aec:	2b00      	cmp	r3, #0
10001aee:	d002      	beq.n	10001af6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
10001af0:	2301      	movs	r3, #1
10001af2:	73fb      	strb	r3, [r7, #15]
10001af4:	e001      	b.n	10001afa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
10001af6:	2300      	movs	r3, #0
10001af8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
10001afa:	7bfb      	ldrb	r3, [r7, #15]
}
10001afc:	4618      	mov	r0, r3
10001afe:	3714      	adds	r7, #20
10001b00:	46bd      	mov	sp, r7
10001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b06:	4770      	bx	lr

10001b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10001b08:	b480      	push	{r7}
10001b0a:	b083      	sub	sp, #12
10001b0c:	af00      	add	r7, sp, #0
10001b0e:	6078      	str	r0, [r7, #4]
10001b10:	460b      	mov	r3, r1
10001b12:	807b      	strh	r3, [r7, #2]
10001b14:	4613      	mov	r3, r2
10001b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10001b18:	787b      	ldrb	r3, [r7, #1]
10001b1a:	2b00      	cmp	r3, #0
10001b1c:	d003      	beq.n	10001b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10001b1e:	887a      	ldrh	r2, [r7, #2]
10001b20:	687b      	ldr	r3, [r7, #4]
10001b22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10001b24:	e003      	b.n	10001b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10001b26:	887b      	ldrh	r3, [r7, #2]
10001b28:	041a      	lsls	r2, r3, #16
10001b2a:	687b      	ldr	r3, [r7, #4]
10001b2c:	619a      	str	r2, [r3, #24]
}
10001b2e:	bf00      	nop
10001b30:	370c      	adds	r7, #12
10001b32:	46bd      	mov	sp, r7
10001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b38:	4770      	bx	lr
	...

10001b3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
10001b3c:	b580      	push	{r7, lr}
10001b3e:	b082      	sub	sp, #8
10001b40:	af00      	add	r7, sp, #0
10001b42:	4603      	mov	r3, r0
10001b44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != RESET)
10001b46:	4b0f      	ldr	r3, [pc, #60]	; (10001b84 <HAL_GPIO_EXTI_IRQHandler+0x48>)
10001b48:	68da      	ldr	r2, [r3, #12]
10001b4a:	88fb      	ldrh	r3, [r7, #6]
10001b4c:	4013      	ands	r3, r2
10001b4e:	2b00      	cmp	r3, #0
10001b50:	d006      	beq.n	10001b60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
10001b52:	4a0c      	ldr	r2, [pc, #48]	; (10001b84 <HAL_GPIO_EXTI_IRQHandler+0x48>)
10001b54:	88fb      	ldrh	r3, [r7, #6]
10001b56:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
10001b58:	88fb      	ldrh	r3, [r7, #6]
10001b5a:	4618      	mov	r0, r3
10001b5c:	f000 f814 	bl	10001b88 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != RESET)
10001b60:	4b08      	ldr	r3, [pc, #32]	; (10001b84 <HAL_GPIO_EXTI_IRQHandler+0x48>)
10001b62:	691a      	ldr	r2, [r3, #16]
10001b64:	88fb      	ldrh	r3, [r7, #6]
10001b66:	4013      	ands	r3, r2
10001b68:	2b00      	cmp	r3, #0
10001b6a:	d006      	beq.n	10001b7a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
10001b6c:	4a05      	ldr	r2, [pc, #20]	; (10001b84 <HAL_GPIO_EXTI_IRQHandler+0x48>)
10001b6e:	88fb      	ldrh	r3, [r7, #6]
10001b70:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
10001b72:	88fb      	ldrh	r3, [r7, #6]
10001b74:	4618      	mov	r0, r3
10001b76:	f000 f812 	bl	10001b9e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
10001b7a:	bf00      	nop
10001b7c:	3708      	adds	r7, #8
10001b7e:	46bd      	mov	sp, r7
10001b80:	bd80      	pop	{r7, pc}
10001b82:	bf00      	nop
10001b84:	5000d000 	.word	0x5000d000

10001b88 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
10001b88:	b480      	push	{r7}
10001b8a:	b083      	sub	sp, #12
10001b8c:	af00      	add	r7, sp, #0
10001b8e:	4603      	mov	r3, r0
10001b90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
10001b92:	bf00      	nop
10001b94:	370c      	adds	r7, #12
10001b96:	46bd      	mov	sp, r7
10001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
10001b9c:	4770      	bx	lr

10001b9e <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
10001b9e:	b480      	push	{r7}
10001ba0:	b083      	sub	sp, #12
10001ba2:	af00      	add	r7, sp, #0
10001ba4:	4603      	mov	r3, r0
10001ba6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
10001ba8:	bf00      	nop
10001baa:	370c      	adds	r7, #12
10001bac:	46bd      	mov	sp, r7
10001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
10001bb2:	4770      	bx	lr

10001bb4 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
10001bb4:	b580      	push	{r7, lr}
10001bb6:	b084      	sub	sp, #16
10001bb8:	af00      	add	r7, sp, #0
10001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef result = HAL_OK;
10001bbc:	2300      	movs	r3, #0
10001bbe:	73fb      	strb	r3, [r7, #15]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
10001bc0:	687b      	ldr	r3, [r7, #4]
10001bc2:	2b00      	cmp	r3, #0
10001bc4:	d101      	bne.n	10001bca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
10001bc6:	2301      	movs	r3, #1
10001bc8:	e320      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
10001bca:	687b      	ldr	r3, [r7, #4]
10001bcc:	681b      	ldr	r3, [r3, #0]
10001bce:	f003 0301 	and.w	r3, r3, #1
10001bd2:	2b00      	cmp	r3, #0
10001bd4:	f000 8081 	beq.w	10001cda <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used somewhere in the system it will not be disabled */
    if (IS_HSE_IN_USE())
10001bd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bdc:	6a1b      	ldr	r3, [r3, #32]
10001bde:	f003 0303 	and.w	r3, r3, #3
10001be2:	2b01      	cmp	r3, #1
10001be4:	d107      	bne.n	10001bf6 <HAL_RCC_OscConfig+0x42>
10001be6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bea:	6a1b      	ldr	r3, [r3, #32]
10001bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001bf4:	d054      	beq.n	10001ca0 <HAL_RCC_OscConfig+0xec>
10001bf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001bfc:	f003 0307 	and.w	r3, r3, #7
10001c00:	2b01      	cmp	r3, #1
10001c02:	d107      	bne.n	10001c14 <HAL_RCC_OscConfig+0x60>
10001c04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001c12:	d045      	beq.n	10001ca0 <HAL_RCC_OscConfig+0xec>
10001c14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001c1a:	f003 0303 	and.w	r3, r3, #3
10001c1e:	2b01      	cmp	r3, #1
10001c20:	d107      	bne.n	10001c32 <HAL_RCC_OscConfig+0x7e>
10001c22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001c28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001c30:	d036      	beq.n	10001ca0 <HAL_RCC_OscConfig+0xec>
10001c32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001c38:	f003 0303 	and.w	r3, r3, #3
10001c3c:	2b01      	cmp	r3, #1
10001c3e:	d10f      	bne.n	10001c60 <HAL_RCC_OscConfig+0xac>
10001c40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001c48:	f003 0302 	and.w	r3, r3, #2
10001c4c:	2b02      	cmp	r3, #2
10001c4e:	d027      	beq.n	10001ca0 <HAL_RCC_OscConfig+0xec>
10001c50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001c58:	f003 0302 	and.w	r3, r3, #2
10001c5c:	2b02      	cmp	r3, #2
10001c5e:	d01f      	beq.n	10001ca0 <HAL_RCC_OscConfig+0xec>
10001c60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c64:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001c68:	f003 0303 	and.w	r3, r3, #3
10001c6c:	2b01      	cmp	r3, #1
10001c6e:	d107      	bne.n	10001c80 <HAL_RCC_OscConfig+0xcc>
10001c70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c74:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001c78:	f003 0302 	and.w	r3, r3, #2
10001c7c:	2b02      	cmp	r3, #2
10001c7e:	d00f      	beq.n	10001ca0 <HAL_RCC_OscConfig+0xec>
10001c80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c84:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001c88:	f003 0303 	and.w	r3, r3, #3
10001c8c:	2b01      	cmp	r3, #1
10001c8e:	d117      	bne.n	10001cc0 <HAL_RCC_OscConfig+0x10c>
10001c90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c94:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001c98:	f003 0302 	and.w	r3, r3, #2
10001c9c:	2b02      	cmp	r3, #2
10001c9e:	d10f      	bne.n	10001cc0 <HAL_RCC_OscConfig+0x10c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10001ca0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ca4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001cac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001cb0:	d112      	bne.n	10001cd8 <HAL_RCC_OscConfig+0x124>
10001cb2:	687b      	ldr	r3, [r7, #4]
10001cb4:	685b      	ldr	r3, [r3, #4]
10001cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001cba:	d00d      	beq.n	10001cd8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
10001cbc:	2301      	movs	r3, #1
10001cbe:	e2a5      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Configure HSE oscillator */
      result = HAL_RCC_HSEConfig(RCC_OscInitStruct->HSEState);
10001cc0:	687b      	ldr	r3, [r7, #4]
10001cc2:	685b      	ldr	r3, [r3, #4]
10001cc4:	4618      	mov	r0, r3
10001cc6:	f000 faa7 	bl	10002218 <HAL_RCC_HSEConfig>
10001cca:	4603      	mov	r3, r0
10001ccc:	73fb      	strb	r3, [r7, #15]
      if (result != HAL_OK)
10001cce:	7bfb      	ldrb	r3, [r7, #15]
10001cd0:	2b00      	cmp	r3, #0
10001cd2:	d002      	beq.n	10001cda <HAL_RCC_OscConfig+0x126>
      {
        return result;
10001cd4:	7bfb      	ldrb	r3, [r7, #15]
10001cd6:	e299      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
10001cd8:	bf00      	nop
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
10001cda:	687b      	ldr	r3, [r7, #4]
10001cdc:	681b      	ldr	r3, [r3, #0]
10001cde:	f003 0302 	and.w	r3, r3, #2
10001ce2:	2b00      	cmp	r3, #0
10001ce4:	f000 814e 	beq.w	10001f84 <HAL_RCC_OscConfig+0x3d0>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDivValue));

    /* When the HSI is used as system clock it will not disabled */
    if (IS_HSI_IN_USE())
10001ce8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cec:	6a1b      	ldr	r3, [r3, #32]
10001cee:	f003 0303 	and.w	r3, r3, #3
10001cf2:	2b00      	cmp	r3, #0
10001cf4:	d107      	bne.n	10001d06 <HAL_RCC_OscConfig+0x152>
10001cf6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cfa:	6a1b      	ldr	r3, [r3, #32]
10001cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d04:	d055      	beq.n	10001db2 <HAL_RCC_OscConfig+0x1fe>
10001d06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001d0c:	f003 0307 	and.w	r3, r3, #7
10001d10:	2b00      	cmp	r3, #0
10001d12:	d107      	bne.n	10001d24 <HAL_RCC_OscConfig+0x170>
10001d14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10001d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d22:	d046      	beq.n	10001db2 <HAL_RCC_OscConfig+0x1fe>
10001d24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001d2a:	f003 0303 	and.w	r3, r3, #3
10001d2e:	2b00      	cmp	r3, #0
10001d30:	d107      	bne.n	10001d42 <HAL_RCC_OscConfig+0x18e>
10001d32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001d38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001d40:	d037      	beq.n	10001db2 <HAL_RCC_OscConfig+0x1fe>
10001d42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001d48:	f003 0303 	and.w	r3, r3, #3
10001d4c:	2b00      	cmp	r3, #0
10001d4e:	d10f      	bne.n	10001d70 <HAL_RCC_OscConfig+0x1bc>
10001d50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001d58:	f003 0302 	and.w	r3, r3, #2
10001d5c:	2b02      	cmp	r3, #2
10001d5e:	d028      	beq.n	10001db2 <HAL_RCC_OscConfig+0x1fe>
10001d60:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001d68:	f003 0302 	and.w	r3, r3, #2
10001d6c:	2b02      	cmp	r3, #2
10001d6e:	d020      	beq.n	10001db2 <HAL_RCC_OscConfig+0x1fe>
10001d70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d74:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001d78:	f003 0303 	and.w	r3, r3, #3
10001d7c:	2b00      	cmp	r3, #0
10001d7e:	d107      	bne.n	10001d90 <HAL_RCC_OscConfig+0x1dc>
10001d80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d84:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001d88:	f003 0302 	and.w	r3, r3, #2
10001d8c:	2b02      	cmp	r3, #2
10001d8e:	d010      	beq.n	10001db2 <HAL_RCC_OscConfig+0x1fe>
10001d90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d94:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001d98:	f003 0303 	and.w	r3, r3, #3
10001d9c:	2b00      	cmp	r3, #0
10001d9e:	f040 8088 	bne.w	10001eb2 <HAL_RCC_OscConfig+0x2fe>
10001da2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001da6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001daa:	f003 0302 	and.w	r3, r3, #2
10001dae:	2b02      	cmp	r3, #2
10001db0:	d17f      	bne.n	10001eb2 <HAL_RCC_OscConfig+0x2fe>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10001db2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001db6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001dba:	f003 0301 	and.w	r3, r3, #1
10001dbe:	2b01      	cmp	r3, #1
10001dc0:	d105      	bne.n	10001dce <HAL_RCC_OscConfig+0x21a>
10001dc2:	687b      	ldr	r3, [r7, #4]
10001dc4:	68db      	ldr	r3, [r3, #12]
10001dc6:	2b01      	cmp	r3, #1
10001dc8:	d001      	beq.n	10001dce <HAL_RCC_OscConfig+0x21a>
      {
        return HAL_ERROR;
10001dca:	2301      	movs	r3, #1
10001dcc:	e21e      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10001dce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dd2:	699b      	ldr	r3, [r3, #24]
10001dd4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10001dd8:	687b      	ldr	r3, [r7, #4]
10001dda:	691b      	ldr	r3, [r3, #16]
10001ddc:	021b      	lsls	r3, r3, #8
10001dde:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001de2:	4313      	orrs	r3, r2
10001de4:	618b      	str	r3, [r1, #24]

        /* It is not allowed to change HSIDIV if HSI is currently used as
         * reference clock for a PLL
         */
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10001de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001dec:	f003 0303 	and.w	r3, r3, #3
10001df0:	2b00      	cmp	r3, #0
10001df2:	d10f      	bne.n	10001e14 <HAL_RCC_OscConfig+0x260>
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10001df4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10001dfc:	f003 0302 	and.w	r3, r3, #2
        if (((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) ||
10001e00:	2b02      	cmp	r3, #2
10001e02:	d047      	beq.n	10001e94 <HAL_RCC_OscConfig+0x2e0>
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10001e04:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10001e0c:	f003 0302 	and.w	r3, r3, #2
             ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY)) &&
10001e10:	2b02      	cmp	r3, #2
10001e12:	d03f      	beq.n	10001e94 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10001e14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e18:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001e1c:	f003 0303 	and.w	r3, r3, #3
              ((!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY))))) &&
10001e20:	2b00      	cmp	r3, #0
10001e22:	d107      	bne.n	10001e34 <HAL_RCC_OscConfig+0x280>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10001e24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e28:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001e2c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL3_SOURCE() != RCC_PLL3SOURCE_HSI) ||
10001e30:	2b02      	cmp	r3, #2
10001e32:	d02f      	beq.n	10001e94 <HAL_RCC_OscConfig+0x2e0>
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10001e34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e38:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001e3c:	f003 0303 	and.w	r3, r3, #3
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY))) &&
10001e40:	2b00      	cmp	r3, #0
10001e42:	d107      	bne.n	10001e54 <HAL_RCC_OscConfig+0x2a0>
             (!__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY))))
10001e44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e48:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001e4c:	f003 0302 	and.w	r3, r3, #2
            ((__HAL_RCC_GET_PLL4_SOURCE() != RCC_PLL4SOURCE_HSI) ||
10001e50:	2b02      	cmp	r3, #2
10001e52:	d01f      	beq.n	10001e94 <HAL_RCC_OscConfig+0x2e0>
        {
          /* Update HSIDIV value */
          __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10001e54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e58:	699b      	ldr	r3, [r3, #24]
10001e5a:	f023 0203 	bic.w	r2, r3, #3
10001e5e:	687b      	ldr	r3, [r7, #4]
10001e60:	695b      	ldr	r3, [r3, #20]
10001e62:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001e66:	4313      	orrs	r3, r2
10001e68:	618b      	str	r3, [r1, #24]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
10001e6a:	f7ff fb49 	bl	10001500 <HAL_GetTick>
10001e6e:	60b8      	str	r0, [r7, #8]

          /* Wait till HSIDIV is ready */
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001e70:	e008      	b.n	10001e84 <HAL_RCC_OscConfig+0x2d0>
          {
            if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10001e72:	f7ff fb45 	bl	10001500 <HAL_GetTick>
10001e76:	4602      	mov	r2, r0
10001e78:	68bb      	ldr	r3, [r7, #8]
10001e7a:	1ad3      	subs	r3, r2, r3
10001e7c:	2b64      	cmp	r3, #100	; 0x64
10001e7e:	d901      	bls.n	10001e84 <HAL_RCC_OscConfig+0x2d0>
            {
              return HAL_TIMEOUT;
10001e80:	2303      	movs	r3, #3
10001e82:	e1c3      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
          while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001e88:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001e8c:	f003 0304 	and.w	r3, r3, #4
10001e90:	2b04      	cmp	r3, #4
10001e92:	d1ee      	bne.n	10001e72 <HAL_RCC_OscConfig+0x2be>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  HAL_RCC_GetSystemCoreClockFreq();
10001e94:	f001 fa6a 	bl	1000336c <HAL_RCC_GetSystemCoreClockFreq>
10001e98:	4603      	mov	r3, r0
10001e9a:	4ab3      	ldr	r2, [pc, #716]	; (10002168 <HAL_RCC_OscConfig+0x5b4>)
10001e9c:	6013      	str	r3, [r2, #0]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
10001e9e:	4bb3      	ldr	r3, [pc, #716]	; (1000216c <HAL_RCC_OscConfig+0x5b8>)
10001ea0:	681b      	ldr	r3, [r3, #0]
10001ea2:	4618      	mov	r0, r3
10001ea4:	f7ff fae2 	bl	1000146c <HAL_InitTick>
10001ea8:	4603      	mov	r3, r0
10001eaa:	2b00      	cmp	r3, #0
10001eac:	d069      	beq.n	10001f82 <HAL_RCC_OscConfig+0x3ce>
        {
          return HAL_ERROR;
10001eae:	2301      	movs	r3, #1
10001eb0:	e1ac      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
10001eb2:	687b      	ldr	r3, [r7, #4]
10001eb4:	68db      	ldr	r3, [r3, #12]
10001eb6:	2b00      	cmp	r3, #0
10001eb8:	d049      	beq.n	10001f4e <HAL_RCC_OscConfig+0x39a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
10001eba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ebe:	68db      	ldr	r3, [r3, #12]
10001ec0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10001ec4:	f043 0301 	orr.w	r3, r3, #1
10001ec8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001eca:	f7ff fb19 	bl	10001500 <HAL_GetTick>
10001ece:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001ed0:	e008      	b.n	10001ee4 <HAL_RCC_OscConfig+0x330>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10001ed2:	f7ff fb15 	bl	10001500 <HAL_GetTick>
10001ed6:	4602      	mov	r2, r0
10001ed8:	68bb      	ldr	r3, [r7, #8]
10001eda:	1ad3      	subs	r3, r2, r3
10001edc:	2b64      	cmp	r3, #100	; 0x64
10001ede:	d901      	bls.n	10001ee4 <HAL_RCC_OscConfig+0x330>
          {
            return HAL_TIMEOUT;
10001ee0:	2303      	movs	r3, #3
10001ee2:	e193      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10001ee4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ee8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001eec:	f003 0301 	and.w	r3, r3, #1
10001ef0:	2b01      	cmp	r3, #1
10001ef2:	d1ee      	bne.n	10001ed2 <HAL_RCC_OscConfig+0x31e>
          }
        }

        /* Update HSIDIV value */
        __HAL_RCC_HSI_DIV(RCC_OscInitStruct->HSIDivValue);
10001ef4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ef8:	699b      	ldr	r3, [r3, #24]
10001efa:	f023 0203 	bic.w	r2, r3, #3
10001efe:	687b      	ldr	r3, [r7, #4]
10001f00:	695b      	ldr	r3, [r3, #20]
10001f02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001f06:	4313      	orrs	r3, r2
10001f08:	618b      	str	r3, [r1, #24]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001f0a:	f7ff faf9 	bl	10001500 <HAL_GetTick>
10001f0e:	60b8      	str	r0, [r7, #8]

        /* Wait till HSIDIV is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001f10:	e008      	b.n	10001f24 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10001f12:	f7ff faf5 	bl	10001500 <HAL_GetTick>
10001f16:	4602      	mov	r2, r0
10001f18:	68bb      	ldr	r3, [r7, #8]
10001f1a:	1ad3      	subs	r3, r2, r3
10001f1c:	2b64      	cmp	r3, #100	; 0x64
10001f1e:	d901      	bls.n	10001f24 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
10001f20:	2303      	movs	r3, #3
10001f22:	e173      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) == RESET)
10001f24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f28:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001f2c:	f003 0304 	and.w	r3, r3, #4
10001f30:	2b04      	cmp	r3, #4
10001f32:	d1ee      	bne.n	10001f12 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
10001f34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f38:	699b      	ldr	r3, [r3, #24]
10001f3a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
10001f3e:	687b      	ldr	r3, [r7, #4]
10001f40:	691b      	ldr	r3, [r3, #16]
10001f42:	021b      	lsls	r3, r3, #8
10001f44:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10001f48:	4313      	orrs	r3, r2
10001f4a:	618b      	str	r3, [r1, #24]
10001f4c:	e01a      	b.n	10001f84 <HAL_RCC_OscConfig+0x3d0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
10001f4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f52:	2201      	movs	r2, #1
10001f54:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10001f56:	f7ff fad3 	bl	10001500 <HAL_GetTick>
10001f5a:	60b8      	str	r0, [r7, #8]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10001f5c:	e008      	b.n	10001f70 <HAL_RCC_OscConfig+0x3bc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
10001f5e:	f7ff facf 	bl	10001500 <HAL_GetTick>
10001f62:	4602      	mov	r2, r0
10001f64:	68bb      	ldr	r3, [r7, #8]
10001f66:	1ad3      	subs	r3, r2, r3
10001f68:	2b64      	cmp	r3, #100	; 0x64
10001f6a:	d901      	bls.n	10001f70 <HAL_RCC_OscConfig+0x3bc>
          {
            return HAL_TIMEOUT;
10001f6c:	2303      	movs	r3, #3
10001f6e:	e14d      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
10001f70:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f74:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001f78:	f003 0301 	and.w	r3, r3, #1
10001f7c:	2b01      	cmp	r3, #1
10001f7e:	d0ee      	beq.n	10001f5e <HAL_RCC_OscConfig+0x3aa>
10001f80:	e000      	b.n	10001f84 <HAL_RCC_OscConfig+0x3d0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
10001f82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
10001f84:	687b      	ldr	r3, [r7, #4]
10001f86:	681b      	ldr	r3, [r3, #0]
10001f88:	f003 0310 	and.w	r3, r3, #16
10001f8c:	2b00      	cmp	r3, #0
10001f8e:	f000 8091 	beq.w	100020b4 <HAL_RCC_OscConfig+0x500>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    if (IS_CSI_IN_USE())
10001f92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001f96:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001f9a:	f003 0303 	and.w	r3, r3, #3
10001f9e:	2b02      	cmp	r3, #2
10001fa0:	d107      	bne.n	10001fb2 <HAL_RCC_OscConfig+0x3fe>
10001fa2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fa6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10001faa:	f003 0302 	and.w	r3, r3, #2
10001fae:	2b02      	cmp	r3, #2
10001fb0:	d01e      	beq.n	10001ff0 <HAL_RCC_OscConfig+0x43c>
10001fb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001fb8:	f003 0303 	and.w	r3, r3, #3
10001fbc:	2b02      	cmp	r3, #2
10001fbe:	d107      	bne.n	10001fd0 <HAL_RCC_OscConfig+0x41c>
10001fc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001fc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10001fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10001fce:	d00f      	beq.n	10001ff0 <HAL_RCC_OscConfig+0x43c>
10001fd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fd4:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10001fd8:	f003 0303 	and.w	r3, r3, #3
10001fdc:	2b02      	cmp	r3, #2
10001fde:	d122      	bne.n	10002026 <HAL_RCC_OscConfig+0x472>
10001fe0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001fe4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10001fe8:	f003 0302 	and.w	r3, r3, #2
10001fec:	2b02      	cmp	r3, #2
10001fee:	d11a      	bne.n	10002026 <HAL_RCC_OscConfig+0x472>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10001ff0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ff4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001ff8:	f003 0310 	and.w	r3, r3, #16
10001ffc:	2b10      	cmp	r3, #16
10001ffe:	d105      	bne.n	1000200c <HAL_RCC_OscConfig+0x458>
10002000:	687b      	ldr	r3, [r7, #4]
10002002:	69db      	ldr	r3, [r3, #28]
10002004:	2b10      	cmp	r3, #16
10002006:	d001      	beq.n	1000200c <HAL_RCC_OscConfig+0x458>
      {
        return HAL_ERROR;
10002008:	2301      	movs	r3, #1
1000200a:	e0ff      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
1000200c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002010:	69db      	ldr	r3, [r3, #28]
10002012:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10002016:	687b      	ldr	r3, [r7, #4]
10002018:	6a1b      	ldr	r3, [r3, #32]
1000201a:	021b      	lsls	r3, r3, #8
1000201c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002020:	4313      	orrs	r3, r2
10002022:	61cb      	str	r3, [r1, #28]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
10002024:	e046      	b.n	100020b4 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
10002026:	687b      	ldr	r3, [r7, #4]
10002028:	69db      	ldr	r3, [r3, #28]
1000202a:	2b00      	cmp	r3, #0
1000202c:	d029      	beq.n	10002082 <HAL_RCC_OscConfig+0x4ce>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
1000202e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002032:	68db      	ldr	r3, [r3, #12]
10002034:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002038:	f043 0310 	orr.w	r3, r3, #16
1000203c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000203e:	f7ff fa5f 	bl	10001500 <HAL_GetTick>
10002042:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002044:	e008      	b.n	10002058 <HAL_RCC_OscConfig+0x4a4>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10002046:	f7ff fa5b 	bl	10001500 <HAL_GetTick>
1000204a:	4602      	mov	r2, r0
1000204c:	68bb      	ldr	r3, [r7, #8]
1000204e:	1ad3      	subs	r3, r2, r3
10002050:	2b64      	cmp	r3, #100	; 0x64
10002052:	d901      	bls.n	10002058 <HAL_RCC_OscConfig+0x4a4>
          {
            return HAL_TIMEOUT;
10002054:	2303      	movs	r3, #3
10002056:	e0d9      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002058:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000205c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002060:	f003 0310 	and.w	r3, r3, #16
10002064:	2b10      	cmp	r3, #16
10002066:	d1ee      	bne.n	10002046 <HAL_RCC_OscConfig+0x492>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
10002068:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000206c:	69db      	ldr	r3, [r3, #28]
1000206e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
10002072:	687b      	ldr	r3, [r7, #4]
10002074:	6a1b      	ldr	r3, [r3, #32]
10002076:	021b      	lsls	r3, r3, #8
10002078:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000207c:	4313      	orrs	r3, r2
1000207e:	61cb      	str	r3, [r1, #28]
10002080:	e018      	b.n	100020b4 <HAL_RCC_OscConfig+0x500>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
10002082:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002086:	2210      	movs	r2, #16
10002088:	611a      	str	r2, [r3, #16]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000208a:	f7ff fa39 	bl	10001500 <HAL_GetTick>
1000208e:	60b8      	str	r0, [r7, #8]

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
10002090:	e008      	b.n	100020a4 <HAL_RCC_OscConfig+0x4f0>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
10002092:	f7ff fa35 	bl	10001500 <HAL_GetTick>
10002096:	4602      	mov	r2, r0
10002098:	68bb      	ldr	r3, [r7, #8]
1000209a:	1ad3      	subs	r3, r2, r3
1000209c:	2b64      	cmp	r3, #100	; 0x64
1000209e:	d901      	bls.n	100020a4 <HAL_RCC_OscConfig+0x4f0>
          {
            return HAL_TIMEOUT;
100020a0:	2303      	movs	r3, #3
100020a2:	e0b3      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != RESET)
100020a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020a8:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100020ac:	f003 0310 	and.w	r3, r3, #16
100020b0:	2b10      	cmp	r3, #16
100020b2:	d0ee      	beq.n	10002092 <HAL_RCC_OscConfig+0x4de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
100020b4:	687b      	ldr	r3, [r7, #4]
100020b6:	681b      	ldr	r3, [r3, #0]
100020b8:	f003 0308 	and.w	r3, r3, #8
100020bc:	2b00      	cmp	r3, #0
100020be:	d042      	beq.n	10002146 <HAL_RCC_OscConfig+0x592>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
100020c0:	687b      	ldr	r3, [r7, #4]
100020c2:	699b      	ldr	r3, [r3, #24]
100020c4:	2b00      	cmp	r3, #0
100020c6:	d01f      	beq.n	10002108 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
100020c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020cc:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100020d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100020d4:	f043 0301 	orr.w	r3, r3, #1
100020d8:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
100020dc:	f7ff fa10 	bl	10001500 <HAL_GetTick>
100020e0:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100020e2:	e008      	b.n	100020f6 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
100020e4:	f7ff fa0c 	bl	10001500 <HAL_GetTick>
100020e8:	4602      	mov	r2, r0
100020ea:	68bb      	ldr	r3, [r7, #8]
100020ec:	1ad3      	subs	r3, r2, r3
100020ee:	2b64      	cmp	r3, #100	; 0x64
100020f0:	d901      	bls.n	100020f6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
100020f2:	2303      	movs	r3, #3
100020f4:	e08a      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
100020f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100020fa:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100020fe:	f003 0302 	and.w	r3, r3, #2
10002102:	2b02      	cmp	r3, #2
10002104:	d1ee      	bne.n	100020e4 <HAL_RCC_OscConfig+0x530>
10002106:	e01e      	b.n	10002146 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
10002108:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000210c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
10002110:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002114:	f023 0301 	bic.w	r3, r3, #1
10002118:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
1000211c:	f7ff f9f0 	bl	10001500 <HAL_GetTick>
10002120:	60b8      	str	r0, [r7, #8]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10002122:	e008      	b.n	10002136 <HAL_RCC_OscConfig+0x582>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
10002124:	f7ff f9ec 	bl	10001500 <HAL_GetTick>
10002128:	4602      	mov	r2, r0
1000212a:	68bb      	ldr	r3, [r7, #8]
1000212c:	1ad3      	subs	r3, r2, r3
1000212e:	2b64      	cmp	r3, #100	; 0x64
10002130:	d901      	bls.n	10002136 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
10002132:	2303      	movs	r3, #3
10002134:	e06a      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
10002136:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000213a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000213e:	f003 0302 	and.w	r3, r3, #2
10002142:	2b02      	cmp	r3, #2
10002144:	d0ee      	beq.n	10002124 <HAL_RCC_OscConfig+0x570>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
10002146:	687b      	ldr	r3, [r7, #4]
10002148:	681b      	ldr	r3, [r3, #0]
1000214a:	f003 0304 	and.w	r3, r3, #4
1000214e:	2b00      	cmp	r3, #0
10002150:	d02b      	beq.n	100021aa <HAL_RCC_OscConfig+0x5f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
10002152:	4b07      	ldr	r3, [pc, #28]	; (10002170 <HAL_RCC_OscConfig+0x5bc>)
10002154:	681b      	ldr	r3, [r3, #0]
10002156:	4a06      	ldr	r2, [pc, #24]	; (10002170 <HAL_RCC_OscConfig+0x5bc>)
10002158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
1000215c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
1000215e:	f7ff f9cf 	bl	10001500 <HAL_GetTick>
10002162:	60b8      	str	r0, [r7, #8]

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10002164:	e00f      	b.n	10002186 <HAL_RCC_OscConfig+0x5d2>
10002166:	bf00      	nop
10002168:	10020000 	.word	0x10020000
1000216c:	10020004 	.word	0x10020004
10002170:	50001000 	.word	0x50001000
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
10002174:	f7ff f9c4 	bl	10001500 <HAL_GetTick>
10002178:	4602      	mov	r2, r0
1000217a:	68bb      	ldr	r3, [r7, #8]
1000217c:	1ad3      	subs	r3, r2, r3
1000217e:	2b64      	cmp	r3, #100	; 0x64
10002180:	d901      	bls.n	10002186 <HAL_RCC_OscConfig+0x5d2>
      {
        return HAL_TIMEOUT;
10002182:	2303      	movs	r3, #3
10002184:	e042      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
10002186:	4b23      	ldr	r3, [pc, #140]	; (10002214 <HAL_RCC_OscConfig+0x660>)
10002188:	681b      	ldr	r3, [r3, #0]
1000218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000218e:	2b00      	cmp	r3, #0
10002190:	d0f0      	beq.n	10002174 <HAL_RCC_OscConfig+0x5c0>
      }
    }

    result = HAL_RCC_LSEConfig(RCC_OscInitStruct->LSEState);
10002192:	687b      	ldr	r3, [r7, #4]
10002194:	689b      	ldr	r3, [r3, #8]
10002196:	4618      	mov	r0, r3
10002198:	f000 f8a9 	bl	100022ee <HAL_RCC_LSEConfig>
1000219c:	4603      	mov	r3, r0
1000219e:	73fb      	strb	r3, [r7, #15]
    if (result != HAL_OK)
100021a0:	7bfb      	ldrb	r3, [r7, #15]
100021a2:	2b00      	cmp	r3, #0
100021a4:	d001      	beq.n	100021aa <HAL_RCC_OscConfig+0x5f6>
    {
      return result;
100021a6:	7bfb      	ldrb	r3, [r7, #15]
100021a8:	e030      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
  } /* Close LSE Configuration */

  /*-------------------------------- PLL Configuration -----------------------*/

  /* Configure PLL1 */
  result = RCC_PLL1_Config(&(RCC_OscInitStruct->PLL));
100021aa:	687b      	ldr	r3, [r7, #4]
100021ac:	3324      	adds	r3, #36	; 0x24
100021ae:	4618      	mov	r0, r3
100021b0:	f000 f91a 	bl	100023e8 <RCC_PLL1_Config>
100021b4:	4603      	mov	r3, r0
100021b6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100021b8:	7bfb      	ldrb	r3, [r7, #15]
100021ba:	2b00      	cmp	r3, #0
100021bc:	d001      	beq.n	100021c2 <HAL_RCC_OscConfig+0x60e>
  {
    return result;
100021be:	7bfb      	ldrb	r3, [r7, #15]
100021c0:	e024      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL2 */
  result = RCCEx_PLL2_Config(&(RCC_OscInitStruct->PLL2));
100021c2:	687b      	ldr	r3, [r7, #4]
100021c4:	3360      	adds	r3, #96	; 0x60
100021c6:	4618      	mov	r0, r3
100021c8:	f001 f96c 	bl	100034a4 <RCCEx_PLL2_Config>
100021cc:	4603      	mov	r3, r0
100021ce:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100021d0:	7bfb      	ldrb	r3, [r7, #15]
100021d2:	2b00      	cmp	r3, #0
100021d4:	d001      	beq.n	100021da <HAL_RCC_OscConfig+0x626>
  {
    return result;
100021d6:	7bfb      	ldrb	r3, [r7, #15]
100021d8:	e018      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL3 */
  result = RCCEx_PLL3_Config(&(RCC_OscInitStruct->PLL3));
100021da:	687b      	ldr	r3, [r7, #4]
100021dc:	339c      	adds	r3, #156	; 0x9c
100021de:	4618      	mov	r0, r3
100021e0:	f001 fae2 	bl	100037a8 <RCCEx_PLL3_Config>
100021e4:	4603      	mov	r3, r0
100021e6:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
100021e8:	7bfb      	ldrb	r3, [r7, #15]
100021ea:	2b00      	cmp	r3, #0
100021ec:	d001      	beq.n	100021f2 <HAL_RCC_OscConfig+0x63e>
  {
    return result;
100021ee:	7bfb      	ldrb	r3, [r7, #15]
100021f0:	e00c      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
  }

  /* Configure PLL4 */
  result = RCCEx_PLL4_Config(&(RCC_OscInitStruct->PLL4));
100021f2:	687b      	ldr	r3, [r7, #4]
100021f4:	33d8      	adds	r3, #216	; 0xd8
100021f6:	4618      	mov	r0, r3
100021f8:	f001 fc40 	bl	10003a7c <RCCEx_PLL4_Config>
100021fc:	4603      	mov	r3, r0
100021fe:	73fb      	strb	r3, [r7, #15]
  if (result != HAL_OK)
10002200:	7bfb      	ldrb	r3, [r7, #15]
10002202:	2b00      	cmp	r3, #0
10002204:	d001      	beq.n	1000220a <HAL_RCC_OscConfig+0x656>
  {
    return result;
10002206:	7bfb      	ldrb	r3, [r7, #15]
10002208:	e000      	b.n	1000220c <HAL_RCC_OscConfig+0x658>
  }

  return HAL_OK;
1000220a:	2300      	movs	r3, #0
}
1000220c:	4618      	mov	r0, r3
1000220e:	3710      	adds	r7, #16
10002210:	46bd      	mov	sp, r7
10002212:	bd80      	pop	{r7, pc}
10002214:	50001000 	.word	0x50001000

10002218 <HAL_RCC_HSEConfig>:
  *               @arg RCC_HSE_BYPASS_DIG: HSE oscillator bypassed with external
  *                    clock using a full-swing digital signal provided to OSC_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_HSEConfig(uint32_t State)
{
10002218:	b580      	push	{r7, lr}
1000221a:	b084      	sub	sp, #16
1000221c:	af00      	add	r7, sp, #0
1000221e:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_HSE(State));

  /* Disable HSEON before configuring the HSE --------------*/
  WRITE_REG(RCC->OCENCLRR, RCC_OCENCLRR_HSEON);
10002220:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002224:	f44f 7280 	mov.w	r2, #256	; 0x100
10002228:	611a      	str	r2, [r3, #16]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000222a:	f7ff f969 	bl	10001500 <HAL_GetTick>
1000222e:	60f8      	str	r0, [r7, #12]

  /* Wait till HSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10002230:	e008      	b.n	10002244 <HAL_RCC_HSEConfig+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
10002232:	f7ff f965 	bl	10001500 <HAL_GetTick>
10002236:	4602      	mov	r2, r0
10002238:	68fb      	ldr	r3, [r7, #12]
1000223a:	1ad3      	subs	r3, r2, r3
1000223c:	2b64      	cmp	r3, #100	; 0x64
1000223e:	d901      	bls.n	10002244 <HAL_RCC_HSEConfig+0x2c>
    {
      return HAL_TIMEOUT;
10002240:	2303      	movs	r3, #3
10002242:	e050      	b.n	100022e6 <HAL_RCC_HSEConfig+0xce>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
10002244:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002248:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
1000224c:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002254:	d0ed      	beq.n	10002232 <HAL_RCC_HSEConfig+0x1a>
    }
  }

  /* Clear remaining bits */
  WRITE_REG(RCC->OCENCLRR, (RCC_OCENCLRR_DIGBYP | RCC_OCENSETR_HSEBYP));
10002256:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000225a:	f44f 6290 	mov.w	r2, #1152	; 0x480
1000225e:	611a      	str	r2, [r3, #16]

  /* Enable HSE if needed ---------------------------------------*/
  if (State != RCC_HSE_OFF)
10002260:	687b      	ldr	r3, [r7, #4]
10002262:	2b00      	cmp	r3, #0
10002264:	d03e      	beq.n	100022e4 <HAL_RCC_HSEConfig+0xcc>
  {
    if (State == RCC_HSE_BYPASS)
10002266:	687b      	ldr	r3, [r7, #4]
10002268:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
1000226c:	d108      	bne.n	10002280 <HAL_RCC_HSEConfig+0x68>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
1000226e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002272:	68db      	ldr	r3, [r3, #12]
10002274:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002278:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
1000227c:	60d3      	str	r3, [r2, #12]
1000227e:	e013      	b.n	100022a8 <HAL_RCC_HSEConfig+0x90>
    }
    else if (State == RCC_HSE_BYPASS_DIG)
10002280:	687b      	ldr	r3, [r7, #4]
10002282:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
10002286:	d10f      	bne.n	100022a8 <HAL_RCC_HSEConfig+0x90>
    {
      SET_BIT(RCC->OCENSETR, RCC_OCENCLRR_DIGBYP);
10002288:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000228c:	68db      	ldr	r3, [r3, #12]
1000228e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
10002296:	60d3      	str	r3, [r2, #12]
      SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEBYP);
10002298:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000229c:	68db      	ldr	r3, [r3, #12]
1000229e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100022a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
100022a6:	60d3      	str	r3, [r2, #12]
    }

    /* Enable oscillator */
    SET_BIT(RCC->OCENSETR, RCC_OCENSETR_HSEON);
100022a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022ac:	68db      	ldr	r3, [r3, #12]
100022ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100022b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100022b6:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100022b8:	f7ff f922 	bl	10001500 <HAL_GetTick>
100022bc:	60f8      	str	r0, [r7, #12]

    /* Wait till HSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100022be:	e008      	b.n	100022d2 <HAL_RCC_HSEConfig+0xba>
    {
      if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
100022c0:	f7ff f91e 	bl	10001500 <HAL_GetTick>
100022c4:	4602      	mov	r2, r0
100022c6:	68fb      	ldr	r3, [r7, #12]
100022c8:	1ad3      	subs	r3, r2, r3
100022ca:	2b64      	cmp	r3, #100	; 0x64
100022cc:	d901      	bls.n	100022d2 <HAL_RCC_HSEConfig+0xba>
      {
        return HAL_TIMEOUT;
100022ce:	2303      	movs	r3, #3
100022d0:	e009      	b.n	100022e6 <HAL_RCC_HSEConfig+0xce>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
100022d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022d6:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100022da:	f403 7380 	and.w	r3, r3, #256	; 0x100
100022de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100022e2:	d1ed      	bne.n	100022c0 <HAL_RCC_HSEConfig+0xa8>
      }
    }
  }

  return HAL_OK;
100022e4:	2300      	movs	r3, #0
}
100022e6:	4618      	mov	r0, r3
100022e8:	3710      	adds	r7, #16
100022ea:	46bd      	mov	sp, r7
100022ec:	bd80      	pop	{r7, pc}

100022ee <HAL_RCC_LSEConfig>:
  *            @arg RCC_LSE_BYPASS_DIG: LSE oscillator bypassed with external
  *                 clock using a full-swing digital signal provided to OSC32_IN
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_LSEConfig(uint32_t State)
{
100022ee:	b580      	push	{r7, lr}
100022f0:	b084      	sub	sp, #16
100022f2:	af00      	add	r7, sp, #0
100022f4:	6078      	str	r0, [r7, #4]

  /* Check parameter */
  assert_param(IS_RCC_LSE(State));

  /* Turning LSE off is needed before configuring */
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
100022f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100022fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100022fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002302:	f023 0301 	bic.w	r3, r3, #1
10002306:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
1000230a:	f7ff f8f9 	bl	10001500 <HAL_GetTick>
1000230e:	60f8      	str	r0, [r7, #12]

  /* Wait till LSE is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10002310:	e00a      	b.n	10002328 <HAL_RCC_LSEConfig+0x3a>
  {
    if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
10002312:	f7ff f8f5 	bl	10001500 <HAL_GetTick>
10002316:	4602      	mov	r2, r0
10002318:	68fb      	ldr	r3, [r7, #12]
1000231a:	1ad3      	subs	r3, r2, r3
1000231c:	f241 3288 	movw	r2, #5000	; 0x1388
10002320:	4293      	cmp	r3, r2
10002322:	d901      	bls.n	10002328 <HAL_RCC_LSEConfig+0x3a>
    {
      return HAL_TIMEOUT;
10002324:	2303      	movs	r3, #3
10002326:	e05b      	b.n	100023e0 <HAL_RCC_LSEConfig+0xf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
10002328:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000232c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10002330:	f003 0304 	and.w	r3, r3, #4
10002334:	2b04      	cmp	r3, #4
10002336:	d0ec      	beq.n	10002312 <HAL_RCC_LSEConfig+0x24>
    }
  }

  /* Clear remaining bits */
  CLEAR_BIT(RCC->BDCR, (RCC_BDCR_LSEBYP | RCC_BDCR_DIGBYP));
10002338:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000233c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10002340:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002344:	f023 030a 	bic.w	r3, r3, #10
10002348:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

  /* Enable LSE if needed */
  if (State != RCC_LSE_OFF)
1000234c:	687b      	ldr	r3, [r7, #4]
1000234e:	2b00      	cmp	r3, #0
10002350:	d045      	beq.n	100023de <HAL_RCC_LSEConfig+0xf0>
  {
    if (State == RCC_LSE_BYPASS)
10002352:	687b      	ldr	r3, [r7, #4]
10002354:	2b03      	cmp	r3, #3
10002356:	d10a      	bne.n	1000236e <HAL_RCC_LSEConfig+0x80>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10002358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000235c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10002360:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002364:	f043 0302 	orr.w	r3, r3, #2
10002368:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
1000236c:	e016      	b.n	1000239c <HAL_RCC_LSEConfig+0xae>
    }
    else if (State == RCC_LSE_BYPASS_DIG)
1000236e:	687b      	ldr	r3, [r7, #4]
10002370:	2b0b      	cmp	r3, #11
10002372:	d113      	bne.n	1000239c <HAL_RCC_LSEConfig+0xae>
    {
      SET_BIT(RCC->BDCR, RCC_BDCR_DIGBYP);
10002374:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002378:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000237c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002380:	f043 0308 	orr.w	r3, r3, #8
10002384:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
10002388:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000238c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10002390:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002394:	f043 0302 	orr.w	r3, r3, #2
10002398:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    }

    /* Enable oscillator */
    SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
1000239c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100023a4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100023a8:	f043 0301 	orr.w	r3, r3, #1
100023ac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100023b0:	f7ff f8a6 	bl	10001500 <HAL_GetTick>
100023b4:	60f8      	str	r0, [r7, #12]

    /* Wait till LSE is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100023b6:	e00a      	b.n	100023ce <HAL_RCC_LSEConfig+0xe0>
    {
      if ((HAL_GetTick() - tickstart) > LSE_TIMEOUT_VALUE)
100023b8:	f7ff f8a2 	bl	10001500 <HAL_GetTick>
100023bc:	4602      	mov	r2, r0
100023be:	68fb      	ldr	r3, [r7, #12]
100023c0:	1ad3      	subs	r3, r2, r3
100023c2:	f241 3288 	movw	r2, #5000	; 0x1388
100023c6:	4293      	cmp	r3, r2
100023c8:	d901      	bls.n	100023ce <HAL_RCC_LSEConfig+0xe0>
      {
        return HAL_TIMEOUT;
100023ca:	2303      	movs	r3, #3
100023cc:	e008      	b.n	100023e0 <HAL_RCC_LSEConfig+0xf2>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
100023ce:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100023d6:	f003 0304 	and.w	r3, r3, #4
100023da:	2b04      	cmp	r3, #4
100023dc:	d1ec      	bne.n	100023b8 <HAL_RCC_LSEConfig+0xca>
      }
    }
  } /* Enable LSE if needed */

  return HAL_OK;
100023de:	2300      	movs	r3, #0
}
100023e0:	4618      	mov	r0, r3
100023e2:	3710      	adds	r7, #16
100023e4:	46bd      	mov	sp, r7
100023e6:	bd80      	pop	{r7, pc}

100023e8 <RCC_PLL1_Config>:

HAL_StatusTypeDef RCC_PLL1_Config(RCC_PLLInitTypeDef *pll1)
{
100023e8:	b580      	push	{r7, lr}
100023ea:	b084      	sub	sp, #16
100023ec:	af00      	add	r7, sp, #0
100023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll1->PLLState));
  if ((pll1->PLLState) != RCC_PLL_NONE)
100023f0:	687b      	ldr	r3, [r7, #4]
100023f2:	681b      	ldr	r3, [r3, #0]
100023f4:	2b00      	cmp	r3, #0
100023f6:	f000 8174 	beq.w	100026e2 <RCC_PLL1_Config+0x2fa>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL1_IN_USE()) /* If not used then */
100023fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100023fe:	6a1b      	ldr	r3, [r3, #32]
10002400:	f003 0303 	and.w	r3, r3, #3
10002404:	2b02      	cmp	r3, #2
10002406:	d108      	bne.n	1000241a <RCC_PLL1_Config+0x32>
10002408:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000240c:	6a1b      	ldr	r3, [r3, #32]
1000240e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002416:	f000 8162 	beq.w	100026de <RCC_PLL1_Config+0x2f6>
1000241a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000241e:	6a1b      	ldr	r3, [r3, #32]
10002420:	f003 0303 	and.w	r3, r3, #3
10002424:	2b03      	cmp	r3, #3
10002426:	d108      	bne.n	1000243a <RCC_PLL1_Config+0x52>
10002428:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000242c:	6a1b      	ldr	r3, [r3, #32]
1000242e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002436:	f000 8152 	beq.w	100026de <RCC_PLL1_Config+0x2f6>
    {
      if ((pll1->PLLState) == RCC_PLL_ON)
1000243a:	687b      	ldr	r3, [r7, #4]
1000243c:	681b      	ldr	r3, [r3, #0]
1000243e:	2b02      	cmp	r3, #2
10002440:	f040 8123 	bne.w	1000268a <RCC_PLL1_Config+0x2a2>
        assert_param(IS_RCC_PLLP1_VALUE(pll1->PLLP));
        assert_param(IS_RCC_PLLQ1_VALUE(pll1->PLLQ));
        assert_param(IS_RCC_PLLR1_VALUE(pll1->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002444:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002448:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000244c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10002454:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the main PLL. */
        __HAL_RCC_PLL1_DISABLE();
10002458:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000245c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002460:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002464:	f023 0301 	bic.w	r3, r3, #1
10002468:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000246c:	f7ff f848 	bl	10001500 <HAL_GetTick>
10002470:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002472:	e008      	b.n	10002486 <RCC_PLL1_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002474:	f7ff f844 	bl	10001500 <HAL_GetTick>
10002478:	4602      	mov	r2, r0
1000247a:	68fb      	ldr	r3, [r7, #12]
1000247c:	1ad3      	subs	r3, r2, r3
1000247e:	2b64      	cmp	r3, #100	; 0x64
10002480:	d901      	bls.n	10002486 <RCC_PLL1_Config+0x9e>
          {
            return HAL_TIMEOUT;
10002482:	2303      	movs	r3, #3
10002484:	e12e      	b.n	100026e4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
10002486:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000248a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000248e:	f003 0302 	and.w	r3, r3, #2
10002492:	2b02      	cmp	r3, #2
10002494:	d0ee      	beq.n	10002474 <RCC_PLL1_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL2_IN_USE())
10002496:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000249c:	f003 0307 	and.w	r3, r3, #7
100024a0:	2b02      	cmp	r3, #2
100024a2:	d112      	bne.n	100024ca <RCC_PLL1_Config+0xe2>
100024a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100024aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100024ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100024b2:	d10a      	bne.n	100024ca <RCC_PLL1_Config+0xe2>
        {
          if (pll1->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
100024b4:	687b      	ldr	r3, [r7, #4]
100024b6:	685a      	ldr	r2, [r3, #4]
100024b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100024be:	f003 0303 	and.w	r3, r3, #3
100024c2:	429a      	cmp	r2, r3
100024c4:	d00c      	beq.n	100024e0 <RCC_PLL1_Config+0xf8>
          {
            return HAL_ERROR;
100024c6:	2301      	movs	r3, #1
100024c8:	e10c      	b.n	100026e4 <RCC_PLL1_Config+0x2fc>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll1->PLLSource);
100024ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100024d0:	f023 0203 	bic.w	r2, r3, #3
100024d4:	687b      	ldr	r3, [r7, #4]
100024d6:	685b      	ldr	r3, [r3, #4]
100024d8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100024dc:	4313      	orrs	r3, r2
100024de:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100024e0:	e008      	b.n	100024f4 <RCC_PLL1_Config+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100024e2:	f7ff f80d 	bl	10001500 <HAL_GetTick>
100024e6:	4602      	mov	r2, r0
100024e8:	68fb      	ldr	r3, [r7, #12]
100024ea:	1ad3      	subs	r3, r2, r3
100024ec:	2b64      	cmp	r3, #100	; 0x64
100024ee:	d901      	bls.n	100024f4 <RCC_PLL1_Config+0x10c>
          {
            return HAL_TIMEOUT;
100024f0:	2303      	movs	r3, #3
100024f2:	e0f7      	b.n	100026e4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL12SRCRDY) == RESET)
100024f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100024fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100024fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002502:	d1ee      	bne.n	100024e2 <RCC_PLL1_Config+0xfa>
          }
        }

        /* Configure the PLL1 multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(
10002504:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002508:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
1000250c:	4b77      	ldr	r3, [pc, #476]	; (100026ec <RCC_PLL1_Config+0x304>)
1000250e:	4013      	ands	r3, r2
10002510:	687a      	ldr	r2, [r7, #4]
10002512:	68d2      	ldr	r2, [r2, #12]
10002514:	1e51      	subs	r1, r2, #1
10002516:	687a      	ldr	r2, [r7, #4]
10002518:	6892      	ldr	r2, [r2, #8]
1000251a:	3a01      	subs	r2, #1
1000251c:	0412      	lsls	r2, r2, #16
1000251e:	430a      	orrs	r2, r1
10002520:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002524:	4313      	orrs	r3, r2
10002526:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
1000252a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10002532:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10002536:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
1000253a:	687a      	ldr	r2, [r7, #4]
1000253c:	6912      	ldr	r2, [r2, #16]
1000253e:	1e51      	subs	r1, r2, #1
10002540:	687a      	ldr	r2, [r7, #4]
10002542:	6952      	ldr	r2, [r2, #20]
10002544:	3a01      	subs	r2, #1
10002546:	0212      	lsls	r2, r2, #8
10002548:	4311      	orrs	r1, r2
1000254a:	687a      	ldr	r2, [r7, #4]
1000254c:	6992      	ldr	r2, [r2, #24]
1000254e:	3a01      	subs	r2, #1
10002550:	0412      	lsls	r2, r2, #16
10002552:	430a      	orrs	r2, r1
10002554:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002558:	4313      	orrs	r3, r2
1000255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
          pll1->PLLQ,
          pll1->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL1FRACV_DISABLE(); /*Set FRACLE to '0' */
1000255e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
10002566:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1000256e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll1->PLLMODE == RCC_PLL_INTEGER))
10002572:	687b      	ldr	r3, [r7, #4]
10002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002576:	2b02      	cmp	r3, #2
10002578:	d003      	beq.n	10002582 <RCC_PLL1_Config+0x19a>
1000257a:	687b      	ldr	r3, [r7, #4]
1000257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000257e:	2b00      	cmp	r3, #0
10002580:	d10c      	bne.n	1000259c <RCC_PLL1_Config+0x1b4>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL1FRACV_CONFIG(0U); /* Set FRACV to '0' */
10002582:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
1000258a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000258e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10002592:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10002596:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
1000259a:	e00f      	b.n	100025bc <RCC_PLL1_Config+0x1d4>
        }
        else
        {
          /* Configure PLL  PLL1FRACV  in fractional mode*/
          __HAL_RCC_PLL1FRACV_CONFIG(pll1->PLLFRACV);
1000259c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100025a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
100025a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
100025ac:	687a      	ldr	r2, [r7, #4]
100025ae:	6a12      	ldr	r2, [r2, #32]
100025b0:	00d2      	lsls	r2, r2, #3
100025b2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100025b6:	4313      	orrs	r3, r2
100025b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
        }
        __HAL_RCC_PLL1FRACV_ENABLE(); /* Set FRACLE to 1 */
100025bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
100025c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100025c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
100025cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c


        /* Configure the Spread Control */
        if (pll1->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
100025d0:	687b      	ldr	r3, [r7, #4]
100025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100025d4:	2b02      	cmp	r3, #2
100025d6:	d124      	bne.n	10002622 <RCC_PLL1_Config+0x23a>
          assert_param(IS_RCC_SSCG_MODE(pll1->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll1->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll1->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll1->MOD_PER));

          __HAL_RCC_PLL1CSGCONFIG(pll1->MOD_PER, pll1->TPDFN_DIS, pll1->RPDFN_DIS,
100025d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
100025e0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
100025e4:	687b      	ldr	r3, [r7, #4]
100025e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
100025e8:	687b      	ldr	r3, [r7, #4]
100025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100025ec:	4319      	orrs	r1, r3
100025ee:	687b      	ldr	r3, [r7, #4]
100025f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100025f2:	4319      	orrs	r1, r3
100025f4:	687b      	ldr	r3, [r7, #4]
100025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100025f8:	4319      	orrs	r1, r3
100025fa:	687b      	ldr	r3, [r7, #4]
100025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100025fe:	041b      	lsls	r3, r3, #16
10002600:	430b      	orrs	r3, r1
10002602:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002606:	4313      	orrs	r3, r2
10002608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
                                  pll1->SSCG_MODE, pll1->INC_STEP);

          __HAL_RCC_PLL1_SSMODE_ENABLE();
1000260c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002614:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002618:	f043 0304 	orr.w	r3, r3, #4
1000261c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
10002620:	e009      	b.n	10002636 <RCC_PLL1_Config+0x24e>
        }
        else
        {
          __HAL_RCC_PLL1_SSMODE_DISABLE();
10002622:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000262a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000262e:	f023 0304 	bic.w	r3, r3, #4
10002632:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        }

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
10002636:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000263a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000263e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002642:	f043 0301 	orr.w	r3, r3, #1
10002646:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000264a:	f7fe ff59 	bl	10001500 <HAL_GetTick>
1000264e:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002650:	e008      	b.n	10002664 <RCC_PLL1_Config+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10002652:	f7fe ff55 	bl	10001500 <HAL_GetTick>
10002656:	4602      	mov	r2, r0
10002658:	68fb      	ldr	r3, [r7, #12]
1000265a:	1ad3      	subs	r3, r2, r3
1000265c:	2b64      	cmp	r3, #100	; 0x64
1000265e:	d901      	bls.n	10002664 <RCC_PLL1_Config+0x27c>
          {
            return HAL_TIMEOUT;
10002660:	2303      	movs	r3, #3
10002662:	e03f      	b.n	100026e4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002664:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000266c:	f003 0302 	and.w	r3, r3, #2
10002670:	2b02      	cmp	r3, #2
10002672:	d1ee      	bne.n	10002652 <RCC_PLL1_Config+0x26a>
          }
        }
        /* Enable post-dividers */
        __HAL_RCC_PLL1CLKOUT_ENABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
10002674:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002678:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000267c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002680:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10002684:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      if ((pll1->PLLState) == RCC_PLL_ON)
10002688:	e02b      	b.n	100026e2 <RCC_PLL1_Config+0x2fa>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL1CLKOUT_DISABLE(RCC_PLL1_DIVP | RCC_PLL1_DIVQ | RCC_PLL1_DIVR);
1000268a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000268e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002692:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10002696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
1000269a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
1000269e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100026a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100026aa:	f023 0301 	bic.w	r3, r3, #1
100026ae:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100026b2:	f7fe ff25 	bl	10001500 <HAL_GetTick>
100026b6:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100026b8:	e008      	b.n	100026cc <RCC_PLL1_Config+0x2e4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100026ba:	f7fe ff21 	bl	10001500 <HAL_GetTick>
100026be:	4602      	mov	r2, r0
100026c0:	68fb      	ldr	r3, [r7, #12]
100026c2:	1ad3      	subs	r3, r2, r3
100026c4:	2b64      	cmp	r3, #100	; 0x64
100026c6:	d901      	bls.n	100026cc <RCC_PLL1_Config+0x2e4>
          {
            return HAL_TIMEOUT;
100026c8:	2303      	movs	r3, #3
100026ca:	e00b      	b.n	100026e4 <RCC_PLL1_Config+0x2fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) != RESET)
100026cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100026d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
100026d4:	f003 0302 	and.w	r3, r3, #2
100026d8:	2b02      	cmp	r3, #2
100026da:	d0ee      	beq.n	100026ba <RCC_PLL1_Config+0x2d2>
      if ((pll1->PLLState) == RCC_PLL_ON)
100026dc:	e001      	b.n	100026e2 <RCC_PLL1_Config+0x2fa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
100026de:	2301      	movs	r3, #1
100026e0:	e000      	b.n	100026e4 <RCC_PLL1_Config+0x2fc>
    }
  }
  return HAL_OK;
100026e2:	2300      	movs	r3, #0

}
100026e4:	4618      	mov	r0, r3
100026e6:	3710      	adds	r7, #16
100026e8:	46bd      	mov	sp, r7
100026ea:	bd80      	pop	{r7, pc}
100026ec:	ffc0fe00 	.word	0xffc0fe00

100026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
{
100026f0:	b580      	push	{r7, lr}
100026f2:	b084      	sub	sp, #16
100026f4:	af00      	add	r7, sp, #0
100026f6:	6078      	str	r0, [r7, #4]

  HAL_StatusTypeDef status = HAL_OK;
100026f8:	2300      	movs	r3, #0
100026fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
100026fc:	687b      	ldr	r3, [r7, #4]
100026fe:	2b00      	cmp	r3, #0
10002700:	d101      	bne.n	10002706 <HAL_RCC_ClockConfig+0x16>
  {
    return HAL_ERROR;
10002702:	2301      	movs	r3, #1
10002704:	e102      	b.n	1000290c <HAL_RCC_ClockConfig+0x21c>
  }

  assert_param(IS_RCC_CLOCKTYPETYPE(RCC_ClkInitStruct->ClockType));

  /* Configure MPU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_MPU) == RCC_CLOCKTYPE_MPU)
10002706:	687b      	ldr	r3, [r7, #4]
10002708:	681b      	ldr	r3, [r3, #0]
1000270a:	f003 0301 	and.w	r3, r3, #1
1000270e:	2b00      	cmp	r3, #0
10002710:	d00b      	beq.n	1000272a <HAL_RCC_ClockConfig+0x3a>
  {
    status = RCC_MPUConfig(&(RCC_ClkInitStruct->MPUInit));
10002712:	687b      	ldr	r3, [r7, #4]
10002714:	3304      	adds	r3, #4
10002716:	4618      	mov	r0, r3
10002718:	f000 f8fc 	bl	10002914 <RCC_MPUConfig>
1000271c:	4603      	mov	r3, r0
1000271e:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002720:	7bfb      	ldrb	r3, [r7, #15]
10002722:	2b00      	cmp	r3, #0
10002724:	d001      	beq.n	1000272a <HAL_RCC_ClockConfig+0x3a>
    {
      return status;
10002726:	7bfb      	ldrb	r3, [r7, #15]
10002728:	e0f0      	b.n	1000290c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure AXISS block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_ACLK) == RCC_CLOCKTYPE_ACLK)
1000272a:	687b      	ldr	r3, [r7, #4]
1000272c:	681b      	ldr	r3, [r3, #0]
1000272e:	f003 0302 	and.w	r3, r3, #2
10002732:	2b00      	cmp	r3, #0
10002734:	d00b      	beq.n	1000274e <HAL_RCC_ClockConfig+0x5e>
  {
    status = RCC_AXISSConfig(&(RCC_ClkInitStruct->AXISSInit));
10002736:	687b      	ldr	r3, [r7, #4]
10002738:	330c      	adds	r3, #12
1000273a:	4618      	mov	r0, r3
1000273c:	f000 f960 	bl	10002a00 <RCC_AXISSConfig>
10002740:	4603      	mov	r3, r0
10002742:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002744:	7bfb      	ldrb	r3, [r7, #15]
10002746:	2b00      	cmp	r3, #0
10002748:	d001      	beq.n	1000274e <HAL_RCC_ClockConfig+0x5e>
    {
      return status;
1000274a:	7bfb      	ldrb	r3, [r7, #15]
1000274c:	e0de      	b.n	1000290c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure MCU block if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
1000274e:	687b      	ldr	r3, [r7, #4]
10002750:	681b      	ldr	r3, [r3, #0]
10002752:	f003 0304 	and.w	r3, r3, #4
10002756:	2b00      	cmp	r3, #0
10002758:	d00b      	beq.n	10002772 <HAL_RCC_ClockConfig+0x82>
  {
    status = RCC_MCUConfig(&(RCC_ClkInitStruct->MCUInit));
1000275a:	687b      	ldr	r3, [r7, #4]
1000275c:	3314      	adds	r3, #20
1000275e:	4618      	mov	r0, r3
10002760:	f000 f9e6 	bl	10002b30 <RCC_MCUConfig>
10002764:	4603      	mov	r3, r0
10002766:	73fb      	strb	r3, [r7, #15]
    if (status  != HAL_OK)
10002768:	7bfb      	ldrb	r3, [r7, #15]
1000276a:	2b00      	cmp	r3, #0
1000276c:	d001      	beq.n	10002772 <HAL_RCC_ClockConfig+0x82>
    {
      return status;
1000276e:	7bfb      	ldrb	r3, [r7, #15]
10002770:	e0cc      	b.n	1000290c <HAL_RCC_ClockConfig+0x21c>
    }
  }

  /* Configure APB4 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
10002772:	687b      	ldr	r3, [r7, #4]
10002774:	681b      	ldr	r3, [r3, #0]
10002776:	f003 0308 	and.w	r3, r3, #8
1000277a:	2b00      	cmp	r3, #0
1000277c:	d020      	beq.n	100027c0 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_APB4DIV(RCC_ClkInitStruct->APB4_Div));
    /* Set APB4 division factor */
    __HAL_RCC_APB4_DIV(RCC_ClkInitStruct->APB4_Div);
1000277e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10002784:	f023 0207 	bic.w	r2, r3, #7
10002788:	687b      	ldr	r3, [r7, #4]
1000278a:	69db      	ldr	r3, [r3, #28]
1000278c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002790:	4313      	orrs	r3, r2
10002792:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002794:	f7fe feb4 	bl	10001500 <HAL_GetTick>
10002798:	60b8      	str	r0, [r7, #8]

    /* Wait till APB4 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
1000279a:	e009      	b.n	100027b0 <HAL_RCC_ClockConfig+0xc0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000279c:	f7fe feb0 	bl	10001500 <HAL_GetTick>
100027a0:	4602      	mov	r2, r0
100027a2:	68bb      	ldr	r3, [r7, #8]
100027a4:	1ad3      	subs	r3, r2, r3
100027a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100027aa:	d901      	bls.n	100027b0 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_TIMEOUT;
100027ac:	2303      	movs	r3, #3
100027ae:	e0ad      	b.n	1000290c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB4DIVRDY) == RESET)
100027b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100027b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100027ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100027be:	d1ed      	bne.n	1000279c <HAL_RCC_ClockConfig+0xac>
      }
    }
  }

  /* Configure APB5 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
100027c0:	687b      	ldr	r3, [r7, #4]
100027c2:	681b      	ldr	r3, [r3, #0]
100027c4:	f003 0310 	and.w	r3, r3, #16
100027c8:	2b00      	cmp	r3, #0
100027ca:	d020      	beq.n	1000280e <HAL_RCC_ClockConfig+0x11e>
  {
    assert_param(IS_RCC_APB5DIV(RCC_ClkInitStruct->APB5_Div));
    /* Set APB5 division factor */
    __HAL_RCC_APB5_DIV(RCC_ClkInitStruct->APB5_Div);
100027cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100027d2:	f023 0207 	bic.w	r2, r3, #7
100027d6:	687b      	ldr	r3, [r7, #4]
100027d8:	6a1b      	ldr	r3, [r3, #32]
100027da:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100027de:	4313      	orrs	r3, r2
100027e0:	640b      	str	r3, [r1, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100027e2:	f7fe fe8d 	bl	10001500 <HAL_GetTick>
100027e6:	60b8      	str	r0, [r7, #8]

    /* Wait till APB5 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100027e8:	e009      	b.n	100027fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100027ea:	f7fe fe89 	bl	10001500 <HAL_GetTick>
100027ee:	4602      	mov	r2, r0
100027f0:	68bb      	ldr	r3, [r7, #8]
100027f2:	1ad3      	subs	r3, r2, r3
100027f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100027f8:	d901      	bls.n	100027fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
100027fa:	2303      	movs	r3, #3
100027fc:	e086      	b.n	1000290c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB5DIVRDY) == RESET)
100027fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10002804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000280c:	d1ed      	bne.n	100027ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Configure APB1 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
1000280e:	687b      	ldr	r3, [r7, #4]
10002810:	681b      	ldr	r3, [r3, #0]
10002812:	f003 0320 	and.w	r3, r3, #32
10002816:	2b00      	cmp	r3, #0
10002818:	d023      	beq.n	10002862 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_APB1DIV(RCC_ClkInitStruct->APB1_Div));
    /* Set APB1 division factor */
    __HAL_RCC_APB1_DIV(RCC_ClkInitStruct->APB1_Div);
1000281a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000281e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10002822:	f023 0207 	bic.w	r2, r3, #7
10002826:	687b      	ldr	r3, [r7, #4]
10002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000282a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000282e:	4313      	orrs	r3, r2
10002830:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002834:	f7fe fe64 	bl	10001500 <HAL_GetTick>
10002838:	60b8      	str	r0, [r7, #8]

    /* Wait till APB1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
1000283a:	e009      	b.n	10002850 <HAL_RCC_ClockConfig+0x160>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000283c:	f7fe fe60 	bl	10001500 <HAL_GetTick>
10002840:	4602      	mov	r2, r0
10002842:	68bb      	ldr	r3, [r7, #8]
10002844:	1ad3      	subs	r3, r2, r3
10002846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000284a:	d901      	bls.n	10002850 <HAL_RCC_ClockConfig+0x160>
      {
        return HAL_TIMEOUT;
1000284c:	2303      	movs	r3, #3
1000284e:	e05d      	b.n	1000290c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB1DIVRDY) == RESET)
10002850:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002854:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
10002858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000285c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002860:	d1ec      	bne.n	1000283c <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Configure APB2 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
10002862:	687b      	ldr	r3, [r7, #4]
10002864:	681b      	ldr	r3, [r3, #0]
10002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
1000286a:	2b00      	cmp	r3, #0
1000286c:	d023      	beq.n	100028b6 <HAL_RCC_ClockConfig+0x1c6>
  {
    assert_param(IS_RCC_APB2DIV(RCC_ClkInitStruct->APB2_Div));
    /* Set APB2 division factor */
    __HAL_RCC_APB2_DIV(RCC_ClkInitStruct->APB2_Div);
1000286e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002872:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
10002876:	f023 0207 	bic.w	r2, r3, #7
1000287a:	687b      	ldr	r3, [r7, #4]
1000287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000287e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002882:	4313      	orrs	r3, r2
10002884:	f8c1 3838 	str.w	r3, [r1, #2104]	; 0x838

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002888:	f7fe fe3a 	bl	10001500 <HAL_GetTick>
1000288c:	60b8      	str	r0, [r7, #8]

    /* Wait till APB2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
1000288e:	e009      	b.n	100028a4 <HAL_RCC_ClockConfig+0x1b4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002890:	f7fe fe36 	bl	10001500 <HAL_GetTick>
10002894:	4602      	mov	r2, r0
10002896:	68bb      	ldr	r3, [r7, #8]
10002898:	1ad3      	subs	r3, r2, r3
1000289a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1000289e:	d901      	bls.n	100028a4 <HAL_RCC_ClockConfig+0x1b4>
      {
        return HAL_TIMEOUT;
100028a0:	2303      	movs	r3, #3
100028a2:	e033      	b.n	1000290c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB2DIVRDY) == RESET)
100028a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028a8:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100028ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100028b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100028b4:	d1ec      	bne.n	10002890 <HAL_RCC_ClockConfig+0x1a0>
      }
    }
  }

  /* Configure APB3 divisor if needed */
  if ((RCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
100028b6:	687b      	ldr	r3, [r7, #4]
100028b8:	681b      	ldr	r3, [r3, #0]
100028ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
100028be:	2b00      	cmp	r3, #0
100028c0:	d023      	beq.n	1000290a <HAL_RCC_ClockConfig+0x21a>
  {
    assert_param(IS_RCC_APB3DIV(RCC_ClkInitStruct->APB3_Div));
    /* Set APB3 division factor */
    __HAL_RCC_APB3_DIV(RCC_ClkInitStruct->APB3_Div);
100028c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028c6:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
100028ca:	f023 0207 	bic.w	r2, r3, #7
100028ce:	687b      	ldr	r3, [r7, #4]
100028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100028d2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100028d6:	4313      	orrs	r3, r2
100028d8:	f8c1 383c 	str.w	r3, [r1, #2108]	; 0x83c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
100028dc:	f7fe fe10 	bl	10001500 <HAL_GetTick>
100028e0:	60b8      	str	r0, [r7, #8]

    /* Wait till APB3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100028e2:	e009      	b.n	100028f8 <HAL_RCC_ClockConfig+0x208>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100028e4:	f7fe fe0c 	bl	10001500 <HAL_GetTick>
100028e8:	4602      	mov	r2, r0
100028ea:	68bb      	ldr	r3, [r7, #8]
100028ec:	1ad3      	subs	r3, r2, r3
100028ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100028f2:	d901      	bls.n	100028f8 <HAL_RCC_ClockConfig+0x208>
      {
        return HAL_TIMEOUT;
100028f4:	2303      	movs	r3, #3
100028f6:	e009      	b.n	1000290c <HAL_RCC_ClockConfig+0x21c>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_APB3DIVRDY) == RESET)
100028f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100028fc:	f8d3 383c 	ldr.w	r3, [r3, #2108]	; 0x83c
10002900:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002908:	d1ec      	bne.n	100028e4 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  return HAL_OK;
1000290a:	2300      	movs	r3, #0
}
1000290c:	4618      	mov	r0, r3
1000290e:	3710      	adds	r7, #16
10002910:	46bd      	mov	sp, r7
10002912:	bd80      	pop	{r7, pc}

10002914 <RCC_MPUConfig>:

HAL_StatusTypeDef RCC_MPUConfig(RCC_MPUInitTypeDef *RCC_MPUInitStruct)
{
10002914:	b580      	push	{r7, lr}
10002916:	b084      	sub	sp, #16
10002918:	af00      	add	r7, sp, #0
1000291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  assert_param(IS_RCC_MPUSOURCE(RCC_MPUInitStruct->MPU_Clock));

  /* Ensure clock source is ready*/
  switch (RCC_MPUInitStruct->MPU_Clock)
1000291c:	687b      	ldr	r3, [r7, #4]
1000291e:	681b      	ldr	r3, [r3, #0]
10002920:	2b03      	cmp	r3, #3
10002922:	d840      	bhi.n	100029a6 <RCC_MPUConfig+0x92>
10002924:	a201      	add	r2, pc, #4	; (adr r2, 1000292c <RCC_MPUConfig+0x18>)
10002926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000292a:	bf00      	nop
1000292c:	1000293d 	.word	0x1000293d
10002930:	10002951 	.word	0x10002951
10002934:	10002967 	.word	0x10002967
10002938:	1000297b 	.word	0x1000297b
  {
    case (RCC_MPUSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
1000293c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002940:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002944:	f003 0301 	and.w	r3, r3, #1
10002948:	2b01      	cmp	r3, #1
1000294a:	d02e      	beq.n	100029aa <RCC_MPUConfig+0x96>
      {
        return HAL_ERROR;
1000294c:	2301      	movs	r3, #1
1000294e:	e053      	b.n	100029f8 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002950:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002954:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002958:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000295c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002960:	d025      	beq.n	100029ae <RCC_MPUConfig+0x9a>
      {
        return HAL_ERROR;
10002962:	2301      	movs	r3, #1
10002964:	e048      	b.n	100029f8 <RCC_MPUConfig+0xe4>
    }

    case (RCC_MPUSOURCE_PLL1):
    {
      /* Check the PLL1 ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
10002966:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000296a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
1000296e:	f003 0302 	and.w	r3, r3, #2
10002972:	2b02      	cmp	r3, #2
10002974:	d01d      	beq.n	100029b2 <RCC_MPUConfig+0x9e>
      {
        return HAL_ERROR;
10002976:	2301      	movs	r3, #1
10002978:	e03e      	b.n	100029f8 <RCC_MPUConfig+0xe4>
    case (RCC_MPUSOURCE_MPUDIV):
    {
      assert_param(IS_RCC_MPUDIV(RCC_MPUInitStruct->MPU_Div));

      /* Check the PLL1 ready flag (as PLL1_P is the MPUDIV source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL1RDY) == RESET)
1000297a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000297e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
10002982:	f003 0302 	and.w	r3, r3, #2
10002986:	2b02      	cmp	r3, #2
10002988:	d001      	beq.n	1000298e <RCC_MPUConfig+0x7a>
      {
        return HAL_ERROR;
1000298a:	2301      	movs	r3, #1
1000298c:	e034      	b.n	100029f8 <RCC_MPUConfig+0xe4>
      }

      /* Set MPU division factor */
      __HAL_RCC_MPU_DIV(RCC_MPUInitStruct->MPU_Div);
1000298e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002994:	f023 0207 	bic.w	r2, r3, #7
10002998:	687b      	ldr	r3, [r7, #4]
1000299a:	685b      	ldr	r3, [r3, #4]
1000299c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100029a0:	4313      	orrs	r3, r2
100029a2:	62cb      	str	r3, [r1, #44]	; 0x2c

      break;
100029a4:	e006      	b.n	100029b4 <RCC_MPUConfig+0xa0>
    }

    default:
      /* This case is impossible */
      return HAL_ERROR;
100029a6:	2301      	movs	r3, #1
100029a8:	e026      	b.n	100029f8 <RCC_MPUConfig+0xe4>
      break;
100029aa:	bf00      	nop
100029ac:	e002      	b.n	100029b4 <RCC_MPUConfig+0xa0>
      break;
100029ae:	bf00      	nop
100029b0:	e000      	b.n	100029b4 <RCC_MPUConfig+0xa0>
      break;
100029b2:	bf00      	nop
      break;
  }

  /* Set MPU clock source */
  __HAL_RCC_MPU_SOURCE(RCC_MPUInitStruct->MPU_Clock);
100029b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029b8:	6a1b      	ldr	r3, [r3, #32]
100029ba:	f023 0203 	bic.w	r2, r3, #3
100029be:	687b      	ldr	r3, [r7, #4]
100029c0:	681b      	ldr	r3, [r3, #0]
100029c2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100029c6:	4313      	orrs	r3, r2
100029c8:	620b      	str	r3, [r1, #32]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
100029ca:	f7fe fd99 	bl	10001500 <HAL_GetTick>
100029ce:	60f8      	str	r0, [r7, #12]

  /* Wait till MPU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100029d0:	e009      	b.n	100029e6 <RCC_MPUConfig+0xd2>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
100029d2:	f7fe fd95 	bl	10001500 <HAL_GetTick>
100029d6:	4602      	mov	r2, r0
100029d8:	68fb      	ldr	r3, [r7, #12]
100029da:	1ad3      	subs	r3, r2, r3
100029dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100029e0:	d901      	bls.n	100029e6 <RCC_MPUConfig+0xd2>
    {
      return HAL_TIMEOUT;
100029e2:	2303      	movs	r3, #3
100029e4:	e008      	b.n	100029f8 <RCC_MPUConfig+0xe4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MPUSRCRDY) == RESET)
100029e6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100029ea:	6a1b      	ldr	r3, [r3, #32]
100029ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100029f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100029f4:	d1ed      	bne.n	100029d2 <RCC_MPUConfig+0xbe>

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
#endif

  return HAL_OK;
100029f6:	2300      	movs	r3, #0
}
100029f8:	4618      	mov	r0, r3
100029fa:	3710      	adds	r7, #16
100029fc:	46bd      	mov	sp, r7
100029fe:	bd80      	pop	{r7, pc}

10002a00 <RCC_AXISSConfig>:


HAL_StatusTypeDef RCC_AXISSConfig(RCC_AXISSInitTypeDef *RCC_AXISSInitStruct)
{
10002a00:	b580      	push	{r7, lr}
10002a02:	b084      	sub	sp, #16
10002a04:	af00      	add	r7, sp, #0
10002a06:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_AXISSOURCE(RCC_AXISSInitStruct->AXI_Clock));
  assert_param(IS_RCC_AXIDIV(RCC_AXISSInitStruct->AXI_Div));

  /* Ensure clock source is ready*/
  switch (RCC_AXISSInitStruct->AXI_Clock)
10002a08:	687b      	ldr	r3, [r7, #4]
10002a0a:	681b      	ldr	r3, [r3, #0]
10002a0c:	2b02      	cmp	r3, #2
10002a0e:	d01b      	beq.n	10002a48 <RCC_AXISSConfig+0x48>
10002a10:	2b02      	cmp	r3, #2
10002a12:	d823      	bhi.n	10002a5c <RCC_AXISSConfig+0x5c>
10002a14:	2b00      	cmp	r3, #0
10002a16:	d002      	beq.n	10002a1e <RCC_AXISSConfig+0x1e>
10002a18:	2b01      	cmp	r3, #1
10002a1a:	d00a      	beq.n	10002a32 <RCC_AXISSConfig+0x32>
      }
      break;
    }

    default:
      break;
10002a1c:	e01e      	b.n	10002a5c <RCC_AXISSConfig+0x5c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002a1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a22:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002a26:	f003 0301 	and.w	r3, r3, #1
10002a2a:	2b01      	cmp	r3, #1
10002a2c:	d018      	beq.n	10002a60 <RCC_AXISSConfig+0x60>
        return HAL_ERROR;
10002a2e:	2301      	movs	r3, #1
10002a30:	e079      	b.n	10002b26 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002a32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a36:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002a3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002a42:	d00f      	beq.n	10002a64 <RCC_AXISSConfig+0x64>
        return HAL_ERROR;
10002a44:	2301      	movs	r3, #1
10002a46:	e06e      	b.n	10002b26 <RCC_AXISSConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10002a48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10002a50:	f003 0302 	and.w	r3, r3, #2
10002a54:	2b02      	cmp	r3, #2
10002a56:	d007      	beq.n	10002a68 <RCC_AXISSConfig+0x68>
        return HAL_ERROR;
10002a58:	2301      	movs	r3, #1
10002a5a:	e064      	b.n	10002b26 <RCC_AXISSConfig+0x126>
      break;
10002a5c:	bf00      	nop
10002a5e:	e004      	b.n	10002a6a <RCC_AXISSConfig+0x6a>
      break;
10002a60:	bf00      	nop
10002a62:	e002      	b.n	10002a6a <RCC_AXISSConfig+0x6a>
      break;
10002a64:	bf00      	nop
10002a66:	e000      	b.n	10002a6a <RCC_AXISSConfig+0x6a>
      break;
10002a68:	bf00      	nop

  }

  /* Set AXISS clock source */
  __HAL_RCC_AXISS_SOURCE(RCC_AXISSInitStruct->AXI_Clock);
10002a6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002a70:	f023 0207 	bic.w	r2, r3, #7
10002a74:	687b      	ldr	r3, [r7, #4]
10002a76:	681b      	ldr	r3, [r3, #0]
10002a78:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002a7c:	4313      	orrs	r3, r2
10002a7e:	624b      	str	r3, [r1, #36]	; 0x24

  if (RCC_AXISSInitStruct->AXI_Clock != RCC_AXISSOURCE_OFF)
10002a80:	687b      	ldr	r3, [r7, #4]
10002a82:	681b      	ldr	r3, [r3, #0]
10002a84:	2b03      	cmp	r3, #3
10002a86:	d016      	beq.n	10002ab6 <RCC_AXISSConfig+0xb6>
  {
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002a88:	f7fe fd3a 	bl	10001500 <HAL_GetTick>
10002a8c:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002a8e:	e009      	b.n	10002aa4 <RCC_AXISSConfig+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002a90:	f7fe fd36 	bl	10001500 <HAL_GetTick>
10002a94:	4602      	mov	r2, r0
10002a96:	68fb      	ldr	r3, [r7, #12]
10002a98:	1ad3      	subs	r3, r2, r3
10002a9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002a9e:	d901      	bls.n	10002aa4 <RCC_AXISSConfig+0xa4>
      {
        return HAL_TIMEOUT;
10002aa0:	2303      	movs	r3, #3
10002aa2:	e040      	b.n	10002b26 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) == RESET)
10002aa4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002ab2:	d1ed      	bne.n	10002a90 <RCC_AXISSConfig+0x90>
10002ab4:	e015      	b.n	10002ae2 <RCC_AXISSConfig+0xe2>
  }
  else
  {
    // RCC_AXISSOURCE_OFF case
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10002ab6:	f7fe fd23 	bl	10001500 <HAL_GetTick>
10002aba:	60f8      	str	r0, [r7, #12]

    /* Wait till AXISS is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10002abc:	e009      	b.n	10002ad2 <RCC_AXISSConfig+0xd2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002abe:	f7fe fd1f 	bl	10001500 <HAL_GetTick>
10002ac2:	4602      	mov	r2, r0
10002ac4:	68fb      	ldr	r3, [r7, #12]
10002ac6:	1ad3      	subs	r3, r2, r3
10002ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002acc:	d901      	bls.n	10002ad2 <RCC_AXISSConfig+0xd2>
      {
        return HAL_TIMEOUT;
10002ace:	2303      	movs	r3, #3
10002ad0:	e029      	b.n	10002b26 <RCC_AXISSConfig+0x126>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXISSRCRDY) != RESET)
10002ad2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10002ad8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002adc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002ae0:	d0ed      	beq.n	10002abe <RCC_AXISSConfig+0xbe>
      }
    }
  }

  /* Set AXISS division factor */
  __HAL_RCC_AXI_DIV(RCC_AXISSInitStruct->AXI_Div);
10002ae2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002ae8:	f023 0207 	bic.w	r2, r3, #7
10002aec:	687b      	ldr	r3, [r7, #4]
10002aee:	685b      	ldr	r3, [r3, #4]
10002af0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002af4:	4313      	orrs	r3, r2
10002af6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002af8:	f7fe fd02 	bl	10001500 <HAL_GetTick>
10002afc:	60f8      	str	r0, [r7, #12]

  /* Wait till AXISS is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10002afe:	e009      	b.n	10002b14 <RCC_AXISSConfig+0x114>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002b00:	f7fe fcfe 	bl	10001500 <HAL_GetTick>
10002b04:	4602      	mov	r2, r0
10002b06:	68fb      	ldr	r3, [r7, #12]
10002b08:	1ad3      	subs	r3, r2, r3
10002b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002b0e:	d901      	bls.n	10002b14 <RCC_AXISSConfig+0x114>
    {
      return HAL_TIMEOUT;
10002b10:	2303      	movs	r3, #3
10002b12:	e008      	b.n	10002b26 <RCC_AXISSConfig+0x126>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_AXIDIVRDY) == RESET)
10002b14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10002b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002b22:	d1ed      	bne.n	10002b00 <RCC_AXISSConfig+0x100>
    }
  }

  return HAL_OK;
10002b24:	2300      	movs	r3, #0
}
10002b26:	4618      	mov	r0, r3
10002b28:	3710      	adds	r7, #16
10002b2a:	46bd      	mov	sp, r7
10002b2c:	bd80      	pop	{r7, pc}
	...

10002b30 <RCC_MCUConfig>:


HAL_StatusTypeDef RCC_MCUConfig(RCC_MCUInitTypeDef *MCUInitStruct)
{
10002b30:	b580      	push	{r7, lr}
10002b32:	b084      	sub	sp, #16
10002b34:	af00      	add	r7, sp, #0
10002b36:	6078      	str	r0, [r7, #4]

  assert_param(IS_RCC_MCUSSOURCE(MCUInitStruct->MCU_Clock));
  assert_param(IS_RCC_MCUDIV(MCUInitStruct->MCU_Div));

  /* Ensure clock source is ready*/
  switch (MCUInitStruct->MCU_Clock)
10002b38:	687b      	ldr	r3, [r7, #4]
10002b3a:	681b      	ldr	r3, [r3, #0]
10002b3c:	2b03      	cmp	r3, #3
10002b3e:	d834      	bhi.n	10002baa <RCC_MCUConfig+0x7a>
10002b40:	a201      	add	r2, pc, #4	; (adr r2, 10002b48 <RCC_MCUConfig+0x18>)
10002b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002b46:	bf00      	nop
10002b48:	10002b59 	.word	0x10002b59
10002b4c:	10002b6d 	.word	0x10002b6d
10002b50:	10002b83 	.word	0x10002b83
10002b54:	10002b97 	.word	0x10002b97
  {
    case (RCC_MCUSSOURCE_HSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
10002b58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b5c:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002b60:	f003 0301 	and.w	r3, r3, #1
10002b64:	2b01      	cmp	r3, #1
10002b66:	d022      	beq.n	10002bae <RCC_MCUConfig+0x7e>
      {
        return HAL_ERROR;
10002b68:	2301      	movs	r3, #1
10002b6a:	e081      	b.n	10002c70 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_HSE):
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
10002b6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b70:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
10002b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10002b7c:	d019      	beq.n	10002bb2 <RCC_MCUConfig+0x82>
      {
        return HAL_ERROR;
10002b7e:	2301      	movs	r3, #1
10002b80:	e076      	b.n	10002c70 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_CSI):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == RESET)
10002b82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b86:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002b8a:	f003 0310 	and.w	r3, r3, #16
10002b8e:	2b10      	cmp	r3, #16
10002b90:	d011      	beq.n	10002bb6 <RCC_MCUConfig+0x86>
      {
        return HAL_ERROR;
10002b92:	2301      	movs	r3, #1
10002b94:	e06c      	b.n	10002c70 <RCC_MCUConfig+0x140>
    }

    case (RCC_MCUSSOURCE_PLL3):
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
10002b96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002b9a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10002b9e:	f003 0302 	and.w	r3, r3, #2
10002ba2:	2b02      	cmp	r3, #2
10002ba4:	d009      	beq.n	10002bba <RCC_MCUConfig+0x8a>
      {
        return HAL_ERROR;
10002ba6:	2301      	movs	r3, #1
10002ba8:	e062      	b.n	10002c70 <RCC_MCUConfig+0x140>
      }
      break;
    }

    default:
      break;
10002baa:	bf00      	nop
10002bac:	e006      	b.n	10002bbc <RCC_MCUConfig+0x8c>
      break;
10002bae:	bf00      	nop
10002bb0:	e004      	b.n	10002bbc <RCC_MCUConfig+0x8c>
      break;
10002bb2:	bf00      	nop
10002bb4:	e002      	b.n	10002bbc <RCC_MCUConfig+0x8c>
      break;
10002bb6:	bf00      	nop
10002bb8:	e000      	b.n	10002bbc <RCC_MCUConfig+0x8c>
      break;
10002bba:	bf00      	nop

  }

  /* Set MCU clock source */
  __HAL_RCC_MCU_SOURCE(MCUInitStruct->MCU_Clock);
10002bbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002bc2:	f023 0203 	bic.w	r2, r3, #3
10002bc6:	687b      	ldr	r3, [r7, #4]
10002bc8:	681b      	ldr	r3, [r3, #0]
10002bca:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002bce:	4313      	orrs	r3, r2
10002bd0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002bd2:	f7fe fc95 	bl	10001500 <HAL_GetTick>
10002bd6:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */

  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10002bd8:	e009      	b.n	10002bee <RCC_MCUConfig+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002bda:	f7fe fc91 	bl	10001500 <HAL_GetTick>
10002bde:	4602      	mov	r2, r0
10002be0:	68fb      	ldr	r3, [r7, #12]
10002be2:	1ad3      	subs	r3, r2, r3
10002be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002be8:	d901      	bls.n	10002bee <RCC_MCUConfig+0xbe>
    {
      return HAL_TIMEOUT;
10002bea:	2303      	movs	r3, #3
10002bec:	e040      	b.n	10002c70 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUSSRCRDY) == RESET)
10002bee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10002bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002bfc:	d1ed      	bne.n	10002bda <RCC_MCUConfig+0xaa>
    }
  }

#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002bfe:	f000 fbb5 	bl	1000336c <HAL_RCC_GetSystemCoreClockFreq>
10002c02:	4603      	mov	r3, r0
10002c04:	4a1c      	ldr	r2, [pc, #112]	; (10002c78 <RCC_MCUConfig+0x148>)
10002c06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10002c08:	4b1c      	ldr	r3, [pc, #112]	; (10002c7c <RCC_MCUConfig+0x14c>)
10002c0a:	681b      	ldr	r3, [r3, #0]
10002c0c:	4618      	mov	r0, r3
10002c0e:	f7fe fc2d 	bl	1000146c <HAL_InitTick>
#endif

  /* Set MCU division factor */
  __HAL_RCC_MCU_DIV(MCUInitStruct->MCU_Div);
10002c12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c16:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10002c1a:	f023 020f 	bic.w	r2, r3, #15
10002c1e:	687b      	ldr	r3, [r7, #4]
10002c20:	685b      	ldr	r3, [r3, #4]
10002c22:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10002c26:	4313      	orrs	r3, r2
10002c28:	f8c1 3830 	str.w	r3, [r1, #2096]	; 0x830

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
10002c2c:	f7fe fc68 	bl	10001500 <HAL_GetTick>
10002c30:	60f8      	str	r0, [r7, #12]

  /* Wait till MCU is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002c32:	e009      	b.n	10002c48 <RCC_MCUConfig+0x118>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10002c34:	f7fe fc64 	bl	10001500 <HAL_GetTick>
10002c38:	4602      	mov	r2, r0
10002c3a:	68fb      	ldr	r3, [r7, #12]
10002c3c:	1ad3      	subs	r3, r2, r3
10002c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10002c42:	d901      	bls.n	10002c48 <RCC_MCUConfig+0x118>
    {
      return HAL_TIMEOUT;
10002c44:	2303      	movs	r3, #3
10002c46:	e013      	b.n	10002c70 <RCC_MCUConfig+0x140>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_MCUDIVRDY) == RESET)
10002c48:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002c4c:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10002c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10002c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10002c58:	d1ec      	bne.n	10002c34 <RCC_MCUConfig+0x104>
    }
  }
#ifdef CORE_CM4
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
10002c5a:	f000 fb87 	bl	1000336c <HAL_RCC_GetSystemCoreClockFreq>
10002c5e:	4603      	mov	r3, r0
10002c60:	4a05      	ldr	r2, [pc, #20]	; (10002c78 <RCC_MCUConfig+0x148>)
10002c62:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
10002c64:	4b05      	ldr	r3, [pc, #20]	; (10002c7c <RCC_MCUConfig+0x14c>)
10002c66:	681b      	ldr	r3, [r3, #0]
10002c68:	4618      	mov	r0, r3
10002c6a:	f7fe fbff 	bl	1000146c <HAL_InitTick>
#endif

  return HAL_OK;
10002c6e:	2300      	movs	r3, #0
}
10002c70:	4618      	mov	r0, r3
10002c72:	3710      	adds	r7, #16
10002c74:	46bd      	mov	sp, r7
10002c76:	bd80      	pop	{r7, pc}
10002c78:	10020000 	.word	0x10020000
10002c7c:	10020004 	.word	0x10020004

10002c80 <HAL_RCC_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
10002c80:	b480      	push	{r7}
10002c82:	b089      	sub	sp, #36	; 0x24
10002c84:	af00      	add	r7, sp, #0
10002c86:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll2m = 1U, pll2fracen = 0U, hsivalue = 0U;
10002c88:	2300      	movs	r3, #0
10002c8a:	61bb      	str	r3, [r7, #24]
10002c8c:	2301      	movs	r3, #1
10002c8e:	617b      	str	r3, [r7, #20]
10002c90:	2300      	movs	r3, #0
10002c92:	613b      	str	r3, [r7, #16]
10002c94:	2300      	movs	r3, #0
10002c96:	60fb      	str	r3, [r7, #12]
  float fracn1, pll2vco = 0;
10002c98:	f04f 0300 	mov.w	r3, #0
10002c9c:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL12_SOURCE();
10002c9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10002ca4:	f003 0303 	and.w	r3, r3, #3
10002ca8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVM2) >> RCC_PLL2CFGR1_DIVM2_Pos) + 1U;
10002caa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10002cb2:	0c1b      	lsrs	r3, r3, #16
10002cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10002cb8:	3301      	adds	r3, #1
10002cba:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLL2FRACR & RCC_PLL2FRACR_FRACLE) >> RCC_PLL2FRACR_FRACLE_Pos;
10002cbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002cc4:	0c1b      	lsrs	r3, r3, #16
10002cc6:	f003 0301 	and.w	r3, r3, #1
10002cca:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACV) >> RCC_PLL2FRACR_FRACV_Pos));
10002ccc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10002cd4:	08db      	lsrs	r3, r3, #3
10002cd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
10002cda:	693a      	ldr	r2, [r7, #16]
10002cdc:	fb02 f303 	mul.w	r3, r2, r3
10002ce0:	ee07 3a90 	vmov	s15, r3
10002ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002ce8:	edc7 7a02 	vstr	s15, [r7, #8]
  pll2vco = (float)((float)((RCC->PLL2CFGR1 & RCC_PLL2CFGR1_DIVN) + 1U) + (fracn1 / (float)0x2000));  //Intermediary value
10002cec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002cf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
10002cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
10002cf8:	3301      	adds	r3, #1
10002cfa:	ee07 3a90 	vmov	s15, r3
10002cfe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002d02:	edd7 6a02 	vldr	s13, [r7, #8]
10002d06:	ed9f 6a51 	vldr	s12, [pc, #324]	; 10002e4c <HAL_RCC_GetPLL2ClockFreq+0x1cc>
10002d0a:	eec6 7a86 	vdiv.f32	s15, s13, s12
10002d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
10002d12:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10002d16:	69bb      	ldr	r3, [r7, #24]
10002d18:	2b02      	cmp	r3, #2
10002d1a:	d047      	beq.n	10002dac <HAL_RCC_GetPLL2ClockFreq+0x12c>
10002d1c:	69bb      	ldr	r3, [r7, #24]
10002d1e:	2b02      	cmp	r3, #2
10002d20:	d848      	bhi.n	10002db4 <HAL_RCC_GetPLL2ClockFreq+0x134>
10002d22:	69bb      	ldr	r3, [r7, #24]
10002d24:	2b00      	cmp	r3, #0
10002d26:	d003      	beq.n	10002d30 <HAL_RCC_GetPLL2ClockFreq+0xb0>
10002d28:	69bb      	ldr	r3, [r7, #24]
10002d2a:	2b01      	cmp	r3, #1
10002d2c:	d02f      	beq.n	10002d8e <HAL_RCC_GetPLL2ClockFreq+0x10e>
10002d2e:	e041      	b.n	10002db4 <HAL_RCC_GetPLL2ClockFreq+0x134>
  {
    case RCC_PLL12SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10002d30:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d34:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002d38:	f003 0304 	and.w	r3, r3, #4
10002d3c:	2b04      	cmp	r3, #4
10002d3e:	d117      	bne.n	10002d70 <HAL_RCC_GetPLL2ClockFreq+0xf0>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002d40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002d44:	699b      	ldr	r3, [r3, #24]
10002d46:	f003 0303 	and.w	r3, r3, #3
10002d4a:	4a41      	ldr	r2, [pc, #260]	; (10002e50 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10002d4c:	fa22 f303 	lsr.w	r3, r2, r3
10002d50:	60fb      	str	r3, [r7, #12]
        pll2vco *= (float)(hsivalue / pll2m);
10002d52:	68fa      	ldr	r2, [r7, #12]
10002d54:	697b      	ldr	r3, [r7, #20]
10002d56:	fbb2 f3f3 	udiv	r3, r2, r3
10002d5a:	ee07 3a90 	vmov	s15, r3
10002d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002d62:	ed97 7a07 	vldr	s14, [r7, #28]
10002d66:	ee67 7a27 	vmul.f32	s15, s14, s15
10002d6a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco *= (float)(HSI_VALUE / pll2m);
      }
      break;
10002d6e:	e025      	b.n	10002dbc <HAL_RCC_GetPLL2ClockFreq+0x13c>
        pll2vco *= (float)(HSI_VALUE / pll2m);
10002d70:	4a37      	ldr	r2, [pc, #220]	; (10002e50 <HAL_RCC_GetPLL2ClockFreq+0x1d0>)
10002d72:	697b      	ldr	r3, [r7, #20]
10002d74:	fbb2 f3f3 	udiv	r3, r2, r3
10002d78:	ee07 3a90 	vmov	s15, r3
10002d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002d80:	ed97 7a07 	vldr	s14, [r7, #28]
10002d84:	ee67 7a27 	vmul.f32	s15, s14, s15
10002d88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002d8c:	e016      	b.n	10002dbc <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco *= (float)(HSE_VALUE / pll2m);
10002d8e:	4a31      	ldr	r2, [pc, #196]	; (10002e54 <HAL_RCC_GetPLL2ClockFreq+0x1d4>)
10002d90:	697b      	ldr	r3, [r7, #20]
10002d92:	fbb2 f3f3 	udiv	r3, r2, r3
10002d96:	ee07 3a90 	vmov	s15, r3
10002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002d9e:	ed97 7a07 	vldr	s14, [r7, #28]
10002da2:	ee67 7a27 	vmul.f32	s15, s14, s15
10002da6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002daa:	e007      	b.n	10002dbc <HAL_RCC_GetPLL2ClockFreq+0x13c>

    case RCC_PLL12SOURCE_OFF:  /* No clock source for PLL */
      pll2vco = 0;
10002dac:	f04f 0300 	mov.w	r3, #0
10002db0:	61fb      	str	r3, [r7, #28]
      break;
10002db2:	e003      	b.n	10002dbc <HAL_RCC_GetPLL2ClockFreq+0x13c>

    default:
      pll2vco = 0;
10002db4:	f04f 0300 	mov.w	r3, #0
10002db8:	61fb      	str	r3, [r7, #28]
      break;
10002dba:	bf00      	nop
  }

  PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVP) >> RCC_PLL2CFGR2_DIVP_Pos) + 1U)));
10002dbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002dc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10002dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002dc8:	3301      	adds	r3, #1
10002dca:	ee07 3a90 	vmov	s15, r3
10002dce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002dd2:	edd7 6a07 	vldr	s13, [r7, #28]
10002dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002dde:	ee17 2a90 	vmov	r2, s15
10002de2:	687b      	ldr	r3, [r7, #4]
10002de4:	601a      	str	r2, [r3, #0]
  PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVQ) >> RCC_PLL2CFGR2_DIVQ_Pos) + 1U)));
10002de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10002dee:	0a1b      	lsrs	r3, r3, #8
10002df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002df4:	3301      	adds	r3, #1
10002df6:	ee07 3a90 	vmov	s15, r3
10002dfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002dfe:	edd7 6a07 	vldr	s13, [r7, #28]
10002e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002e0a:	ee17 2a90 	vmov	r2, s15
10002e0e:	687b      	ldr	r3, [r7, #4]
10002e10:	605a      	str	r2, [r3, #4]
  PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(pll2vco / ((float)(((RCC->PLL2CFGR2 & RCC_PLL2CFGR2_DIVR) >> RCC_PLL2CFGR2_DIVR_Pos) + 1U)));
10002e12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
10002e1a:	0c1b      	lsrs	r3, r3, #16
10002e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002e20:	3301      	adds	r3, #1
10002e22:	ee07 3a90 	vmov	s15, r3
10002e26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002e2a:	edd7 6a07 	vldr	s13, [r7, #28]
10002e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002e36:	ee17 2a90 	vmov	r2, s15
10002e3a:	687b      	ldr	r3, [r7, #4]
10002e3c:	609a      	str	r2, [r3, #8]
}
10002e3e:	bf00      	nop
10002e40:	3724      	adds	r7, #36	; 0x24
10002e42:	46bd      	mov	sp, r7
10002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
10002e48:	4770      	bx	lr
10002e4a:	bf00      	nop
10002e4c:	46000000 	.word	0x46000000
10002e50:	03d09000 	.word	0x03d09000
10002e54:	016e3600 	.word	0x016e3600

10002e58 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10002e58:	b480      	push	{r7}
10002e5a:	b089      	sub	sp, #36	; 0x24
10002e5c:	af00      	add	r7, sp, #0
10002e5e:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10002e60:	2300      	movs	r3, #0
10002e62:	61bb      	str	r3, [r7, #24]
10002e64:	2301      	movs	r3, #1
10002e66:	617b      	str	r3, [r7, #20]
10002e68:	2300      	movs	r3, #0
10002e6a:	613b      	str	r3, [r7, #16]
10002e6c:	2300      	movs	r3, #0
10002e6e:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10002e70:	f04f 0300 	mov.w	r3, #0
10002e74:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10002e76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e7a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10002e7e:	f003 0303 	and.w	r3, r3, #3
10002e82:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10002e84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e88:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10002e8c:	0c1b      	lsrs	r3, r3, #16
10002e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10002e92:	3301      	adds	r3, #1
10002e94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10002e96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002e9a:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002e9e:	0c1b      	lsrs	r3, r3, #16
10002ea0:	f003 0301 	and.w	r3, r3, #1
10002ea4:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10002ea6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002eaa:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10002eae:	08db      	lsrs	r3, r3, #3
10002eb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
10002eb4:	693a      	ldr	r2, [r7, #16]
10002eb6:	fb02 f303 	mul.w	r3, r2, r3
10002eba:	ee07 3a90 	vmov	s15, r3
10002ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002ec2:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
10002ec6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002eca:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10002ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
10002ed2:	3301      	adds	r3, #1
10002ed4:	ee07 3a90 	vmov	s15, r3
10002ed8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002edc:	edd7 6a02 	vldr	s13, [r7, #8]
10002ee0:	ed9f 6a56 	vldr	s12, [pc, #344]	; 1000303c <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10002ee4:	eec6 7a86 	vdiv.f32	s15, s13, s12
10002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
10002eec:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10002ef0:	69bb      	ldr	r3, [r7, #24]
10002ef2:	2b03      	cmp	r3, #3
10002ef4:	d85b      	bhi.n	10002fae <HAL_RCC_GetPLL3ClockFreq+0x156>
10002ef6:	a201      	add	r2, pc, #4	; (adr r2, 10002efc <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10002ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10002efc:	10002f0d 	.word	0x10002f0d
10002f00:	10002f6b 	.word	0x10002f6b
10002f04:	10002f89 	.word	0x10002f89
10002f08:	10002fa7 	.word	0x10002fa7
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10002f0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f10:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10002f14:	f003 0304 	and.w	r3, r3, #4
10002f18:	2b04      	cmp	r3, #4
10002f1a:	d117      	bne.n	10002f4c <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10002f1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002f20:	699b      	ldr	r3, [r3, #24]
10002f22:	f003 0303 	and.w	r3, r3, #3
10002f26:	4a46      	ldr	r2, [pc, #280]	; (10003040 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10002f28:	fa22 f303 	lsr.w	r3, r2, r3
10002f2c:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10002f2e:	68fa      	ldr	r2, [r7, #12]
10002f30:	697b      	ldr	r3, [r7, #20]
10002f32:	fbb2 f3f3 	udiv	r3, r2, r3
10002f36:	ee07 3a90 	vmov	s15, r3
10002f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002f3e:	ed97 7a07 	vldr	s14, [r7, #28]
10002f42:	ee67 7a27 	vmul.f32	s15, s14, s15
10002f46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10002f4a:	e030      	b.n	10002fae <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10002f4c:	4a3c      	ldr	r2, [pc, #240]	; (10003040 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10002f4e:	697b      	ldr	r3, [r7, #20]
10002f50:	fbb2 f3f3 	udiv	r3, r2, r3
10002f54:	ee07 3a90 	vmov	s15, r3
10002f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002f5c:	ed97 7a07 	vldr	s14, [r7, #28]
10002f60:	ee67 7a27 	vmul.f32	s15, s14, s15
10002f64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002f68:	e021      	b.n	10002fae <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10002f6a:	4a36      	ldr	r2, [pc, #216]	; (10003044 <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10002f6c:	697b      	ldr	r3, [r7, #20]
10002f6e:	fbb2 f3f3 	udiv	r3, r2, r3
10002f72:	ee07 3a90 	vmov	s15, r3
10002f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002f7a:	ed97 7a07 	vldr	s14, [r7, #28]
10002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
10002f82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002f86:	e012      	b.n	10002fae <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10002f88:	4a2f      	ldr	r2, [pc, #188]	; (10003048 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10002f8a:	697b      	ldr	r3, [r7, #20]
10002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
10002f90:	ee07 3a90 	vmov	s15, r3
10002f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
10002f98:	ed97 7a07 	vldr	s14, [r7, #28]
10002f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
10002fa0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10002fa4:	e003      	b.n	10002fae <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10002fa6:	f04f 0300 	mov.w	r3, #0
10002faa:	61fb      	str	r3, [r7, #28]
      break;
10002fac:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10002fae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fb2:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10002fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002fba:	3301      	adds	r3, #1
10002fbc:	ee07 3a90 	vmov	s15, r3
10002fc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002fc4:	edd7 6a07 	vldr	s13, [r7, #28]
10002fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002fd0:	ee17 2a90 	vmov	r2, s15
10002fd4:	687b      	ldr	r3, [r7, #4]
10002fd6:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10002fd8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10002fdc:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10002fe0:	0a1b      	lsrs	r3, r3, #8
10002fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10002fe6:	3301      	adds	r3, #1
10002fe8:	ee07 3a90 	vmov	s15, r3
10002fec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10002ff0:	edd7 6a07 	vldr	s13, [r7, #28]
10002ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
10002ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10002ffc:	ee17 2a90 	vmov	r2, s15
10003000:	687b      	ldr	r3, [r7, #4]
10003002:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10003004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003008:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
1000300c:	0c1b      	lsrs	r3, r3, #16
1000300e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10003012:	3301      	adds	r3, #1
10003014:	ee07 3a90 	vmov	s15, r3
10003018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
1000301c:	edd7 6a07 	vldr	s13, [r7, #28]
10003020:	eec6 7a87 	vdiv.f32	s15, s13, s14
10003024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10003028:	ee17 2a90 	vmov	r2, s15
1000302c:	687b      	ldr	r3, [r7, #4]
1000302e:	609a      	str	r2, [r3, #8]
}
10003030:	bf00      	nop
10003032:	3724      	adds	r7, #36	; 0x24
10003034:	46bd      	mov	sp, r7
10003036:	f85d 7b04 	ldr.w	r7, [sp], #4
1000303a:	4770      	bx	lr
1000303c:	46000000 	.word	0x46000000
10003040:	03d09000 	.word	0x03d09000
10003044:	016e3600 	.word	0x016e3600
10003048:	003d0900 	.word	0x003d0900

1000304c <HAL_RCC_GetPLL4ClockFreq>:
  *         right PLL4CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL4_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL4ClockFreq(PLL4_ClocksTypeDef *PLL4_Clocks)
{
1000304c:	b480      	push	{r7}
1000304e:	b089      	sub	sp, #36	; 0x24
10003050:	af00      	add	r7, sp, #0
10003052:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0U, pll4m = 1U, pll4fracen = 0U, hsivalue = 0U;
10003054:	2300      	movs	r3, #0
10003056:	61bb      	str	r3, [r7, #24]
10003058:	2301      	movs	r3, #1
1000305a:	617b      	str	r3, [r7, #20]
1000305c:	2300      	movs	r3, #0
1000305e:	613b      	str	r3, [r7, #16]
10003060:	2300      	movs	r3, #0
10003062:	60fb      	str	r3, [r7, #12]
  float fracn1, pll4vco = 0;
10003064:	f04f 0300 	mov.w	r3, #0
10003068:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL4_SOURCE();
1000306a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000306e:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003072:	f003 0303 	and.w	r3, r3, #3
10003076:	61bb      	str	r3, [r7, #24]
  pll4m = ((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVM4) >> RCC_PLL4CFGR1_DIVM4_Pos) + 1U;
10003078:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000307c:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10003080:	0c1b      	lsrs	r3, r3, #16
10003082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10003086:	3301      	adds	r3, #1
10003088:	617b      	str	r3, [r7, #20]
  pll4fracen = (RCC->PLL4FRACR & RCC_PLL4FRACR_FRACLE) >> RCC_PLL4FRACR_FRACLE_Pos;
1000308a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000308e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10003092:	0c1b      	lsrs	r3, r3, #16
10003094:	f003 0301 	and.w	r3, r3, #1
10003098:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll4fracen * ((RCC->PLL4FRACR & RCC_PLL4FRACR_FRACV) >> RCC_PLL4FRACR_FRACV_Pos));
1000309a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000309e:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
100030a2:	08db      	lsrs	r3, r3, #3
100030a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
100030a8:	693a      	ldr	r2, [r7, #16]
100030aa:	fb02 f303 	mul.w	r3, r2, r3
100030ae:	ee07 3a90 	vmov	s15, r3
100030b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
100030b6:	edc7 7a02 	vstr	s15, [r7, #8]
  pll4vco = (float)((float)((RCC->PLL4CFGR1 & RCC_PLL4CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x2000));  //Intermediary value
100030ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100030be:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
100030c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
100030c6:	3301      	adds	r3, #1
100030c8:	ee07 3a90 	vmov	s15, r3
100030cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100030d0:	edd7 6a02 	vldr	s13, [r7, #8]
100030d4:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 10003248 <HAL_RCC_GetPLL4ClockFreq+0x1fc>
100030d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
100030dc:	ee77 7a27 	vadd.f32	s15, s14, s15
100030e0:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
100030e4:	69bb      	ldr	r3, [r7, #24]
100030e6:	2b03      	cmp	r3, #3
100030e8:	d866      	bhi.n	100031b8 <HAL_RCC_GetPLL4ClockFreq+0x16c>
100030ea:	a201      	add	r2, pc, #4	; (adr r2, 100030f0 <HAL_RCC_GetPLL4ClockFreq+0xa4>)
100030ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100030f0:	10003101 	.word	0x10003101
100030f4:	1000315f 	.word	0x1000315f
100030f8:	1000317d 	.word	0x1000317d
100030fc:	1000319b 	.word	0x1000319b
  {
    case RCC_PLL4SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10003100:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003104:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10003108:	f003 0304 	and.w	r3, r3, #4
1000310c:	2b04      	cmp	r3, #4
1000310e:	d117      	bne.n	10003140 <HAL_RCC_GetPLL4ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10003110:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003114:	699b      	ldr	r3, [r3, #24]
10003116:	f003 0303 	and.w	r3, r3, #3
1000311a:	4a4c      	ldr	r2, [pc, #304]	; (1000324c <HAL_RCC_GetPLL4ClockFreq+0x200>)
1000311c:	fa22 f303 	lsr.w	r3, r2, r3
10003120:	60fb      	str	r3, [r7, #12]
        pll4vco *= (float)(hsivalue / pll4m);
10003122:	68fa      	ldr	r2, [r7, #12]
10003124:	697b      	ldr	r3, [r7, #20]
10003126:	fbb2 f3f3 	udiv	r3, r2, r3
1000312a:	ee07 3a90 	vmov	s15, r3
1000312e:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003132:	ed97 7a07 	vldr	s14, [r7, #28]
10003136:	ee67 7a27 	vmul.f32	s15, s14, s15
1000313a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll4vco *= (float)(HSI_VALUE / pll4m);
      }
      break;
1000313e:	e03b      	b.n	100031b8 <HAL_RCC_GetPLL4ClockFreq+0x16c>
        pll4vco *= (float)(HSI_VALUE / pll4m);
10003140:	4a42      	ldr	r2, [pc, #264]	; (1000324c <HAL_RCC_GetPLL4ClockFreq+0x200>)
10003142:	697b      	ldr	r3, [r7, #20]
10003144:	fbb2 f3f3 	udiv	r3, r2, r3
10003148:	ee07 3a90 	vmov	s15, r3
1000314c:	eef8 7a67 	vcvt.f32.u32	s15, s15
10003150:	ed97 7a07 	vldr	s14, [r7, #28]
10003154:	ee67 7a27 	vmul.f32	s15, s14, s15
10003158:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000315c:	e02c      	b.n	100031b8 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_HSE:  /* HSE used as PLL clock source */
      pll4vco *= (float)(HSE_VALUE / pll4m);
1000315e:	4a3c      	ldr	r2, [pc, #240]	; (10003250 <HAL_RCC_GetPLL4ClockFreq+0x204>)
10003160:	697b      	ldr	r3, [r7, #20]
10003162:	fbb2 f3f3 	udiv	r3, r2, r3
10003166:	ee07 3a90 	vmov	s15, r3
1000316a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000316e:	ed97 7a07 	vldr	s14, [r7, #28]
10003172:	ee67 7a27 	vmul.f32	s15, s14, s15
10003176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
1000317a:	e01d      	b.n	100031b8 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_CSI:  /* CSI used as PLL clock source */
      pll4vco *= (float)(CSI_VALUE / pll4m);
1000317c:	4a35      	ldr	r2, [pc, #212]	; (10003254 <HAL_RCC_GetPLL4ClockFreq+0x208>)
1000317e:	697b      	ldr	r3, [r7, #20]
10003180:	fbb2 f3f3 	udiv	r3, r2, r3
10003184:	ee07 3a90 	vmov	s15, r3
10003188:	eef8 7a67 	vcvt.f32.u32	s15, s15
1000318c:	ed97 7a07 	vldr	s14, [r7, #28]
10003190:	ee67 7a27 	vmul.f32	s15, s14, s15
10003194:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10003198:	e00e      	b.n	100031b8 <HAL_RCC_GetPLL4ClockFreq+0x16c>

    case RCC_PLL4SOURCE_I2S_CKIN:  /* Signal I2S_CKIN used as reference clock */
      pll4vco *= (float)(EXTERNAL_CLOCK_VALUE / pll4m);
1000319a:	4a2f      	ldr	r2, [pc, #188]	; (10003258 <HAL_RCC_GetPLL4ClockFreq+0x20c>)
1000319c:	697b      	ldr	r3, [r7, #20]
1000319e:	fbb2 f3f3 	udiv	r3, r2, r3
100031a2:	ee07 3a90 	vmov	s15, r3
100031a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
100031aa:	ed97 7a07 	vldr	s14, [r7, #28]
100031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
100031b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
100031b6:	bf00      	nop
  }

  PLL4_Clocks->PLL4_P_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVP) >> RCC_PLL4CFGR2_DIVP_Pos) + 1U)));
100031b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100031bc:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100031c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100031c4:	3301      	adds	r3, #1
100031c6:	ee07 3a90 	vmov	s15, r3
100031ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100031ce:	edd7 6a07 	vldr	s13, [r7, #28]
100031d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
100031d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
100031da:	ee17 2a90 	vmov	r2, s15
100031de:	687b      	ldr	r3, [r7, #4]
100031e0:	601a      	str	r2, [r3, #0]
  PLL4_Clocks->PLL4_Q_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVQ) >> RCC_PLL4CFGR2_DIVQ_Pos) + 1U)));
100031e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100031e6:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
100031ea:	0a1b      	lsrs	r3, r3, #8
100031ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
100031f0:	3301      	adds	r3, #1
100031f2:	ee07 3a90 	vmov	s15, r3
100031f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
100031fa:	edd7 6a07 	vldr	s13, [r7, #28]
100031fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
10003202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10003206:	ee17 2a90 	vmov	r2, s15
1000320a:	687b      	ldr	r3, [r7, #4]
1000320c:	605a      	str	r2, [r3, #4]
  PLL4_Clocks->PLL4_R_Frequency = (uint32_t)(pll4vco / ((float)(((RCC->PLL4CFGR2 & RCC_PLL4CFGR2_DIVR) >> RCC_PLL4CFGR2_DIVR_Pos) + 1U)));
1000320e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003212:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10003216:	0c1b      	lsrs	r3, r3, #16
10003218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1000321c:	3301      	adds	r3, #1
1000321e:	ee07 3a90 	vmov	s15, r3
10003222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10003226:	edd7 6a07 	vldr	s13, [r7, #28]
1000322a:	eec6 7a87 	vdiv.f32	s15, s13, s14
1000322e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10003232:	ee17 2a90 	vmov	r2, s15
10003236:	687b      	ldr	r3, [r7, #4]
10003238:	609a      	str	r2, [r3, #8]
}
1000323a:	bf00      	nop
1000323c:	3724      	adds	r7, #36	; 0x24
1000323e:	46bd      	mov	sp, r7
10003240:	f85d 7b04 	ldr.w	r7, [sp], #4
10003244:	4770      	bx	lr
10003246:	bf00      	nop
10003248:	46000000 	.word	0x46000000
1000324c:	03d09000 	.word	0x03d09000
10003250:	016e3600 	.word	0x016e3600
10003254:	003d0900 	.word	0x003d0900
10003258:	00bb8000 	.word	0x00bb8000

1000325c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
1000325c:	b580      	push	{r7, lr}
1000325e:	b082      	sub	sp, #8
10003260:	af00      	add	r7, sp, #0
  uint32_t apb1div = 0;
10003262:	2300      	movs	r3, #0
10003264:	607b      	str	r3, [r7, #4]

  /* Compute PCLK1 frequency ---------------------------*/
  apb1div = __HAL_RCC_GET_APB1_DIV();
10003266:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000326a:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
1000326e:	f003 0307 	and.w	r3, r3, #7
10003272:	607b      	str	r3, [r7, #4]
  if (apb1div > RCC_APB1_DIV16)
10003274:	687b      	ldr	r3, [r7, #4]
10003276:	2b04      	cmp	r3, #4
10003278:	d901      	bls.n	1000327e <HAL_RCC_GetPCLK1Freq+0x22>
  {
    apb1div = RCC_APB1_DIV16;
1000327a:	2304      	movs	r3, #4
1000327c:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb1div);
1000327e:	f000 f85a 	bl	10003336 <HAL_RCC_GetMCUFreq>
10003282:	4602      	mov	r2, r0
10003284:	687b      	ldr	r3, [r7, #4]
10003286:	fa22 f303 	lsr.w	r3, r2, r3
}
1000328a:	4618      	mov	r0, r3
1000328c:	3708      	adds	r7, #8
1000328e:	46bd      	mov	sp, r7
10003290:	bd80      	pop	{r7, pc}

10003292 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
10003292:	b580      	push	{r7, lr}
10003294:	b082      	sub	sp, #8
10003296:	af00      	add	r7, sp, #0
  uint32_t apb2div = 0;
10003298:	2300      	movs	r3, #0
1000329a:	607b      	str	r3, [r7, #4]

  /* Compute PCLK2 frequency ---------------------------*/
  apb2div = __HAL_RCC_GET_APB2_DIV();
1000329c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032a0:	f8d3 3838 	ldr.w	r3, [r3, #2104]	; 0x838
100032a4:	f003 0307 	and.w	r3, r3, #7
100032a8:	607b      	str	r3, [r7, #4]
  if (apb2div > RCC_APB2_DIV16)
100032aa:	687b      	ldr	r3, [r7, #4]
100032ac:	2b04      	cmp	r3, #4
100032ae:	d901      	bls.n	100032b4 <HAL_RCC_GetPCLK2Freq+0x22>
  {
    apb2div = RCC_APB2_DIV16;
100032b0:	2304      	movs	r3, #4
100032b2:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetMCUFreq() >> apb2div);
100032b4:	f000 f83f 	bl	10003336 <HAL_RCC_GetMCUFreq>
100032b8:	4602      	mov	r2, r0
100032ba:	687b      	ldr	r3, [r7, #4]
100032bc:	fa22 f303 	lsr.w	r3, r2, r3
}
100032c0:	4618      	mov	r0, r3
100032c2:	3708      	adds	r7, #8
100032c4:	46bd      	mov	sp, r7
100032c6:	bd80      	pop	{r7, pc}

100032c8 <HAL_RCC_GetPCLK5Freq>:
  * @note   Each time PCLK5 changes, this function must be called to update the
  *         right PCLK5 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK5 frequency
  */
uint32_t HAL_RCC_GetPCLK5Freq(void)
{
100032c8:	b580      	push	{r7, lr}
100032ca:	b082      	sub	sp, #8
100032cc:	af00      	add	r7, sp, #0
  uint32_t apb5div = 0;
100032ce:	2300      	movs	r3, #0
100032d0:	607b      	str	r3, [r7, #4]

  /* Compute PCLK5 frequency ---------------------------*/
  apb5div = __HAL_RCC_GET_APB5_DIV();
100032d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100032d8:	f003 0307 	and.w	r3, r3, #7
100032dc:	607b      	str	r3, [r7, #4]
  if (apb5div > RCC_APB5_DIV16)
100032de:	687b      	ldr	r3, [r7, #4]
100032e0:	2b04      	cmp	r3, #4
100032e2:	d901      	bls.n	100032e8 <HAL_RCC_GetPCLK5Freq+0x20>
  {
    apb5div = RCC_APB5_DIV16;
100032e4:	2304      	movs	r3, #4
100032e6:	607b      	str	r3, [r7, #4]
  }

  return (HAL_RCC_GetACLKFreq() >> apb5div);
100032e8:	f000 f808 	bl	100032fc <HAL_RCC_GetACLKFreq>
100032ec:	4602      	mov	r2, r0
100032ee:	687b      	ldr	r3, [r7, #4]
100032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
100032f4:	4618      	mov	r0, r3
100032f6:	3708      	adds	r7, #8
100032f8:	46bd      	mov	sp, r7
100032fa:	bd80      	pop	{r7, pc}

100032fc <HAL_RCC_GetACLKFreq>:
  * @note   Each time ACLK changes, this function must be called to update the
  *         right ACLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval ACLK frequency
  */
uint32_t HAL_RCC_GetACLKFreq(void)
{
100032fc:	b580      	push	{r7, lr}
100032fe:	b082      	sub	sp, #8
10003300:	af00      	add	r7, sp, #0
  uint32_t axidiv = 0;
10003302:	2300      	movs	r3, #0
10003304:	607b      	str	r3, [r7, #4]

  /* Compute ACLK frequency ---------------------------*/
  axidiv = __HAL_RCC_GET_AXI_DIV();
10003306:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1000330c:	f003 0307 	and.w	r3, r3, #7
10003310:	607b      	str	r3, [r7, #4]
  if (axidiv > RCC_AXI_DIV4)
10003312:	687b      	ldr	r3, [r7, #4]
10003314:	2b03      	cmp	r3, #3
10003316:	d901      	bls.n	1000331c <HAL_RCC_GetACLKFreq+0x20>
  {
    axidiv = RCC_AXI_DIV4;
10003318:	2303      	movs	r3, #3
1000331a:	607b      	str	r3, [r7, #4]
  }
  axidiv += 1;
1000331c:	687b      	ldr	r3, [r7, #4]
1000331e:	3301      	adds	r3, #1
10003320:	607b      	str	r3, [r7, #4]

  return HAL_RCC_GetAXISSFreq() / axidiv;
10003322:	f000 f82b 	bl	1000337c <HAL_RCC_GetAXISSFreq>
10003326:	4602      	mov	r2, r0
10003328:	687b      	ldr	r3, [r7, #4]
1000332a:	fbb2 f3f3 	udiv	r3, r2, r3
}
1000332e:	4618      	mov	r0, r3
10003330:	3708      	adds	r7, #8
10003332:	46bd      	mov	sp, r7
10003334:	bd80      	pop	{r7, pc}

10003336 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10003336:	b580      	push	{r7, lr}
10003338:	b082      	sub	sp, #8
1000333a:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
1000333c:	2300      	movs	r3, #0
1000333e:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10003340:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003344:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10003348:	f003 030f 	and.w	r3, r3, #15
1000334c:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
1000334e:	687b      	ldr	r3, [r7, #4]
10003350:	2b09      	cmp	r3, #9
10003352:	d901      	bls.n	10003358 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10003354:	2309      	movs	r3, #9
10003356:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10003358:	f000 f84e 	bl	100033f8 <HAL_RCC_GetMCUSSFreq>
1000335c:	4602      	mov	r2, r0
1000335e:	687b      	ldr	r3, [r7, #4]
10003360:	fa22 f303 	lsr.w	r3, r2, r3
}
10003364:	4618      	mov	r0, r3
10003366:	3708      	adds	r7, #8
10003368:	46bd      	mov	sp, r7
1000336a:	bd80      	pop	{r7, pc}

1000336c <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
1000336c:	b580      	push	{r7, lr}
1000336e:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10003370:	f7ff ffe1 	bl	10003336 <HAL_RCC_GetMCUFreq>
10003374:	4603      	mov	r3, r0
#endif
}
10003376:	4618      	mov	r0, r3
10003378:	bd80      	pop	{r7, pc}
	...

1000337c <HAL_RCC_GetAXISSFreq>:
  return mpussfreq;
}


uint32_t HAL_RCC_GetAXISSFreq()
{
1000337c:	b580      	push	{r7, lr}
1000337e:	b084      	sub	sp, #16
10003380:	af00      	add	r7, sp, #0
  uint32_t axissfreq = 0;
10003382:	2300      	movs	r3, #0
10003384:	60fb      	str	r3, [r7, #12]
  PLL2_ClocksTypeDef pll2_clocks;

  switch (__HAL_RCC_GET_AXIS_SOURCE())
10003386:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000338a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000338c:	f003 0307 	and.w	r3, r3, #7
10003390:	2b02      	cmp	r3, #2
10003392:	d006      	beq.n	100033a2 <HAL_RCC_GetAXISSFreq+0x26>
10003394:	2b02      	cmp	r3, #2
10003396:	d823      	bhi.n	100033e0 <HAL_RCC_GetAXISSFreq+0x64>
10003398:	2b00      	cmp	r3, #0
1000339a:	d009      	beq.n	100033b0 <HAL_RCC_GetAXISSFreq+0x34>
1000339c:	2b01      	cmp	r3, #1
1000339e:	d01c      	beq.n	100033da <HAL_RCC_GetAXISSFreq+0x5e>
100033a0:	e01e      	b.n	100033e0 <HAL_RCC_GetAXISSFreq+0x64>
  {
    case RCC_AXISSOURCE_PLL2:
      HAL_RCC_GetPLL2ClockFreq(&pll2_clocks);
100033a2:	463b      	mov	r3, r7
100033a4:	4618      	mov	r0, r3
100033a6:	f7ff fc6b 	bl	10002c80 <HAL_RCC_GetPLL2ClockFreq>
      axissfreq = pll2_clocks.PLL2_P_Frequency;
100033aa:	683b      	ldr	r3, [r7, #0]
100033ac:	60fb      	str	r3, [r7, #12]
      break;
100033ae:	e01a      	b.n	100033e6 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSI:
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
100033b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033b4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
100033b8:	f003 0304 	and.w	r3, r3, #4
100033bc:	2b04      	cmp	r3, #4
100033be:	d109      	bne.n	100033d4 <HAL_RCC_GetAXISSFreq+0x58>
      {
        axissfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
100033c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100033c4:	699b      	ldr	r3, [r3, #24]
100033c6:	f003 0303 	and.w	r3, r3, #3
100033ca:	4a09      	ldr	r2, [pc, #36]	; (100033f0 <HAL_RCC_GetAXISSFreq+0x74>)
100033cc:	fa22 f303 	lsr.w	r3, r2, r3
100033d0:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        axissfreq = HSI_VALUE;
      }
      break;
100033d2:	e008      	b.n	100033e6 <HAL_RCC_GetAXISSFreq+0x6a>
        axissfreq = HSI_VALUE;
100033d4:	4b06      	ldr	r3, [pc, #24]	; (100033f0 <HAL_RCC_GetAXISSFreq+0x74>)
100033d6:	60fb      	str	r3, [r7, #12]
      break;
100033d8:	e005      	b.n	100033e6 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_HSE:
      axissfreq = HSE_VALUE;
100033da:	4b06      	ldr	r3, [pc, #24]	; (100033f4 <HAL_RCC_GetAXISSFreq+0x78>)
100033dc:	60fb      	str	r3, [r7, #12]
      break;
100033de:	e002      	b.n	100033e6 <HAL_RCC_GetAXISSFreq+0x6a>

    case RCC_AXISSOURCE_OFF:
    default:
      axissfreq = 0; /* ck_axiss is gated */
100033e0:	2300      	movs	r3, #0
100033e2:	60fb      	str	r3, [r7, #12]
      break;
100033e4:	bf00      	nop
  }

  return axissfreq;
100033e6:	68fb      	ldr	r3, [r7, #12]
}
100033e8:	4618      	mov	r0, r3
100033ea:	3710      	adds	r7, #16
100033ec:	46bd      	mov	sp, r7
100033ee:	bd80      	pop	{r7, pc}
100033f0:	03d09000 	.word	0x03d09000
100033f4:	016e3600 	.word	0x016e3600

100033f8 <HAL_RCC_GetMCUSSFreq>:

uint32_t HAL_RCC_GetMCUSSFreq()
{
100033f8:	b580      	push	{r7, lr}
100033fa:	b084      	sub	sp, #16
100033fc:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
100033fe:	2300      	movs	r3, #0
10003400:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10003402:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10003408:	f003 0303 	and.w	r3, r3, #3
1000340c:	2b03      	cmp	r3, #3
1000340e:	d822      	bhi.n	10003456 <HAL_RCC_GetMCUSSFreq+0x5e>
10003410:	a201      	add	r2, pc, #4	; (adr r2, 10003418 <HAL_RCC_GetMCUSSFreq+0x20>)
10003412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10003416:	bf00      	nop
10003418:	10003437 	.word	0x10003437
1000341c:	1000344b 	.word	0x1000344b
10003420:	10003451 	.word	0x10003451
10003424:	10003429 	.word	0x10003429
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10003428:	463b      	mov	r3, r7
1000342a:	4618      	mov	r0, r3
1000342c:	f7ff fd14 	bl	10002e58 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10003430:	683b      	ldr	r3, [r7, #0]
10003432:	60fb      	str	r3, [r7, #12]
      break;
10003434:	e00f      	b.n	10003456 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10003436:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000343a:	699b      	ldr	r3, [r3, #24]
1000343c:	f003 0303 	and.w	r3, r3, #3
10003440:	4a07      	ldr	r2, [pc, #28]	; (10003460 <HAL_RCC_GetMCUSSFreq+0x68>)
10003442:	fa22 f303 	lsr.w	r3, r2, r3
10003446:	60fb      	str	r3, [r7, #12]

      break;
10003448:	e005      	b.n	10003456 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
1000344a:	4b06      	ldr	r3, [pc, #24]	; (10003464 <HAL_RCC_GetMCUSSFreq+0x6c>)
1000344c:	60fb      	str	r3, [r7, #12]
      break;
1000344e:	e002      	b.n	10003456 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10003450:	4b05      	ldr	r3, [pc, #20]	; (10003468 <HAL_RCC_GetMCUSSFreq+0x70>)
10003452:	60fb      	str	r3, [r7, #12]
      break;
10003454:	bf00      	nop
  }

  return mcussfreq;
10003456:	68fb      	ldr	r3, [r7, #12]
}
10003458:	4618      	mov	r0, r3
1000345a:	3710      	adds	r7, #16
1000345c:	46bd      	mov	sp, r7
1000345e:	bd80      	pop	{r7, pc}
10003460:	03d09000 	.word	0x03d09000
10003464:	016e3600 	.word	0x016e3600
10003468:	003d0900 	.word	0x003d0900

1000346c <HAL_RCC_WAKEUP_IRQHandler>:
  * @brief This function handles the RCC Wake up interrupt (rcc_mcu_wkup_irq/rcc_mpu_wkup_irq)
  * @note This API should be called under the RCC_WAKEUP_Handler().
  * @retval None
  */
void HAL_RCC_WAKEUP_IRQHandler(void)
{
1000346c:	b580      	push	{r7, lr}
1000346e:	af00      	add	r7, sp, #0
  /* Check RCC WKUP flag is set */
  if (__HAL_RCC_GET_IT(RCC_IT_WKUP) != RESET)
10003470:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003474:	f8d3 3c18 	ldr.w	r3, [r3, #3096]	; 0xc18
10003478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
1000347c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10003480:	d107      	bne.n	10003492 <HAL_RCC_WAKEUP_IRQHandler+0x26>
  {
    /* Clear the RCC WKUP flag bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_WKUP);
10003482:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003486:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
1000348a:	f8c3 2c18 	str.w	r2, [r3, #3096]	; 0xc18

    /* RCC WKUP interrupt user callback */
    HAL_RCC_WAKEUP_Callback();
1000348e:	f000 f802 	bl	10003496 <HAL_RCC_WAKEUP_Callback>
  }
}
10003492:	bf00      	nop
10003494:	bd80      	pop	{r7, pc}

10003496 <HAL_RCC_WAKEUP_Callback>:
/**
  * @brief  RCC WAKEUP interrupt callback
  * @retval None
  */
__weak void HAL_RCC_WAKEUP_Callback(void)
{
10003496:	b480      	push	{r7}
10003498:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_WAKEUP_Callback could be implemented in the user file
  */
}
1000349a:	bf00      	nop
1000349c:	46bd      	mov	sp, r7
1000349e:	f85d 7b04 	ldr.w	r7, [sp], #4
100034a2:	4770      	bx	lr

100034a4 <RCCEx_PLL2_Config>:
  *
  * @retval HAL status
  */

HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLLInitTypeDef *pll2)
{
100034a4:	b580      	push	{r7, lr}
100034a6:	b084      	sub	sp, #16
100034a8:	af00      	add	r7, sp, #0
100034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll2->PLLState));
  if ((pll2->PLLState) != RCC_PLL_NONE)
100034ac:	687b      	ldr	r3, [r7, #4]
100034ae:	681b      	ldr	r3, [r3, #0]
100034b0:	2b00      	cmp	r3, #0
100034b2:	f000 8171 	beq.w	10003798 <RCCEx_PLL2_Config+0x2f4>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL2_IN_USE()) /* If not used then */
100034b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100034bc:	f003 0307 	and.w	r3, r3, #7
100034c0:	2b02      	cmp	r3, #2
100034c2:	d108      	bne.n	100034d6 <RCCEx_PLL2_Config+0x32>
100034c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100034ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100034ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100034d2:	f000 815f 	beq.w	10003794 <RCCEx_PLL2_Config+0x2f0>
    {
      if ((pll2->PLLState) == RCC_PLL_ON)
100034d6:	687b      	ldr	r3, [r7, #4]
100034d8:	681b      	ldr	r3, [r3, #0]
100034da:	2b02      	cmp	r3, #2
100034dc:	f040 8130 	bne.w	10003740 <RCCEx_PLL2_Config+0x29c>
        assert_param(IS_RCC_PLLP2_VALUE(pll2->PLLP));
        assert_param(IS_RCC_PLLQ2_VALUE(pll2->PLLQ));
        assert_param(IS_RCC_PLLR2_VALUE(pll2->PLLR));

        /* Check that PLL2 OSC clock source is already set */
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100034e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100034e6:	f003 0303 	and.w	r3, r3, #3
100034ea:	2b00      	cmp	r3, #0
100034ec:	d008      	beq.n	10003500 <RCCEx_PLL2_Config+0x5c>
            (__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSE))
100034ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100034f4:	f003 0303 	and.w	r3, r3, #3
        if ((__HAL_RCC_GET_PLL12_SOURCE() != RCC_PLL12SOURCE_HSI) &&
100034f8:	2b01      	cmp	r3, #1
100034fa:	d001      	beq.n	10003500 <RCCEx_PLL2_Config+0x5c>
        {
          return HAL_ERROR;
100034fc:	2301      	movs	r3, #1
100034fe:	e14c      	b.n	1000379a <RCCEx_PLL2_Config+0x2f6>
        }

        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003500:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003508:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000350c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003510:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the main PLL. */
        __HAL_RCC_PLL2_DISABLE();
10003514:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000351c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003520:	f023 0301 	bic.w	r3, r3, #1
10003524:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003528:	f7fd ffea 	bl	10001500 <HAL_GetTick>
1000352c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000352e:	e008      	b.n	10003542 <RCCEx_PLL2_Config+0x9e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003530:	f7fd ffe6 	bl	10001500 <HAL_GetTick>
10003534:	4602      	mov	r2, r0
10003536:	68fb      	ldr	r3, [r7, #12]
10003538:	1ad3      	subs	r3, r2, r3
1000353a:	2b64      	cmp	r3, #100	; 0x64
1000353c:	d901      	bls.n	10003542 <RCCEx_PLL2_Config+0x9e>
          {
            return HAL_TIMEOUT;
1000353e:	2303      	movs	r3, #3
10003540:	e12b      	b.n	1000379a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003542:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000354a:	f003 0302 	and.w	r3, r3, #2
1000354e:	2b02      	cmp	r3, #2
10003550:	d0ee      	beq.n	10003530 <RCCEx_PLL2_Config+0x8c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Do not change pll src if already in use */
        if (__IS_PLL1_IN_USE())
10003552:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003556:	6a1b      	ldr	r3, [r3, #32]
10003558:	f003 0303 	and.w	r3, r3, #3
1000355c:	2b02      	cmp	r3, #2
1000355e:	d107      	bne.n	10003570 <RCCEx_PLL2_Config+0xcc>
10003560:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003564:	6a1b      	ldr	r3, [r3, #32]
10003566:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
1000356a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000356e:	d00e      	beq.n	1000358e <RCCEx_PLL2_Config+0xea>
10003570:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003574:	6a1b      	ldr	r3, [r3, #32]
10003576:	f003 0303 	and.w	r3, r3, #3
1000357a:	2b03      	cmp	r3, #3
1000357c:	d112      	bne.n	100035a4 <RCCEx_PLL2_Config+0x100>
1000357e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003582:	6a1b      	ldr	r3, [r3, #32]
10003584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
1000358c:	d10a      	bne.n	100035a4 <RCCEx_PLL2_Config+0x100>
        {
          if (pll2->PLLSource != __HAL_RCC_GET_PLL12_SOURCE())
1000358e:	687b      	ldr	r3, [r7, #4]
10003590:	685a      	ldr	r2, [r3, #4]
10003592:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10003598:	f003 0303 	and.w	r3, r3, #3
1000359c:	429a      	cmp	r2, r3
1000359e:	d00c      	beq.n	100035ba <RCCEx_PLL2_Config+0x116>
          {
            return HAL_ERROR;
100035a0:	2301      	movs	r3, #1
100035a2:	e0fa      	b.n	1000379a <RCCEx_PLL2_Config+0x2f6>
          }
        }
        else
        {
          /* Configure PLL1 and PLL2 clock source */
          __HAL_RCC_PLL12_SOURCE(pll2->PLLSource);
100035a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100035aa:	f023 0203 	bic.w	r2, r3, #3
100035ae:	687b      	ldr	r3, [r7, #4]
100035b0:	685b      	ldr	r3, [r3, #4]
100035b2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100035b6:	4313      	orrs	r3, r2
100035b8:	628b      	str	r3, [r1, #40]	; 0x28
        }

        /* Configure the PLL2 multiplication and division factors. */
        __HAL_RCC_PLL2_CONFIG(
100035ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035be:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
100035c2:	4b78      	ldr	r3, [pc, #480]	; (100037a4 <RCCEx_PLL2_Config+0x300>)
100035c4:	4013      	ands	r3, r2
100035c6:	687a      	ldr	r2, [r7, #4]
100035c8:	68d2      	ldr	r2, [r2, #12]
100035ca:	1e51      	subs	r1, r2, #1
100035cc:	687a      	ldr	r2, [r7, #4]
100035ce:	6892      	ldr	r2, [r2, #8]
100035d0:	3a01      	subs	r2, #1
100035d2:	0412      	lsls	r2, r2, #16
100035d4:	430a      	orrs	r2, r1
100035d6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100035da:	4313      	orrs	r3, r2
100035dc:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
100035e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100035e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
100035e8:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100035ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100035f0:	687a      	ldr	r2, [r7, #4]
100035f2:	6912      	ldr	r2, [r2, #16]
100035f4:	1e51      	subs	r1, r2, #1
100035f6:	687a      	ldr	r2, [r7, #4]
100035f8:	6952      	ldr	r2, [r2, #20]
100035fa:	3a01      	subs	r2, #1
100035fc:	0212      	lsls	r2, r2, #8
100035fe:	4311      	orrs	r1, r2
10003600:	687a      	ldr	r2, [r7, #4]
10003602:	6992      	ldr	r2, [r2, #24]
10003604:	3a01      	subs	r2, #1
10003606:	0412      	lsls	r2, r2, #16
10003608:	430a      	orrs	r2, r1
1000360a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000360e:	4313      	orrs	r3, r2
10003610:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
          pll2->PLLQ,
          pll2->PLLR);


        /* Configure the Fractional Divider */
        __HAL_RCC_PLL2FRACV_DISABLE(); //Set FRACLE to ‘0’
10003614:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003618:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000361c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003620:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10003624:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll2->PLLMODE == RCC_PLL_INTEGER))
10003628:	687b      	ldr	r3, [r7, #4]
1000362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000362c:	2b02      	cmp	r3, #2
1000362e:	d003      	beq.n	10003638 <RCCEx_PLL2_Config+0x194>
10003630:	687b      	ldr	r3, [r7, #4]
10003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003634:	2b00      	cmp	r3, #0
10003636:	d10c      	bne.n	10003652 <RCCEx_PLL2_Config+0x1ae>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL2FRACV_CONFIG(0); //Set FRACV to '0'
10003638:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000363c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
10003640:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003644:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003648:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
1000364c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
10003650:	e00f      	b.n	10003672 <RCCEx_PLL2_Config+0x1ce>
        }
        else
        {
          /* Configure PLL  PLL2FRACV  in fractional mode*/
          __HAL_RCC_PLL2FRACV_CONFIG(pll2->PLLFRACV);
10003652:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003656:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000365a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000365e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003662:	687a      	ldr	r2, [r7, #4]
10003664:	6a12      	ldr	r2, [r2, #32]
10003666:	00d2      	lsls	r2, r2, #3
10003668:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000366c:	4313      	orrs	r3, r2
1000366e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
        }
        __HAL_RCC_PLL2FRACV_ENABLE(); //Set FRACLE to ‘1’
10003672:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003676:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
1000367a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000367e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10003682:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0


        /* Configure the Spread Control */
        if (pll2->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003686:	687b      	ldr	r3, [r7, #4]
10003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000368a:	2b02      	cmp	r3, #2
1000368c:	d124      	bne.n	100036d8 <RCCEx_PLL2_Config+0x234>
          assert_param(IS_RCC_SSCG_MODE(pll2->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll2->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll2->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll2->MOD_PER));

          __HAL_RCC_PLL2CSGCONFIG(pll2->MOD_PER, pll2->TPDFN_DIS, pll2->RPDFN_DIS,
1000368e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003692:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
10003696:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
1000369a:	687b      	ldr	r3, [r7, #4]
1000369c:	6a99      	ldr	r1, [r3, #40]	; 0x28
1000369e:	687b      	ldr	r3, [r7, #4]
100036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
100036a2:	4319      	orrs	r1, r3
100036a4:	687b      	ldr	r3, [r7, #4]
100036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100036a8:	4319      	orrs	r1, r3
100036aa:	687b      	ldr	r3, [r7, #4]
100036ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
100036ae:	4319      	orrs	r1, r3
100036b0:	687b      	ldr	r3, [r7, #4]
100036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
100036b4:	041b      	lsls	r3, r3, #16
100036b6:	430b      	orrs	r3, r1
100036b8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100036bc:	4313      	orrs	r3, r2
100036be:	f8c1 30a4 	str.w	r3, [r1, #164]	; 0xa4
                                  pll2->SSCG_MODE, pll2->INC_STEP);
          __HAL_RCC_PLL2_SSMODE_ENABLE();
100036c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100036ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100036ce:	f043 0304 	orr.w	r3, r3, #4
100036d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
100036d6:	e009      	b.n	100036ec <RCCEx_PLL2_Config+0x248>
        }
        else
        {
          __HAL_RCC_PLL2_SSMODE_DISABLE();
100036d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100036e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100036e4:	f023 0304 	bic.w	r3, r3, #4
100036e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }


        /* Enable the PLL2. */
        __HAL_RCC_PLL2_ENABLE();
100036ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100036f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
100036f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100036f8:	f043 0301 	orr.w	r3, r3, #1
100036fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003700:	f7fd fefe 	bl	10001500 <HAL_GetTick>
10003704:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
10003706:	e008      	b.n	1000371a <RCCEx_PLL2_Config+0x276>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003708:	f7fd fefa 	bl	10001500 <HAL_GetTick>
1000370c:	4602      	mov	r2, r0
1000370e:	68fb      	ldr	r3, [r7, #12]
10003710:	1ad3      	subs	r3, r2, r3
10003712:	2b64      	cmp	r3, #100	; 0x64
10003714:	d901      	bls.n	1000371a <RCCEx_PLL2_Config+0x276>
          {
            return HAL_TIMEOUT;
10003716:	2303      	movs	r3, #3
10003718:	e03f      	b.n	1000379a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == RESET)
1000371a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000371e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003722:	f003 0302 	and.w	r3, r3, #2
10003726:	2b02      	cmp	r3, #2
10003728:	d1ee      	bne.n	10003708 <RCCEx_PLL2_Config+0x264>
          }
        }
        /*Enable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
1000372a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000372e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003732:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003736:	f043 0370 	orr.w	r3, r3, #112	; 0x70
1000373a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      if ((pll2->PLLState) == RCC_PLL_ON)
1000373e:	e02b      	b.n	10003798 <RCCEx_PLL2_Config+0x2f4>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL2CLKOUT_DISABLE(RCC_PLL2_DIVP | RCC_PLL2_DIVQ | RCC_PLL2_DIVR);
10003740:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
10003748:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000374c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003750:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        /* Disable the PLL2. */
        __HAL_RCC_PLL2_DISABLE();
10003754:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000375c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003760:	f023 0301 	bic.w	r3, r3, #1
10003764:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003768:	f7fd feca 	bl	10001500 <HAL_GetTick>
1000376c:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
1000376e:	e008      	b.n	10003782 <RCCEx_PLL2_Config+0x2de>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003770:	f7fd fec6 	bl	10001500 <HAL_GetTick>
10003774:	4602      	mov	r2, r0
10003776:	68fb      	ldr	r3, [r7, #12]
10003778:	1ad3      	subs	r3, r2, r3
1000377a:	2b64      	cmp	r3, #100	; 0x64
1000377c:	d901      	bls.n	10003782 <RCCEx_PLL2_Config+0x2de>
          {
            return HAL_TIMEOUT;
1000377e:	2303      	movs	r3, #3
10003780:	e00b      	b.n	1000379a <RCCEx_PLL2_Config+0x2f6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
10003782:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
1000378a:	f003 0302 	and.w	r3, r3, #2
1000378e:	2b02      	cmp	r3, #2
10003790:	d0ee      	beq.n	10003770 <RCCEx_PLL2_Config+0x2cc>
      if ((pll2->PLLState) == RCC_PLL_ON)
10003792:	e001      	b.n	10003798 <RCCEx_PLL2_Config+0x2f4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10003794:	2301      	movs	r3, #1
10003796:	e000      	b.n	1000379a <RCCEx_PLL2_Config+0x2f6>
    }
  }
  return HAL_OK;
10003798:	2300      	movs	r3, #0

}
1000379a:	4618      	mov	r0, r3
1000379c:	3710      	adds	r7, #16
1000379e:	46bd      	mov	sp, r7
100037a0:	bd80      	pop	{r7, pc}
100037a2:	bf00      	nop
100037a4:	ffc0fe00 	.word	0xffc0fe00

100037a8 <RCCEx_PLL3_Config>:
  * @param  pll3: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLLInitTypeDef *pll3)
{
100037a8:	b580      	push	{r7, lr}
100037aa:	b084      	sub	sp, #16
100037ac:	af00      	add	r7, sp, #0
100037ae:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll3->PLLState));
  if ((pll3->PLLState) != RCC_PLL_NONE)
100037b0:	687b      	ldr	r3, [r7, #4]
100037b2:	681b      	ldr	r3, [r3, #0]
100037b4:	2b00      	cmp	r3, #0
100037b6:	f000 815a 	beq.w	10003a6e <RCCEx_PLL3_Config+0x2c6>
  {
    /* Check if the PLL is used as system clock or not (MPU, MCU, AXISS)*/
    if (!__IS_PLL3_IN_USE()) /* If not used then*/
100037ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100037c0:	f003 0303 	and.w	r3, r3, #3
100037c4:	2b03      	cmp	r3, #3
100037c6:	d108      	bne.n	100037da <RCCEx_PLL3_Config+0x32>
100037c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100037ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100037d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100037d6:	f000 8148 	beq.w	10003a6a <RCCEx_PLL3_Config+0x2c2>
    {
      if ((pll3->PLLState) == RCC_PLL_ON)
100037da:	687b      	ldr	r3, [r7, #4]
100037dc:	681b      	ldr	r3, [r3, #0]
100037de:	2b02      	cmp	r3, #2
100037e0:	f040 8119 	bne.w	10003a16 <RCCEx_PLL3_Config+0x26e>
        assert_param(IS_RCC_PLLP3_VALUE(pll3->PLLP));
        assert_param(IS_RCC_PLLQ3_VALUE(pll3->PLLQ));
        assert_param(IS_RCC_PLLR3_VALUE(pll3->PLLR));

        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
100037e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037e8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100037ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100037f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
100037f4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the main PLL. */
        __HAL_RCC_PLL3_DISABLE();
100037f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100037fc:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003800:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003804:	f023 0301 	bic.w	r3, r3, #1
10003808:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
1000380c:	f7fd fe78 	bl	10001500 <HAL_GetTick>
10003810:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003812:	e008      	b.n	10003826 <RCCEx_PLL3_Config+0x7e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003814:	f7fd fe74 	bl	10001500 <HAL_GetTick>
10003818:	4602      	mov	r2, r0
1000381a:	68fb      	ldr	r3, [r7, #12]
1000381c:	1ad3      	subs	r3, r2, r3
1000381e:	2b64      	cmp	r3, #100	; 0x64
10003820:	d901      	bls.n	10003826 <RCCEx_PLL3_Config+0x7e>
          {
            return HAL_TIMEOUT;
10003822:	2303      	movs	r3, #3
10003824:	e124      	b.n	10003a70 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003826:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000382a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000382e:	f003 0302 	and.w	r3, r3, #2
10003832:	2b02      	cmp	r3, #2
10003834:	d0ee      	beq.n	10003814 <RCCEx_PLL3_Config+0x6c>
        -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
        -Fractional Division Enable (PLLxFRACNEN)
        -Fractional Division factor (FRACNx)*/

        /* Configure PLL3 clock source */
        __HAL_RCC_PLL3_SOURCE(pll3->PLLSource);
10003836:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000383a:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000383e:	f023 0203 	bic.w	r2, r3, #3
10003842:	687b      	ldr	r3, [r7, #4]
10003844:	685b      	ldr	r3, [r3, #4]
10003846:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000384a:	4313      	orrs	r3, r2
1000384c:	f8c1 3820 	str.w	r3, [r1, #2080]	; 0x820

        /* Wait till PLL SOURCE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10003850:	e008      	b.n	10003864 <RCCEx_PLL3_Config+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003852:	f7fd fe55 	bl	10001500 <HAL_GetTick>
10003856:	4602      	mov	r2, r0
10003858:	68fb      	ldr	r3, [r7, #12]
1000385a:	1ad3      	subs	r3, r2, r3
1000385c:	2b64      	cmp	r3, #100	; 0x64
1000385e:	d901      	bls.n	10003864 <RCCEx_PLL3_Config+0xbc>
          {
            return HAL_TIMEOUT;
10003860:	2303      	movs	r3, #3
10003862:	e105      	b.n	10003a70 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3SRCRDY) == RESET)
10003864:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003868:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
1000386c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003874:	d1ed      	bne.n	10003852 <RCCEx_PLL3_Config+0xaa>
          }
        }

        /* Select PLL3 input reference frequency range */
        __HAL_RCC_PLL3_IFRANGE(pll3->PLLRGE) ;
10003876:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000387a:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
1000387e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10003882:	687b      	ldr	r3, [r7, #4]
10003884:	69db      	ldr	r3, [r3, #28]
10003886:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000388a:	4313      	orrs	r3, r2
1000388c:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884

        /* Configure the PLL3 multiplication and division factors. */
        __HAL_RCC_PLL3_CONFIG(
10003890:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003894:	f8d3 2884 	ldr.w	r2, [r3, #2180]	; 0x884
10003898:	4b77      	ldr	r3, [pc, #476]	; (10003a78 <RCCEx_PLL3_Config+0x2d0>)
1000389a:	4013      	ands	r3, r2
1000389c:	687a      	ldr	r2, [r7, #4]
1000389e:	68d2      	ldr	r2, [r2, #12]
100038a0:	1e51      	subs	r1, r2, #1
100038a2:	687a      	ldr	r2, [r7, #4]
100038a4:	6892      	ldr	r2, [r2, #8]
100038a6:	3a01      	subs	r2, #1
100038a8:	0412      	lsls	r2, r2, #16
100038aa:	430a      	orrs	r2, r1
100038ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100038b0:	4313      	orrs	r3, r2
100038b2:	f8c1 3884 	str.w	r3, [r1, #2180]	; 0x884
100038b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038ba:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
100038be:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
100038c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
100038c6:	687a      	ldr	r2, [r7, #4]
100038c8:	6912      	ldr	r2, [r2, #16]
100038ca:	1e51      	subs	r1, r2, #1
100038cc:	687a      	ldr	r2, [r7, #4]
100038ce:	6952      	ldr	r2, [r2, #20]
100038d0:	3a01      	subs	r2, #1
100038d2:	0212      	lsls	r2, r2, #8
100038d4:	4311      	orrs	r1, r2
100038d6:	687a      	ldr	r2, [r7, #4]
100038d8:	6992      	ldr	r2, [r2, #24]
100038da:	3a01      	subs	r2, #1
100038dc:	0412      	lsls	r2, r2, #16
100038de:	430a      	orrs	r2, r1
100038e0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100038e4:	4313      	orrs	r3, r2
100038e6:	f8c1 3888 	str.w	r3, [r1, #2184]	; 0x888
          pll3->PLLP,
          pll3->PLLQ,
          pll3->PLLR);

        /* Configure the Fractional Divider */
        __HAL_RCC_PLL3FRACV_DISABLE(); //Set FRACLE to ‘0’
100038ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100038ee:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
100038f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100038f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
100038fa:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
        /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
        if ((pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll3->PLLMODE == RCC_PLL_INTEGER))
100038fe:	687b      	ldr	r3, [r7, #4]
10003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003902:	2b02      	cmp	r3, #2
10003904:	d003      	beq.n	1000390e <RCCEx_PLL3_Config+0x166>
10003906:	687b      	ldr	r3, [r7, #4]
10003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000390a:	2b00      	cmp	r3, #0
1000390c:	d10c      	bne.n	10003928 <RCCEx_PLL3_Config+0x180>
        {
          /* Do not use the fractional divider */
          __HAL_RCC_PLL3FRACV_CONFIG(0); //Set FRACV to '0'
1000390e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003912:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10003916:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000391a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
1000391e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003922:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c
10003926:	e00f      	b.n	10003948 <RCCEx_PLL3_Config+0x1a0>
        }
        else
        {
          /* Configure PLL  PLL3FRACV  in fractional mode*/
          __HAL_RCC_PLL3FRACV_CONFIG(pll3->PLLFRACV);
10003928:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000392c:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10003930:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003934:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003938:	687a      	ldr	r2, [r7, #4]
1000393a:	6a12      	ldr	r2, [r2, #32]
1000393c:	00d2      	lsls	r2, r2, #3
1000393e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003942:	4313      	orrs	r3, r2
10003944:	f8c1 388c 	str.w	r3, [r1, #2188]	; 0x88c
        }
        __HAL_RCC_PLL3FRACV_ENABLE(); //Set FRACLE to ‘1’
10003948:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000394c:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10003950:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10003958:	f8c2 388c 	str.w	r3, [r2, #2188]	; 0x88c


        /* Configure the Spread Control */
        if (pll3->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
1000395c:	687b      	ldr	r3, [r7, #4]
1000395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003960:	2b02      	cmp	r3, #2
10003962:	d124      	bne.n	100039ae <RCCEx_PLL3_Config+0x206>
          assert_param(IS_RCC_SSCG_MODE(pll3->SSCG_MODE));
          assert_param(IS_RCC_RPDFN_DIS(pll3->RPDFN_DIS));
          assert_param(IS_RCC_TPDFN_DIS(pll3->TPDFN_DIS));
          assert_param(IS_RCC_MOD_PER(pll3->MOD_PER));

          __HAL_RCC_PLL3CSGCONFIG(pll3->MOD_PER, pll3->TPDFN_DIS, pll3->RPDFN_DIS,
10003964:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003968:	f8d3 3890 	ldr.w	r3, [r3, #2192]	; 0x890
1000396c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10003970:	687b      	ldr	r3, [r7, #4]
10003972:	6a99      	ldr	r1, [r3, #40]	; 0x28
10003974:	687b      	ldr	r3, [r7, #4]
10003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10003978:	4319      	orrs	r1, r3
1000397a:	687b      	ldr	r3, [r7, #4]
1000397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1000397e:	4319      	orrs	r1, r3
10003980:	687b      	ldr	r3, [r7, #4]
10003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003984:	4319      	orrs	r1, r3
10003986:	687b      	ldr	r3, [r7, #4]
10003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
1000398a:	041b      	lsls	r3, r3, #16
1000398c:	430b      	orrs	r3, r1
1000398e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003992:	4313      	orrs	r3, r2
10003994:	f8c1 3890 	str.w	r3, [r1, #2192]	; 0x890
                                  pll3->SSCG_MODE, pll3->INC_STEP);
          __HAL_RCC_PLL3_SSMODE_ENABLE();
10003998:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000399c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100039a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039a4:	f043 0304 	orr.w	r3, r3, #4
100039a8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
100039ac:	e009      	b.n	100039c2 <RCCEx_PLL3_Config+0x21a>
        }
        else
        {
          __HAL_RCC_PLL3_SSMODE_DISABLE();
100039ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039b2:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100039b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039ba:	f023 0304 	bic.w	r3, r3, #4
100039be:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        }


        /* Enable the PLL3. */
        __HAL_RCC_PLL3_ENABLE();
100039c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039c6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100039ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100039ce:	f043 0301 	orr.w	r3, r3, #1
100039d2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
100039d6:	f7fd fd93 	bl	10001500 <HAL_GetTick>
100039da:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100039dc:	e008      	b.n	100039f0 <RCCEx_PLL3_Config+0x248>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
100039de:	f7fd fd8f 	bl	10001500 <HAL_GetTick>
100039e2:	4602      	mov	r2, r0
100039e4:	68fb      	ldr	r3, [r7, #12]
100039e6:	1ad3      	subs	r3, r2, r3
100039e8:	2b64      	cmp	r3, #100	; 0x64
100039ea:	d901      	bls.n	100039f0 <RCCEx_PLL3_Config+0x248>
          {
            return HAL_TIMEOUT;
100039ec:	2303      	movs	r3, #3
100039ee:	e03f      	b.n	10003a70 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == RESET)
100039f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100039f4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100039f8:	f003 0302 	and.w	r3, r3, #2
100039fc:	2b02      	cmp	r3, #2
100039fe:	d1ee      	bne.n	100039de <RCCEx_PLL3_Config+0x236>
          }
        }
        /* Enable the post-dividers */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003a00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a04:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003a08:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a0c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10003a10:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
      if ((pll3->PLLState) == RCC_PLL_ON)
10003a14:	e02b      	b.n	10003a6e <RCCEx_PLL3_Config+0x2c6>
      }
      else
      {
        /*Disable the post-dividers*/
        __HAL_RCC_PLL3CLKOUT_DISABLE(RCC_PLL3_DIVP | RCC_PLL3_DIVQ | RCC_PLL3_DIVR);
10003a16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a1a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003a1e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003a26:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
        /* Disable the PLL3. */
        __HAL_RCC_PLL3_DISABLE();
10003a2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a2e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003a32:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003a36:	f023 0301 	bic.w	r3, r3, #1
10003a3a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
10003a3e:	f7fd fd5f 	bl	10001500 <HAL_GetTick>
10003a42:	60f8      	str	r0, [r7, #12]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003a44:	e008      	b.n	10003a58 <RCCEx_PLL3_Config+0x2b0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003a46:	f7fd fd5b 	bl	10001500 <HAL_GetTick>
10003a4a:	4602      	mov	r2, r0
10003a4c:	68fb      	ldr	r3, [r7, #12]
10003a4e:	1ad3      	subs	r3, r2, r3
10003a50:	2b64      	cmp	r3, #100	; 0x64
10003a52:	d901      	bls.n	10003a58 <RCCEx_PLL3_Config+0x2b0>
          {
            return HAL_TIMEOUT;
10003a54:	2303      	movs	r3, #3
10003a56:	e00b      	b.n	10003a70 <RCCEx_PLL3_Config+0x2c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != RESET)
10003a58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a5c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003a60:	f003 0302 	and.w	r3, r3, #2
10003a64:	2b02      	cmp	r3, #2
10003a66:	d0ee      	beq.n	10003a46 <RCCEx_PLL3_Config+0x29e>
      if ((pll3->PLLState) == RCC_PLL_ON)
10003a68:	e001      	b.n	10003a6e <RCCEx_PLL3_Config+0x2c6>
        }
      }
    }
    else
    {
      return HAL_ERROR;
10003a6a:	2301      	movs	r3, #1
10003a6c:	e000      	b.n	10003a70 <RCCEx_PLL3_Config+0x2c8>
    }
  }
  return HAL_OK;
10003a6e:	2300      	movs	r3, #0
}
10003a70:	4618      	mov	r0, r3
10003a72:	3710      	adds	r7, #16
10003a74:	46bd      	mov	sp, r7
10003a76:	bd80      	pop	{r7, pc}
10003a78:	ffc0fe00 	.word	0xffc0fe00

10003a7c <RCCEx_PLL4_Config>:
  * @param  pll4: pointer to a RCC_PLLInitTypeDef structure
  *
  * @retval HAL status
  */
HAL_StatusTypeDef RCCEx_PLL4_Config(RCC_PLLInitTypeDef *pll4)
{
10003a7c:	b580      	push	{r7, lr}
10003a7e:	b084      	sub	sp, #16
10003a80:	af00      	add	r7, sp, #0
10003a82:	6078      	str	r0, [r7, #4]

  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_RCC_PLL(pll4->PLLState));
  if ((pll4->PLLState) != RCC_PLL_NONE)
10003a84:	687b      	ldr	r3, [r7, #4]
10003a86:	681b      	ldr	r3, [r3, #0]
10003a88:	2b00      	cmp	r3, #0
10003a8a:	f000 8147 	beq.w	10003d1c <RCCEx_PLL4_Config+0x2a0>
  {

    if ((pll4->PLLState) == RCC_PLL_ON)
10003a8e:	687b      	ldr	r3, [r7, #4]
10003a90:	681b      	ldr	r3, [r3, #0]
10003a92:	2b02      	cmp	r3, #2
10003a94:	f040 8119 	bne.w	10003cca <RCCEx_PLL4_Config+0x24e>
      assert_param(IS_RCC_PLLP4_VALUE(pll4->PLLP));
      assert_param(IS_RCC_PLLQ4_VALUE(pll4->PLLQ));
      assert_param(IS_RCC_PLLR4_VALUE(pll4->PLLR));

      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003a98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003a9c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003aa0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003aa8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the main PLL. */
      __HAL_RCC_PLL4_DISABLE();
10003aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ab0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003ab4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003ab8:	f023 0301 	bic.w	r3, r3, #1
10003abc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003ac0:	f7fd fd1e 	bl	10001500 <HAL_GetTick>
10003ac4:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003ac6:	e008      	b.n	10003ada <RCCEx_PLL4_Config+0x5e>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003ac8:	f7fd fd1a 	bl	10001500 <HAL_GetTick>
10003acc:	4602      	mov	r2, r0
10003ace:	68fb      	ldr	r3, [r7, #12]
10003ad0:	1ad3      	subs	r3, r2, r3
10003ad2:	2b64      	cmp	r3, #100	; 0x64
10003ad4:	d901      	bls.n	10003ada <RCCEx_PLL4_Config+0x5e>
        {
          return HAL_TIMEOUT;
10003ad6:	2303      	movs	r3, #3
10003ad8:	e121      	b.n	10003d1e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003ada:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ade:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003ae2:	f003 0302 	and.w	r3, r3, #2
10003ae6:	2b02      	cmp	r3, #2
10003ae8:	d0ee      	beq.n	10003ac8 <RCCEx_PLL4_Config+0x4c>
      -Enable/Disable of output clock dividers (DIVPxEN, DIVQxEN & DIVRxEN)
      -Fractional Division Enable (PLLxFRACNEN)
      -Fractional Division factor (FRACNx)*/

      /* Configure PLL4 and PLL4 clock source */
      __HAL_RCC_PLL4_SOURCE(pll4->PLLSource);
10003aea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003aee:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003af2:	f023 0203 	bic.w	r2, r3, #3
10003af6:	687b      	ldr	r3, [r7, #4]
10003af8:	685b      	ldr	r3, [r3, #4]
10003afa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003afe:	4313      	orrs	r3, r2
10003b00:	f8c1 3824 	str.w	r3, [r1, #2084]	; 0x824

      /* Wait till PLL SOURCE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10003b04:	e008      	b.n	10003b18 <RCCEx_PLL4_Config+0x9c>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003b06:	f7fd fcfb 	bl	10001500 <HAL_GetTick>
10003b0a:	4602      	mov	r2, r0
10003b0c:	68fb      	ldr	r3, [r7, #12]
10003b0e:	1ad3      	subs	r3, r2, r3
10003b10:	2b64      	cmp	r3, #100	; 0x64
10003b12:	d901      	bls.n	10003b18 <RCCEx_PLL4_Config+0x9c>
        {
          return HAL_TIMEOUT;
10003b14:	2303      	movs	r3, #3
10003b16:	e102      	b.n	10003d1e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4SRCRDY) == RESET)
10003b18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b1c:	f8d3 3824 	ldr.w	r3, [r3, #2084]	; 0x824
10003b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10003b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10003b28:	d1ed      	bne.n	10003b06 <RCCEx_PLL4_Config+0x8a>
        }
      }

      /* Select PLL4 input reference frequency range */
      __HAL_RCC_PLL4_IFRANGE(pll4->PLLRGE) ;
10003b2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b2e:	f8d3 3898 	ldr.w	r3, [r3, #2200]	; 0x898
10003b32:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
10003b36:	687b      	ldr	r3, [r7, #4]
10003b38:	69db      	ldr	r3, [r3, #28]
10003b3a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003b3e:	4313      	orrs	r3, r2
10003b40:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898

      /* Configure the PLL4 multiplication and division factors. */
      __HAL_RCC_PLL4_CONFIG(
10003b44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b48:	f8d3 2898 	ldr.w	r2, [r3, #2200]	; 0x898
10003b4c:	4b76      	ldr	r3, [pc, #472]	; (10003d28 <RCCEx_PLL4_Config+0x2ac>)
10003b4e:	4013      	ands	r3, r2
10003b50:	687a      	ldr	r2, [r7, #4]
10003b52:	68d2      	ldr	r2, [r2, #12]
10003b54:	1e51      	subs	r1, r2, #1
10003b56:	687a      	ldr	r2, [r7, #4]
10003b58:	6892      	ldr	r2, [r2, #8]
10003b5a:	3a01      	subs	r2, #1
10003b5c:	0412      	lsls	r2, r2, #16
10003b5e:	430a      	orrs	r2, r1
10003b60:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003b64:	4313      	orrs	r3, r2
10003b66:	f8c1 3898 	str.w	r3, [r1, #2200]	; 0x898
10003b6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003b6e:	f8d3 389c 	ldr.w	r3, [r3, #2204]	; 0x89c
10003b72:	f023 137f 	bic.w	r3, r3, #8323199	; 0x7f007f
10003b76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
10003b7a:	687a      	ldr	r2, [r7, #4]
10003b7c:	6912      	ldr	r2, [r2, #16]
10003b7e:	1e51      	subs	r1, r2, #1
10003b80:	687a      	ldr	r2, [r7, #4]
10003b82:	6952      	ldr	r2, [r2, #20]
10003b84:	3a01      	subs	r2, #1
10003b86:	0212      	lsls	r2, r2, #8
10003b88:	4311      	orrs	r1, r2
10003b8a:	687a      	ldr	r2, [r7, #4]
10003b8c:	6992      	ldr	r2, [r2, #24]
10003b8e:	3a01      	subs	r2, #1
10003b90:	0412      	lsls	r2, r2, #16
10003b92:	430a      	orrs	r2, r1
10003b94:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003b98:	4313      	orrs	r3, r2
10003b9a:	f8c1 389c 	str.w	r3, [r1, #2204]	; 0x89c
        pll4->PLLP,
        pll4->PLLQ,
        pll4->PLLR);

      /* Configure the Fractional Divider */
      __HAL_RCC_PLL4FRACV_DISABLE(); //Set FRACLE to ‘0’
10003b9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ba2:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10003ba6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
10003bae:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
      /* In integer or clock spreading mode the application shall ensure that a 0 is loaded into the SDM */
      if ((pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM) || (pll4->PLLMODE == RCC_PLL_INTEGER))
10003bb2:	687b      	ldr	r3, [r7, #4]
10003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003bb6:	2b02      	cmp	r3, #2
10003bb8:	d003      	beq.n	10003bc2 <RCCEx_PLL4_Config+0x146>
10003bba:	687b      	ldr	r3, [r7, #4]
10003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003bbe:	2b00      	cmp	r3, #0
10003bc0:	d10c      	bne.n	10003bdc <RCCEx_PLL4_Config+0x160>
      {
        /* Do not use the fractional divider */
        __HAL_RCC_PLL4FRACV_CONFIG(0); //Set FRACV to '0'
10003bc2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003bc6:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10003bca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003bd2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003bd6:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0
10003bda:	e00f      	b.n	10003bfc <RCCEx_PLL4_Config+0x180>
      }
      else
      {
        /* Configure PLL  PLL4FRACV  in fractional mode*/
        __HAL_RCC_PLL4FRACV_CONFIG(pll4->PLLFRACV);
10003bdc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003be0:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10003be4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
10003be8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
10003bec:	687a      	ldr	r2, [r7, #4]
10003bee:	6a12      	ldr	r2, [r2, #32]
10003bf0:	00d2      	lsls	r2, r2, #3
10003bf2:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003bf6:	4313      	orrs	r3, r2
10003bf8:	f8c1 38a0 	str.w	r3, [r1, #2208]	; 0x8a0
      }
      __HAL_RCC_PLL4FRACV_ENABLE(); //Set FRACLE to ‘1’
10003bfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c00:	f8d3 38a0 	ldr.w	r3, [r3, #2208]	; 0x8a0
10003c04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
10003c0c:	f8c2 38a0 	str.w	r3, [r2, #2208]	; 0x8a0

      /* Configure the Spread Control */
      if (pll4->PLLMODE == RCC_PLL_SPREAD_SPECTRUM)
10003c10:	687b      	ldr	r3, [r7, #4]
10003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10003c14:	2b02      	cmp	r3, #2
10003c16:	d124      	bne.n	10003c62 <RCCEx_PLL4_Config+0x1e6>
        assert_param(IS_RCC_SSCG_MODE(pll4->SSCG_MODE));
        assert_param(IS_RCC_RPDFN_DIS(pll4->RPDFN_DIS));
        assert_param(IS_RCC_TPDFN_DIS(pll4->TPDFN_DIS));
        assert_param(IS_RCC_MOD_PER(pll4->MOD_PER));

        __HAL_RCC_PLL4CSGCONFIG(pll4->MOD_PER, pll4->TPDFN_DIS, pll4->RPDFN_DIS,
10003c18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c1c:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
10003c20:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
10003c24:	687b      	ldr	r3, [r7, #4]
10003c26:	6a99      	ldr	r1, [r3, #40]	; 0x28
10003c28:	687b      	ldr	r3, [r7, #4]
10003c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10003c2c:	4319      	orrs	r1, r3
10003c2e:	687b      	ldr	r3, [r7, #4]
10003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10003c32:	4319      	orrs	r1, r3
10003c34:	687b      	ldr	r3, [r7, #4]
10003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
10003c38:	4319      	orrs	r1, r3
10003c3a:	687b      	ldr	r3, [r7, #4]
10003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
10003c3e:	041b      	lsls	r3, r3, #16
10003c40:	430b      	orrs	r3, r1
10003c42:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10003c46:	4313      	orrs	r3, r2
10003c48:	f8c1 38a4 	str.w	r3, [r1, #2212]	; 0x8a4
                                pll4->SSCG_MODE, pll4->INC_STEP);
        __HAL_RCC_PLL4_SSMODE_ENABLE();
10003c4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c50:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003c54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c58:	f043 0304 	orr.w	r3, r3, #4
10003c5c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10003c60:	e009      	b.n	10003c76 <RCCEx_PLL4_Config+0x1fa>
      }
      else
      {
        __HAL_RCC_PLL4_SSMODE_DISABLE();
10003c62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c66:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003c6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c6e:	f023 0304 	bic.w	r3, r3, #4
10003c72:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      }

      /* Enable the PLL4. */
      __HAL_RCC_PLL4_ENABLE();
10003c76:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003c7a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003c7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003c82:	f043 0301 	orr.w	r3, r3, #1
10003c86:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003c8a:	f7fd fc39 	bl	10001500 <HAL_GetTick>
10003c8e:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10003c90:	e008      	b.n	10003ca4 <RCCEx_PLL4_Config+0x228>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003c92:	f7fd fc35 	bl	10001500 <HAL_GetTick>
10003c96:	4602      	mov	r2, r0
10003c98:	68fb      	ldr	r3, [r7, #12]
10003c9a:	1ad3      	subs	r3, r2, r3
10003c9c:	2b64      	cmp	r3, #100	; 0x64
10003c9e:	d901      	bls.n	10003ca4 <RCCEx_PLL4_Config+0x228>
        {
          return HAL_TIMEOUT;
10003ca0:	2303      	movs	r3, #3
10003ca2:	e03c      	b.n	10003d1e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) == RESET)
10003ca4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ca8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003cac:	f003 0302 	and.w	r3, r3, #2
10003cb0:	2b02      	cmp	r3, #2
10003cb2:	d1ee      	bne.n	10003c92 <RCCEx_PLL4_Config+0x216>
        }
      }
      /* Enable PLL4P Clock output. */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003cb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cb8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003cbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003cc0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
10003cc4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
10003cc8:	e028      	b.n	10003d1c <RCCEx_PLL4_Config+0x2a0>
    }
    else
    {
      /*Disable the post-dividers*/
      __HAL_RCC_PLL4CLKOUT_DISABLE(RCC_PLL4_DIVP | RCC_PLL4_DIVQ | RCC_PLL4_DIVR);
10003cca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003cce:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003cd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
10003cda:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
      /* Disable the PLL4. */
      __HAL_RCC_PLL4_DISABLE();
10003cde:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ce2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003ce6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003cea:	f023 0301 	bic.w	r3, r3, #1
10003cee:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
10003cf2:	f7fd fc05 	bl	10001500 <HAL_GetTick>
10003cf6:	60f8      	str	r0, [r7, #12]

      /* Wait till PLL is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003cf8:	e008      	b.n	10003d0c <RCCEx_PLL4_Config+0x290>
      {
        if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
10003cfa:	f7fd fc01 	bl	10001500 <HAL_GetTick>
10003cfe:	4602      	mov	r2, r0
10003d00:	68fb      	ldr	r3, [r7, #12]
10003d02:	1ad3      	subs	r3, r2, r3
10003d04:	2b64      	cmp	r3, #100	; 0x64
10003d06:	d901      	bls.n	10003d0c <RCCEx_PLL4_Config+0x290>
        {
          return HAL_TIMEOUT;
10003d08:	2303      	movs	r3, #3
10003d0a:	e008      	b.n	10003d1e <RCCEx_PLL4_Config+0x2a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL4RDY) != RESET)
10003d0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d10:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003d14:	f003 0302 	and.w	r3, r3, #2
10003d18:	2b02      	cmp	r3, #2
10003d1a:	d0ee      	beq.n	10003cfa <RCCEx_PLL4_Config+0x27e>
        }
      }
    }
  }
  return HAL_OK;
10003d1c:	2300      	movs	r3, #0
}
10003d1e:	4618      	mov	r0, r3
10003d20:	3710      	adds	r7, #16
10003d22:	46bd      	mov	sp, r7
10003d24:	bd80      	pop	{r7, pc}
10003d26:	bf00      	nop
10003d28:	ffc0fe00 	.word	0xffc0fe00

10003d2c <HAL_RCCEx_PeriphCLKConfig>:
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef
                                            *PeriphClkInit)
{
10003d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
10003d30:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
10003d34:	af00      	add	r7, sp, #0
10003d36:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003d3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003d3e:	6018      	str	r0, [r3, #0]
  uint32_t tmpreg = 0, RESERVED_BDCR_MASK = 0;
10003d40:	2300      	movs	r3, #0
10003d42:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
10003d46:	2300      	movs	r3, #0
10003d48:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
10003d4c:	2300      	movs	r3, #0
10003d4e:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
10003d52:	2300      	movs	r3, #0
10003d54:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- CKPER configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) ==
10003d58:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003d5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003d60:	681b      	ldr	r3, [r3, #0]
10003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
10003d66:	f402 0400 	and.w	r4, r2, #8388608	; 0x800000
10003d6a:	2500      	movs	r5, #0
10003d6c:	ea54 0305 	orrs.w	r3, r4, r5
10003d70:	d011      	beq.n	10003d96 <HAL_RCCEx_PeriphCLKConfig+0x6a>
      RCC_PERIPHCLK_CKPER)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));

    __HAL_RCC_CKPER_CONFIG(PeriphClkInit->CkperClockSelection);
10003d72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003d76:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
10003d7a:	f023 0103 	bic.w	r1, r3, #3
10003d7e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003d82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003d86:	681b      	ldr	r3, [r3, #0]
10003d88:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
10003d8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003d90:	430b      	orrs	r3, r1
10003d92:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
  }

  /*------------------------------ I2C12 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C12) ==
10003d96:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003d9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003d9e:	681b      	ldr	r3, [r3, #0]
10003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
10003da4:	f002 0810 	and.w	r8, r2, #16
10003da8:	f04f 0900 	mov.w	r9, #0
10003dac:	ea58 0309 	orrs.w	r3, r8, r9
10003db0:	d038      	beq.n	10003e24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      RCC_PERIPHCLK_I2C12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C12CLKSOURCE(PeriphClkInit->I2c12ClockSelection));

    if ((PeriphClkInit->I2c12ClockSelection) == RCC_I2C12CLKSOURCE_PLL4)
10003db2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003db6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003dba:	681b      	ldr	r3, [r3, #0]
10003dbc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10003dc0:	2b01      	cmp	r3, #1
10003dc2:	d11d      	bne.n	10003e00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003dc4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003dc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003dcc:	681b      	ldr	r3, [r3, #0]
10003dce:	3380      	adds	r3, #128	; 0x80
10003dd0:	4618      	mov	r0, r3
10003dd2:	f7ff fe53 	bl	10003a7c <RCCEx_PLL4_Config>
10003dd6:	4603      	mov	r3, r0
10003dd8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10003ddc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003de0:	2b00      	cmp	r3, #0
10003de2:	d003      	beq.n	10003dec <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return status;
10003de4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003de8:	f001 be2a 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003dec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003df0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003df4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003dfc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C12_CONFIG(PeriphClkInit->I2c12ClockSelection);
10003e00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e04:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	; 0x8c0
10003e08:	f023 0107 	bic.w	r1, r3, #7
10003e0c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003e14:	681b      	ldr	r3, [r3, #0]
10003e16:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
10003e1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e1e:	430b      	orrs	r3, r1
10003e20:	f8c2 38c0 	str.w	r3, [r2, #2240]	; 0x8c0
  }

  /*------------------------------ I2C35 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) &  RCC_PERIPHCLK_I2C35) ==
10003e24:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003e2c:	681b      	ldr	r3, [r3, #0]
10003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
10003e32:	f002 0a20 	and.w	sl, r2, #32
10003e36:	f04f 0b00 	mov.w	fp, #0
10003e3a:	ea5a 030b 	orrs.w	r3, sl, fp
10003e3e:	d038      	beq.n	10003eb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      RCC_PERIPHCLK_I2C35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C35CLKSOURCE(PeriphClkInit->I2c35ClockSelection));

    if ((PeriphClkInit->I2c35ClockSelection) == RCC_I2C35CLKSOURCE_PLL4)
10003e40:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003e44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003e48:	681b      	ldr	r3, [r3, #0]
10003e4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10003e4e:	2b01      	cmp	r3, #1
10003e50:	d11d      	bne.n	10003e8e <HAL_RCCEx_PeriphCLKConfig+0x162>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003e52:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003e56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003e5a:	681b      	ldr	r3, [r3, #0]
10003e5c:	3380      	adds	r3, #128	; 0x80
10003e5e:	4618      	mov	r0, r3
10003e60:	f7ff fe0c 	bl	10003a7c <RCCEx_PLL4_Config>
10003e64:	4603      	mov	r3, r0
10003e66:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10003e6a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003e6e:	2b00      	cmp	r3, #0
10003e70:	d003      	beq.n	10003e7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        return status;
10003e72:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003e76:	f001 bde3 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10003e7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e7e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003e82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10003e8a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_I2C35_CONFIG(PeriphClkInit->I2c35ClockSelection);
10003e8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003e92:	f8d3 38c4 	ldr.w	r3, [r3, #2244]	; 0x8c4
10003e96:	f023 0107 	bic.w	r1, r3, #7
10003e9a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003e9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003ea2:	681b      	ldr	r3, [r3, #0]
10003ea4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10003ea8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003eac:	430b      	orrs	r3, r1
10003eae:	f8c2 38c4 	str.w	r3, [r2, #2244]	; 0x8c4
  }

  /*------------------------------ I2C46 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C46) ==
10003eb2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003eba:	681b      	ldr	r3, [r3, #0]
10003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
10003ec0:	2100      	movs	r1, #0
10003ec2:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
10003ec6:	f003 0320 	and.w	r3, r3, #32
10003eca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
10003ece:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
10003ed2:	460b      	mov	r3, r1
10003ed4:	4313      	orrs	r3, r2
10003ed6:	d038      	beq.n	10003f4a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      RCC_PERIPHCLK_I2C46)
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C46CLKSOURCE(PeriphClkInit->I2c46ClockSelection));

    if ((PeriphClkInit->I2c46ClockSelection) == RCC_I2C46CLKSOURCE_PLL3)
10003ed8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003edc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003ee0:	681b      	ldr	r3, [r3, #0]
10003ee2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10003ee6:	2b01      	cmp	r3, #1
10003ee8:	d11d      	bne.n	10003f26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003eea:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003eee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003ef2:	681b      	ldr	r3, [r3, #0]
10003ef4:	3344      	adds	r3, #68	; 0x44
10003ef6:	4618      	mov	r0, r3
10003ef8:	f7ff fc56 	bl	100037a8 <RCCEx_PLL3_Config>
10003efc:	4603      	mov	r3, r0
10003efe:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10003f02:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003f06:	2b00      	cmp	r3, #0
10003f08:	d003      	beq.n	10003f12 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return status;
10003f0a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003f0e:	f001 bd97 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003f12:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f16:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003f1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f1e:	f043 0320 	orr.w	r3, r3, #32
10003f22:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880
    }

    __HAL_RCC_I2C46_CONFIG(PeriphClkInit->I2c46ClockSelection);
10003f26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003f2a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
10003f2e:	f023 0107 	bic.w	r1, r3, #7
10003f32:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003f3a:	681b      	ldr	r3, [r3, #0]
10003f3c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
10003f40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003f44:	430b      	orrs	r3, r1
10003f46:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
  }

  /*---------------------------- SAI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) ==
10003f4a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003f52:	681b      	ldr	r3, [r3, #0]
10003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
10003f58:	f002 0380 	and.w	r3, r2, #128	; 0x80
10003f5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
10003f60:	2300      	movs	r3, #0
10003f62:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
10003f66:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
10003f6a:	460b      	mov	r3, r1
10003f6c:	4313      	orrs	r3, r2
10003f6e:	d07e      	beq.n	1000406e <HAL_RCCEx_PeriphCLKConfig+0x342>
      RCC_PERIPHCLK_SAI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
10003f70:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003f78:	681b      	ldr	r3, [r3, #0]
10003f7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10003f7e:	2b04      	cmp	r3, #4
10003f80:	d044      	beq.n	1000400c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
10003f82:	2b04      	cmp	r3, #4
10003f84:	d861      	bhi.n	1000404a <HAL_RCCEx_PeriphCLKConfig+0x31e>
10003f86:	2b00      	cmp	r3, #0
10003f88:	d002      	beq.n	10003f90 <HAL_RCCEx_PeriphCLKConfig+0x264>
10003f8a:	2b01      	cmp	r3, #1
10003f8c:	d01f      	beq.n	10003fce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
10003f8e:	e05c      	b.n	1000404a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    {
      case RCC_SAI1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI1*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10003f90:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003f98:	681b      	ldr	r3, [r3, #0]
10003f9a:	3380      	adds	r3, #128	; 0x80
10003f9c:	4618      	mov	r0, r3
10003f9e:	f7ff fd6d 	bl	10003a7c <RCCEx_PLL4_Config>
10003fa2:	4603      	mov	r3, r0
10003fa4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003fa8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003fac:	2b00      	cmp	r3, #0
10003fae:	d003      	beq.n	10003fb8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
        {
          return status;
10003fb0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003fb4:	f001 bd44 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10003fb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003fbc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10003fc0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10003fc4:	f043 0320 	orr.w	r3, r3, #32
10003fc8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10003fcc:	e03d      	b.n	1000404a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_Q:  /* PLL3_Q is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10003fce:	f507 7312 	add.w	r3, r7, #584	; 0x248
10003fd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10003fd6:	681b      	ldr	r3, [r3, #0]
10003fd8:	3344      	adds	r3, #68	; 0x44
10003fda:	4618      	mov	r0, r3
10003fdc:	f7ff fbe4 	bl	100037a8 <RCCEx_PLL3_Config>
10003fe0:	4603      	mov	r3, r0
10003fe2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10003fe6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003fea:	2b00      	cmp	r3, #0
10003fec:	d003      	beq.n	10003ff6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
        {
          return status;
10003fee:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10003ff2:	f001 bd25 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10003ff6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10003ffa:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10003ffe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004002:	f043 0320 	orr.w	r3, r3, #32
10004006:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000400a:	e01e      	b.n	1000404a <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3_R:  /* PLL3_R is used as clock source for SAI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000400c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004010:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004014:	681b      	ldr	r3, [r3, #0]
10004016:	3344      	adds	r3, #68	; 0x44
10004018:	4618      	mov	r0, r3
1000401a:	f7ff fbc5 	bl	100037a8 <RCCEx_PLL3_Config>
1000401e:	4603      	mov	r3, r0
10004020:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004024:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004028:	2b00      	cmp	r3, #0
1000402a:	d003      	beq.n	10004034 <HAL_RCCEx_PeriphCLKConfig+0x308>
        {
          return status;
1000402c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004030:	f001 bd06 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */

        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004034:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004038:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000403c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004044:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004048:	bf00      	nop
    }

    /* Set the source of SAI1 clock*/
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
1000404a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000404e:	f8d3 38c8 	ldr.w	r3, [r3, #2248]	; 0x8c8
10004052:	f023 0107 	bic.w	r1, r3, #7
10004056:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000405a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000405e:	681b      	ldr	r3, [r3, #0]
10004060:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10004064:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004068:	430b      	orrs	r3, r1
1000406a:	f8c2 38c8 	str.w	r3, [r2, #2248]	; 0x8c8
  }

  /*---------------------------- SAI2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) ==
1000406e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004076:	681b      	ldr	r3, [r3, #0]
10004078:	e9d3 2300 	ldrd	r2, r3, [r3]
1000407c:	f402 7380 	and.w	r3, r2, #256	; 0x100
10004080:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
10004084:	2300      	movs	r3, #0
10004086:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
1000408a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
1000408e:	460b      	mov	r3, r1
10004090:	4313      	orrs	r3, r2
10004092:	d07e      	beq.n	10004192 <HAL_RCCEx_PeriphCLKConfig+0x466>
      RCC_PERIPHCLK_SAI2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
10004094:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004098:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000409c:	681b      	ldr	r3, [r3, #0]
1000409e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
100040a2:	2b05      	cmp	r3, #5
100040a4:	d044      	beq.n	10004130 <HAL_RCCEx_PeriphCLKConfig+0x404>
100040a6:	2b05      	cmp	r3, #5
100040a8:	d861      	bhi.n	1000416e <HAL_RCCEx_PeriphCLKConfig+0x442>
100040aa:	2b00      	cmp	r3, #0
100040ac:	d002      	beq.n	100040b4 <HAL_RCCEx_PeriphCLKConfig+0x388>
100040ae:	2b01      	cmp	r3, #1
100040b0:	d01f      	beq.n	100040f2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
100040b2:	e05c      	b.n	1000416e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      case RCC_SAI2CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SAI2*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100040b4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100040b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100040bc:	681b      	ldr	r3, [r3, #0]
100040be:	3380      	adds	r3, #128	; 0x80
100040c0:	4618      	mov	r0, r3
100040c2:	f7ff fcdb 	bl	10003a7c <RCCEx_PLL4_Config>
100040c6:	4603      	mov	r3, r0
100040c8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100040cc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100040d0:	2b00      	cmp	r3, #0
100040d2:	d003      	beq.n	100040dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        {
          return status;
100040d4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100040d8:	f001 bcb2 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100040dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100040e0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100040e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100040e8:	f043 0320 	orr.w	r3, r3, #32
100040ec:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100040f0:	e03d      	b.n	1000416e <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100040f2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100040f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100040fa:	681b      	ldr	r3, [r3, #0]
100040fc:	3344      	adds	r3, #68	; 0x44
100040fe:	4618      	mov	r0, r3
10004100:	f7ff fb52 	bl	100037a8 <RCCEx_PLL3_Config>
10004104:	4603      	mov	r3, r0
10004106:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000410a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000410e:	2b00      	cmp	r3, #0
10004110:	d003      	beq.n	1000411a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
        {
          return status;
10004112:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004116:	f001 bc93 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000411a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000411e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004122:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004126:	f043 0320 	orr.w	r3, r3, #32
1000412a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000412e:	e01e      	b.n	1000416e <HAL_RCCEx_PeriphCLKConfig+0x442>

      case RCC_SAI2CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI2 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004130:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004134:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004138:	681b      	ldr	r3, [r3, #0]
1000413a:	3344      	adds	r3, #68	; 0x44
1000413c:	4618      	mov	r0, r3
1000413e:	f7ff fb33 	bl	100037a8 <RCCEx_PLL3_Config>
10004142:	4603      	mov	r3, r0
10004144:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004148:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000414c:	2b00      	cmp	r3, #0
1000414e:	d003      	beq.n	10004158 <HAL_RCCEx_PeriphCLKConfig+0x42c>
        {
          return status;
10004150:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004154:	f001 bc74 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004158:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000415c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004160:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004168:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000416c:	bf00      	nop
    }

    /* Set the source of SAI2 clock*/
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
1000416e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004172:	f8d3 38cc 	ldr.w	r3, [r3, #2252]	; 0x8cc
10004176:	f023 0107 	bic.w	r1, r3, #7
1000417a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000417e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004182:	681b      	ldr	r3, [r3, #0]
10004184:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10004188:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000418c:	430b      	orrs	r3, r1
1000418e:	f8c2 38cc 	str.w	r3, [r2, #2252]	; 0x8cc
  }

  /*---------------------------- SAI3 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI3) ==
10004192:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004196:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000419a:	681b      	ldr	r3, [r3, #0]
1000419c:	e9d3 2300 	ldrd	r2, r3, [r3]
100041a0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
100041a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
100041a8:	2300      	movs	r3, #0
100041aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
100041ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
100041b2:	460b      	mov	r3, r1
100041b4:	4313      	orrs	r3, r2
100041b6:	d07e      	beq.n	100042b6 <HAL_RCCEx_PeriphCLKConfig+0x58a>
      RCC_PERIPHCLK_SAI3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI3CLKSOURCE(PeriphClkInit->Sai3ClockSelection));

    switch (PeriphClkInit->Sai3ClockSelection)
100041b8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100041bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100041c0:	681b      	ldr	r3, [r3, #0]
100041c2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
100041c6:	2b04      	cmp	r3, #4
100041c8:	d044      	beq.n	10004254 <HAL_RCCEx_PeriphCLKConfig+0x528>
100041ca:	2b04      	cmp	r3, #4
100041cc:	d861      	bhi.n	10004292 <HAL_RCCEx_PeriphCLKConfig+0x566>
100041ce:	2b00      	cmp	r3, #0
100041d0:	d002      	beq.n	100041d8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
100041d2:	2b01      	cmp	r3, #1
100041d4:	d01f      	beq.n	10004216 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
100041d6:	e05c      	b.n	10004292 <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      case RCC_SAI3CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI3*/

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100041d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100041dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100041e0:	681b      	ldr	r3, [r3, #0]
100041e2:	3380      	adds	r3, #128	; 0x80
100041e4:	4618      	mov	r0, r3
100041e6:	f7ff fc49 	bl	10003a7c <RCCEx_PLL4_Config>
100041ea:	4603      	mov	r3, r0
100041ec:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100041f0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100041f4:	2b00      	cmp	r3, #0
100041f6:	d003      	beq.n	10004200 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
        {
          return status;
100041f8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100041fc:	f001 bc20 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004200:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004204:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004208:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000420c:	f043 0320 	orr.w	r3, r3, #32
10004210:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004214:	e03d      	b.n	10004292 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004216:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000421a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000421e:	681b      	ldr	r3, [r3, #0]
10004220:	3344      	adds	r3, #68	; 0x44
10004222:	4618      	mov	r0, r3
10004224:	f7ff fac0 	bl	100037a8 <RCCEx_PLL3_Config>
10004228:	4603      	mov	r3, r0
1000422a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000422e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004232:	2b00      	cmp	r3, #0
10004234:	d003      	beq.n	1000423e <HAL_RCCEx_PeriphCLKConfig+0x512>
        {
          return status;
10004236:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000423a:	f001 bc01 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000423e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004242:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004246:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000424a:	f043 0320 	orr.w	r3, r3, #32
1000424e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004252:	e01e      	b.n	10004292 <HAL_RCCEx_PeriphCLKConfig+0x566>

      case RCC_SAI3CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004254:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004258:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000425c:	681b      	ldr	r3, [r3, #0]
1000425e:	3344      	adds	r3, #68	; 0x44
10004260:	4618      	mov	r0, r3
10004262:	f7ff faa1 	bl	100037a8 <RCCEx_PLL3_Config>
10004266:	4603      	mov	r3, r0
10004268:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000426c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004270:	2b00      	cmp	r3, #0
10004272:	d003      	beq.n	1000427c <HAL_RCCEx_PeriphCLKConfig+0x550>
        {
          return status;
10004274:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004278:	f001 bbe2 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
1000427c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004280:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004284:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000428c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004290:	bf00      	nop
    }

    /* Set the source of SAI3 clock*/
    __HAL_RCC_SAI3_CONFIG(PeriphClkInit->Sai3ClockSelection);
10004292:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004296:	f8d3 38d0 	ldr.w	r3, [r3, #2256]	; 0x8d0
1000429a:	f023 0107 	bic.w	r1, r3, #7
1000429e:	f507 7312 	add.w	r3, r7, #584	; 0x248
100042a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100042a6:	681b      	ldr	r3, [r3, #0]
100042a8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
100042ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100042b0:	430b      	orrs	r3, r1
100042b2:	f8c2 38d0 	str.w	r3, [r2, #2256]	; 0x8d0
  }

  /*---------------------------- SAI4 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4) ==
100042b6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100042ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100042be:	681b      	ldr	r3, [r3, #0]
100042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
100042c4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
100042c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
100042cc:	2300      	movs	r3, #0
100042ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
100042d2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
100042d6:	460b      	mov	r3, r1
100042d8:	4313      	orrs	r3, r2
100042da:	d07e      	beq.n	100043da <HAL_RCCEx_PeriphCLKConfig+0x6ae>
      RCC_PERIPHCLK_SAI4)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI4CLKSOURCE(PeriphClkInit->Sai4ClockSelection));

    switch (PeriphClkInit->Sai4ClockSelection)
100042dc:	f507 7312 	add.w	r3, r7, #584	; 0x248
100042e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100042e4:	681b      	ldr	r3, [r3, #0]
100042e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100042ea:	2b04      	cmp	r3, #4
100042ec:	d044      	beq.n	10004378 <HAL_RCCEx_PeriphCLKConfig+0x64c>
100042ee:	2b04      	cmp	r3, #4
100042f0:	d861      	bhi.n	100043b6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
100042f2:	2b00      	cmp	r3, #0
100042f4:	d002      	beq.n	100042fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
100042f6:	2b01      	cmp	r3, #1
100042f8:	d01f      	beq.n	1000433a <HAL_RCCEx_PeriphCLKConfig+0x60e>
100042fa:	e05c      	b.n	100043b6 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    {
      case RCC_SAI4CLKSOURCE_PLL4: /* PLL4 is used as clock source for SAI4 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100042fc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004300:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004304:	681b      	ldr	r3, [r3, #0]
10004306:	3380      	adds	r3, #128	; 0x80
10004308:	4618      	mov	r0, r3
1000430a:	f7ff fbb7 	bl	10003a7c <RCCEx_PLL4_Config>
1000430e:	4603      	mov	r3, r0
10004310:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004314:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004318:	2b00      	cmp	r3, #0
1000431a:	d003      	beq.n	10004324 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
        {
          return status;
1000431c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004320:	f001 bb8e 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004324:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004328:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000432c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004330:	f043 0320 	orr.w	r3, r3, #32
10004334:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004338:	e03d      	b.n	100043b6 <HAL_RCCEx_PeriphCLKConfig+0x68a>


      case RCC_SAI4CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000433a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000433e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004342:	681b      	ldr	r3, [r3, #0]
10004344:	3344      	adds	r3, #68	; 0x44
10004346:	4618      	mov	r0, r3
10004348:	f7ff fa2e 	bl	100037a8 <RCCEx_PLL3_Config>
1000434c:	4603      	mov	r3, r0
1000434e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004352:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004356:	2b00      	cmp	r3, #0
10004358:	d003      	beq.n	10004362 <HAL_RCCEx_PeriphCLKConfig+0x636>
        {
          return status;
1000435a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000435e:	f001 bb6f 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_Q */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004362:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004366:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000436a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000436e:	f043 0320 	orr.w	r3, r3, #32
10004372:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004376:	e01e      	b.n	100043b6 <HAL_RCCEx_PeriphCLKConfig+0x68a>

      case RCC_SAI4CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SAI4 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004378:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000437c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004380:	681b      	ldr	r3, [r3, #0]
10004382:	3344      	adds	r3, #68	; 0x44
10004384:	4618      	mov	r0, r3
10004386:	f7ff fa0f 	bl	100037a8 <RCCEx_PLL3_Config>
1000438a:	4603      	mov	r3, r0
1000438c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004390:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004394:	2b00      	cmp	r3, #0
10004396:	d003      	beq.n	100043a0 <HAL_RCCEx_PeriphCLKConfig+0x674>
        {
          return status;
10004398:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000439c:	f001 bb50 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SAI Clock output generated on PLL3_R */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100043a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043a4:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100043a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100043b0:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100043b4:	bf00      	nop
    }

    /* Set the source of SAI4 clock*/
    __HAL_RCC_SAI4_CONFIG(PeriphClkInit->Sai4ClockSelection);
100043b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100043ba:	f8d3 38d4 	ldr.w	r3, [r3, #2260]	; 0x8d4
100043be:	f023 0107 	bic.w	r1, r3, #7
100043c2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100043c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100043ca:	681b      	ldr	r3, [r3, #0]
100043cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100043d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100043d4:	430b      	orrs	r3, r1
100043d6:	f8c2 38d4 	str.w	r3, [r2, #2260]	; 0x8d4
  }

  /*---------------------------- SPI1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) ==
100043da:	f507 7312 	add.w	r3, r7, #584	; 0x248
100043de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100043e2:	681b      	ldr	r3, [r3, #0]
100043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
100043e8:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
100043ec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
100043f0:	2300      	movs	r3, #0
100043f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
100043f6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
100043fa:	460b      	mov	r3, r1
100043fc:	4313      	orrs	r3, r2
100043fe:	d07e      	beq.n	100044fe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
      RCC_PERIPHCLK_SPI1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));

    switch (PeriphClkInit->Spi1ClockSelection)
10004400:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004404:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004408:	681b      	ldr	r3, [r3, #0]
1000440a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
1000440e:	2b04      	cmp	r3, #4
10004410:	d044      	beq.n	1000449c <HAL_RCCEx_PeriphCLKConfig+0x770>
10004412:	2b04      	cmp	r3, #4
10004414:	d861      	bhi.n	100044da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
10004416:	2b00      	cmp	r3, #0
10004418:	d002      	beq.n	10004420 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
1000441a:	2b01      	cmp	r3, #1
1000441c:	d01f      	beq.n	1000445e <HAL_RCCEx_PeriphCLKConfig+0x732>
1000441e:	e05c      	b.n	100044da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      case RCC_SPI1CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004420:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004424:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004428:	681b      	ldr	r3, [r3, #0]
1000442a:	3380      	adds	r3, #128	; 0x80
1000442c:	4618      	mov	r0, r3
1000442e:	f7ff fb25 	bl	10003a7c <RCCEx_PLL4_Config>
10004432:	4603      	mov	r3, r0
10004434:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004438:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000443c:	2b00      	cmp	r3, #0
1000443e:	d003      	beq.n	10004448 <HAL_RCCEx_PeriphCLKConfig+0x71c>
        {
          return status;
10004440:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004444:	f001 bafc 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004448:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000444c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004450:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004454:	f043 0310 	orr.w	r3, r3, #16
10004458:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
1000445c:	e03d      	b.n	100044da <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI1*/

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000445e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004462:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004466:	681b      	ldr	r3, [r3, #0]
10004468:	3344      	adds	r3, #68	; 0x44
1000446a:	4618      	mov	r0, r3
1000446c:	f7ff f99c 	bl	100037a8 <RCCEx_PLL3_Config>
10004470:	4603      	mov	r3, r0
10004472:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004476:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000447a:	2b00      	cmp	r3, #0
1000447c:	d003      	beq.n	10004486 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        {
          return status;
1000447e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004482:	f001 badd 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004486:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000448a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
1000448e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004492:	f043 0320 	orr.w	r3, r3, #32
10004496:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000449a:	e01e      	b.n	100044da <HAL_RCCEx_PeriphCLKConfig+0x7ae>

      case RCC_SPI1CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000449c:	f507 7312 	add.w	r3, r7, #584	; 0x248
100044a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100044a4:	681b      	ldr	r3, [r3, #0]
100044a6:	3344      	adds	r3, #68	; 0x44
100044a8:	4618      	mov	r0, r3
100044aa:	f7ff f97d 	bl	100037a8 <RCCEx_PLL3_Config>
100044ae:	4603      	mov	r3, r0
100044b0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100044b4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100044b8:	2b00      	cmp	r3, #0
100044ba:	d003      	beq.n	100044c4 <HAL_RCCEx_PeriphCLKConfig+0x798>
        {
          return status;
100044bc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100044c0:	f001 babe 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100044c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044c8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100044cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100044d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100044d4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100044d8:	bf00      	nop

    }

    /* Set the source of SPI1 clock*/
    __HAL_RCC_SPI1_CONFIG(PeriphClkInit->Spi1ClockSelection);
100044da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100044de:	f8d3 38d8 	ldr.w	r3, [r3, #2264]	; 0x8d8
100044e2:	f023 0107 	bic.w	r1, r3, #7
100044e6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100044ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100044ee:	681b      	ldr	r3, [r3, #0]
100044f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
100044f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100044f8:	430b      	orrs	r3, r1
100044fa:	f8c2 38d8 	str.w	r3, [r2, #2264]	; 0x8d8
  }

  /*---------------------------- SPI23 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI23) ==
100044fe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004502:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004506:	681b      	ldr	r3, [r3, #0]
10004508:	e9d3 2300 	ldrd	r2, r3, [r3]
1000450c:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
10004510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
10004514:	2300      	movs	r3, #0
10004516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
1000451a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
1000451e:	460b      	mov	r3, r1
10004520:	4313      	orrs	r3, r2
10004522:	d07e      	beq.n	10004622 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
      RCC_PERIPHCLK_SPI23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI23CLKSOURCE(PeriphClkInit->Spi23ClockSelection));

    switch (PeriphClkInit->Spi23ClockSelection)
10004524:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000452c:	681b      	ldr	r3, [r3, #0]
1000452e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
10004532:	2b04      	cmp	r3, #4
10004534:	d044      	beq.n	100045c0 <HAL_RCCEx_PeriphCLKConfig+0x894>
10004536:	2b04      	cmp	r3, #4
10004538:	d861      	bhi.n	100045fe <HAL_RCCEx_PeriphCLKConfig+0x8d2>
1000453a:	2b00      	cmp	r3, #0
1000453c:	d002      	beq.n	10004544 <HAL_RCCEx_PeriphCLKConfig+0x818>
1000453e:	2b01      	cmp	r3, #1
10004540:	d01f      	beq.n	10004582 <HAL_RCCEx_PeriphCLKConfig+0x856>
10004542:	e05c      	b.n	100045fe <HAL_RCCEx_PeriphCLKConfig+0x8d2>
    {
      case RCC_SPI23CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI23 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004544:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004548:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000454c:	681b      	ldr	r3, [r3, #0]
1000454e:	3380      	adds	r3, #128	; 0x80
10004550:	4618      	mov	r0, r3
10004552:	f7ff fa93 	bl	10003a7c <RCCEx_PLL4_Config>
10004556:	4603      	mov	r3, r0
10004558:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000455c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004560:	2b00      	cmp	r3, #0
10004562:	d003      	beq.n	1000456c <HAL_RCCEx_PeriphCLKConfig+0x840>
        {
          return status;
10004564:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004568:	f001 ba6a 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
1000456c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004570:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004574:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004578:	f043 0310 	orr.w	r3, r3, #16
1000457c:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004580:	e03d      	b.n	100045fe <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_Q: /* PLL3_Q is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004582:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004586:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000458a:	681b      	ldr	r3, [r3, #0]
1000458c:	3344      	adds	r3, #68	; 0x44
1000458e:	4618      	mov	r0, r3
10004590:	f7ff f90a 	bl	100037a8 <RCCEx_PLL3_Config>
10004594:	4603      	mov	r3, r0
10004596:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000459a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000459e:	2b00      	cmp	r3, #0
100045a0:	d003      	beq.n	100045aa <HAL_RCCEx_PeriphCLKConfig+0x87e>
        {
          return status;
100045a2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100045a6:	f001 ba4b 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100045aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045ae:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100045b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045b6:	f043 0320 	orr.w	r3, r3, #32
100045ba:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100045be:	e01e      	b.n	100045fe <HAL_RCCEx_PeriphCLKConfig+0x8d2>

      case RCC_SPI23CLKSOURCE_PLL3_R: /* PLL3_R is used as clock source for SPI23 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100045c0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100045c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100045c8:	681b      	ldr	r3, [r3, #0]
100045ca:	3344      	adds	r3, #68	; 0x44
100045cc:	4618      	mov	r0, r3
100045ce:	f7ff f8eb 	bl	100037a8 <RCCEx_PLL3_Config>
100045d2:	4603      	mov	r3, r0
100045d4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100045d8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100045dc:	2b00      	cmp	r3, #0
100045de:	d003      	beq.n	100045e8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        {
          return status;
100045e0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100045e4:	f001 ba2c 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
100045e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100045ec:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100045f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100045f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100045f8:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100045fc:	bf00      	nop
    }

    /* Set the source of SPI2 clock*/
    __HAL_RCC_SPI23_CONFIG(PeriphClkInit->Spi23ClockSelection);
100045fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004602:	f8d3 38dc 	ldr.w	r3, [r3, #2268]	; 0x8dc
10004606:	f023 0107 	bic.w	r1, r3, #7
1000460a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000460e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004612:	681b      	ldr	r3, [r3, #0]
10004614:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
10004618:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000461c:	430b      	orrs	r3, r1
1000461e:	f8c2 38dc 	str.w	r3, [r2, #2268]	; 0x8dc
  }

  /*---------------------------- SPI45 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) ==
10004622:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000462a:	681b      	ldr	r3, [r3, #0]
1000462c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004630:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
10004634:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
10004638:	2300      	movs	r3, #0
1000463a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
1000463e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
10004642:	460b      	mov	r3, r1
10004644:	4313      	orrs	r3, r2
10004646:	d038      	beq.n	100046ba <HAL_RCCEx_PeriphCLKConfig+0x98e>
      RCC_PERIPHCLK_SPI45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI45CLKSOURCE(PeriphClkInit->Spi45ClockSelection));

    if (PeriphClkInit->Spi45ClockSelection == RCC_SPI45CLKSOURCE_PLL4)
10004648:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000464c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004650:	681b      	ldr	r3, [r3, #0]
10004652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
10004656:	2b01      	cmp	r3, #1
10004658:	d11d      	bne.n	10004696 <HAL_RCCEx_PeriphCLKConfig+0x96a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000465a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000465e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004662:	681b      	ldr	r3, [r3, #0]
10004664:	3380      	adds	r3, #128	; 0x80
10004666:	4618      	mov	r0, r3
10004668:	f7ff fa08 	bl	10003a7c <RCCEx_PLL4_Config>
1000466c:	4603      	mov	r3, r0
1000466e:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004672:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004676:	2b00      	cmp	r3, #0
10004678:	d003      	beq.n	10004682 <HAL_RCCEx_PeriphCLKConfig+0x956>
      {
        return status;
1000467a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000467e:	f001 b9df 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable SPI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004682:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004686:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000468a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000468e:	f043 0320 	orr.w	r3, r3, #32
10004692:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of SPI45 clock*/
    __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
10004696:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000469a:	f8d3 38e0 	ldr.w	r3, [r3, #2272]	; 0x8e0
1000469e:	f023 0107 	bic.w	r1, r3, #7
100046a2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100046a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100046aa:	681b      	ldr	r3, [r3, #0]
100046ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
100046b0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100046b4:	430b      	orrs	r3, r1
100046b6:	f8c2 38e0 	str.w	r3, [r2, #2272]	; 0x8e0
  }

  /*---------------------------- SPI6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) ==
100046ba:	f507 7312 	add.w	r3, r7, #584	; 0x248
100046be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100046c2:	681b      	ldr	r3, [r3, #0]
100046c4:	e9d3 2300 	ldrd	r2, r3, [r3]
100046c8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
100046cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
100046d0:	2300      	movs	r3, #0
100046d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
100046d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
100046da:	460b      	mov	r3, r1
100046dc:	4313      	orrs	r3, r2
100046de:	d05b      	beq.n	10004798 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
      RCC_PERIPHCLK_SPI6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));

    switch (PeriphClkInit->Spi6ClockSelection)
100046e0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100046e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100046e8:	681b      	ldr	r3, [r3, #0]
100046ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
100046ee:	2b01      	cmp	r3, #1
100046f0:	d002      	beq.n	100046f8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
100046f2:	2b05      	cmp	r3, #5
100046f4:	d01f      	beq.n	10004736 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
100046f6:	e03d      	b.n	10004774 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    {
      case RCC_SPI6CLKSOURCE_PLL4: /* PLL4 is used as clock source for SPI6 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100046f8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100046fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004700:	681b      	ldr	r3, [r3, #0]
10004702:	3380      	adds	r3, #128	; 0x80
10004704:	4618      	mov	r0, r3
10004706:	f7ff f9b9 	bl	10003a7c <RCCEx_PLL4_Config>
1000470a:	4603      	mov	r3, r0
1000470c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004710:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004714:	2b00      	cmp	r3, #0
10004716:	d003      	beq.n	10004720 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        {
          return status;
10004718:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000471c:	f001 b990 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004720:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004724:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004728:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000472c:	f043 0320 	orr.w	r3, r3, #32
10004730:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004734:	e01e      	b.n	10004774 <HAL_RCCEx_PeriphCLKConfig+0xa48>

      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is used as clock source for SPI6 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004736:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000473a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000473e:	681b      	ldr	r3, [r3, #0]
10004740:	3344      	adds	r3, #68	; 0x44
10004742:	4618      	mov	r0, r3
10004744:	f7ff f830 	bl	100037a8 <RCCEx_PLL3_Config>
10004748:	4603      	mov	r3, r0
1000474a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000474e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004752:	2b00      	cmp	r3, #0
10004754:	d003      	beq.n	1000475e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        {
          return status;
10004756:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000475a:	f001 b971 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000475e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004762:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004766:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000476a:	f043 0320 	orr.w	r3, r3, #32
1000476e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004772:	bf00      	nop
    }

    /* Set the source of SPI6 clock*/
    __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
10004774:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004778:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
1000477c:	f023 0107 	bic.w	r1, r3, #7
10004780:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004784:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004788:	681b      	ldr	r3, [r3, #0]
1000478a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
1000478e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004792:	430b      	orrs	r3, r1
10004794:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  /*---------------------------- USART6 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) ==
10004798:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000479c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100047a0:	681b      	ldr	r3, [r3, #0]
100047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
100047a6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
100047aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
100047ae:	2300      	movs	r3, #0
100047b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
100047b4:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
100047b8:	460b      	mov	r3, r1
100047ba:	4313      	orrs	r3, r2
100047bc:	d038      	beq.n	10004830 <HAL_RCCEx_PeriphCLKConfig+0xb04>
      RCC_PERIPHCLK_USART6)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_PLL4)
100047be:	f507 7312 	add.w	r3, r7, #584	; 0x248
100047c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100047c6:	681b      	ldr	r3, [r3, #0]
100047c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
100047cc:	2b01      	cmp	r3, #1
100047ce:	d11d      	bne.n	1000480c <HAL_RCCEx_PeriphCLKConfig+0xae0>
    {
      /* PLL4 is used as clock source for USART6 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100047d0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100047d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100047d8:	681b      	ldr	r3, [r3, #0]
100047da:	3380      	adds	r3, #128	; 0x80
100047dc:	4618      	mov	r0, r3
100047de:	f7ff f94d 	bl	10003a7c <RCCEx_PLL4_Config>
100047e2:	4603      	mov	r3, r0
100047e4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100047e8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100047ec:	2b00      	cmp	r3, #0
100047ee:	d003      	beq.n	100047f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
      {
        return status;
100047f0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100047f4:	f001 b924 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100047f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100047fc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004800:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004804:	f043 0320 	orr.w	r3, r3, #32
10004808:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of USART6 clock*/
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
1000480c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004810:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10004814:	f023 0107 	bic.w	r1, r3, #7
10004818:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000481c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004820:	681b      	ldr	r3, [r3, #0]
10004822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
10004826:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000482a:	430b      	orrs	r3, r1
1000482c:	f8c2 38e4 	str.w	r3, [r2, #2276]	; 0x8e4
  }

  /*---------------------------- UART24 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART24) ==
10004830:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004834:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004838:	681b      	ldr	r3, [r3, #0]
1000483a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000483e:	f002 0302 	and.w	r3, r2, #2
10004842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
10004846:	2300      	movs	r3, #0
10004848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
1000484c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
10004850:	460b      	mov	r3, r1
10004852:	4313      	orrs	r3, r2
10004854:	d038      	beq.n	100048c8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      RCC_PERIPHCLK_UART24)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART24CLKSOURCE(PeriphClkInit->Uart24ClockSelection));

    if (PeriphClkInit->Uart24ClockSelection == RCC_UART24CLKSOURCE_PLL4)
10004856:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000485a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000485e:	681b      	ldr	r3, [r3, #0]
10004860:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
10004864:	2b01      	cmp	r3, #1
10004866:	d11d      	bne.n	100048a4 <HAL_RCCEx_PeriphCLKConfig+0xb78>
    {
      /* PLL4 is used as clock source for UART24 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004868:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000486c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004870:	681b      	ldr	r3, [r3, #0]
10004872:	3380      	adds	r3, #128	; 0x80
10004874:	4618      	mov	r0, r3
10004876:	f7ff f901 	bl	10003a7c <RCCEx_PLL4_Config>
1000487a:	4603      	mov	r3, r0
1000487c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004880:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004884:	2b00      	cmp	r3, #0
10004886:	d003      	beq.n	10004890 <HAL_RCCEx_PeriphCLKConfig+0xb64>
      {
        return status;
10004888:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000488c:	f001 b8d8 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004890:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004894:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004898:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000489c:	f043 0320 	orr.w	r3, r3, #32
100048a0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART24 clock*/
    __HAL_RCC_UART24_CONFIG(PeriphClkInit->Uart24ClockSelection);
100048a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100048a8:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
100048ac:	f023 0107 	bic.w	r1, r3, #7
100048b0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100048b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100048b8:	681b      	ldr	r3, [r3, #0]
100048ba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
100048be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100048c2:	430b      	orrs	r3, r1
100048c4:	f8c2 38e8 	str.w	r3, [r2, #2280]	; 0x8e8
  }

  /*---------------------------- UART35 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART35) ==
100048c8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100048cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100048d0:	681b      	ldr	r3, [r3, #0]
100048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
100048d6:	f002 0304 	and.w	r3, r2, #4
100048da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
100048de:	2300      	movs	r3, #0
100048e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
100048e4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
100048e8:	460b      	mov	r3, r1
100048ea:	4313      	orrs	r3, r2
100048ec:	d038      	beq.n	10004960 <HAL_RCCEx_PeriphCLKConfig+0xc34>
      RCC_PERIPHCLK_UART35)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART35CLKSOURCE(PeriphClkInit->Uart35ClockSelection));

    if (PeriphClkInit->Uart35ClockSelection == RCC_UART35CLKSOURCE_PLL4)
100048ee:	f507 7312 	add.w	r3, r7, #584	; 0x248
100048f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100048f6:	681b      	ldr	r3, [r3, #0]
100048f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
100048fc:	2b01      	cmp	r3, #1
100048fe:	d11d      	bne.n	1000493c <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      /* PLL4 is used as clock source for UART35 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004900:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004904:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004908:	681b      	ldr	r3, [r3, #0]
1000490a:	3380      	adds	r3, #128	; 0x80
1000490c:	4618      	mov	r0, r3
1000490e:	f7ff f8b5 	bl	10003a7c <RCCEx_PLL4_Config>
10004912:	4603      	mov	r3, r0
10004914:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10004918:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000491c:	2b00      	cmp	r3, #0
1000491e:	d003      	beq.n	10004928 <HAL_RCCEx_PeriphCLKConfig+0xbfc>
      {
        return status;
10004920:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004924:	f001 b88c 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004928:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000492c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004930:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004934:	f043 0320 	orr.w	r3, r3, #32
10004938:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART35 clock*/
    __HAL_RCC_UART35_CONFIG(PeriphClkInit->Uart35ClockSelection);
1000493c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004940:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10004944:	f023 0107 	bic.w	r1, r3, #7
10004948:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000494c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004950:	681b      	ldr	r3, [r3, #0]
10004952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
10004956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000495a:	430b      	orrs	r3, r1
1000495c:	f8c2 38ec 	str.w	r3, [r2, #2284]	; 0x8ec
  }

  /*---------------------------- UAUART78 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART78) ==
10004960:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004968:	681b      	ldr	r3, [r3, #0]
1000496a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000496e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
10004972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
10004976:	2300      	movs	r3, #0
10004978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
1000497c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
10004980:	460b      	mov	r3, r1
10004982:	4313      	orrs	r3, r2
10004984:	d038      	beq.n	100049f8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      RCC_PERIPHCLK_UART78)
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART78CLKSOURCE(PeriphClkInit->Uart78ClockSelection));

    if (PeriphClkInit->Uart78ClockSelection == RCC_UART78CLKSOURCE_PLL4)
10004986:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000498a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000498e:	681b      	ldr	r3, [r3, #0]
10004990:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
10004994:	2b01      	cmp	r3, #1
10004996:	d11d      	bne.n	100049d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* PLL4 is used as clock source for UART78 */
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004998:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000499c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100049a0:	681b      	ldr	r3, [r3, #0]
100049a2:	3380      	adds	r3, #128	; 0x80
100049a4:	4618      	mov	r0, r3
100049a6:	f7ff f869 	bl	10003a7c <RCCEx_PLL4_Config>
100049aa:	4603      	mov	r3, r0
100049ac:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100049b0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100049b4:	2b00      	cmp	r3, #0
100049b6:	d003      	beq.n	100049c0 <HAL_RCCEx_PeriphCLKConfig+0xc94>
      {
        return status;
100049b8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100049bc:	f001 b840 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable UART Clock output generated on PLL4 */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
100049c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049c4:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100049c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100049cc:	f043 0320 	orr.w	r3, r3, #32
100049d0:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of UART78 clock*/
    __HAL_RCC_UART78_CONFIG(PeriphClkInit->Uart78ClockSelection);
100049d4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100049d8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
100049dc:	f023 0107 	bic.w	r1, r3, #7
100049e0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100049e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100049e8:	681b      	ldr	r3, [r3, #0]
100049ea:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
100049ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100049f2:	430b      	orrs	r3, r1
100049f4:	f8c2 38f0 	str.w	r3, [r2, #2288]	; 0x8f0
  }

  /*---------------------------- USART1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) ==
100049f8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100049fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004a00:	681b      	ldr	r3, [r3, #0]
10004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
10004a06:	f002 0301 	and.w	r3, r2, #1
10004a0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
10004a0e:	2300      	movs	r3, #0
10004a10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
10004a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
10004a18:	460b      	mov	r3, r1
10004a1a:	4313      	orrs	r3, r2
10004a1c:	d05b      	beq.n	10004ad6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
      RCC_PERIPHCLK_USART1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    switch (PeriphClkInit->Usart1ClockSelection)
10004a1e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004a22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004a26:	681b      	ldr	r3, [r3, #0]
10004a28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10004a2c:	2b01      	cmp	r3, #1
10004a2e:	d002      	beq.n	10004a36 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
10004a30:	2b04      	cmp	r3, #4
10004a32:	d01f      	beq.n	10004a74 <HAL_RCCEx_PeriphCLKConfig+0xd48>
10004a34:	e03d      	b.n	10004ab2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
    {
      case RCC_USART1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for USART1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004a36:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004a3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004a3e:	681b      	ldr	r3, [r3, #0]
10004a40:	3344      	adds	r3, #68	; 0x44
10004a42:	4618      	mov	r0, r3
10004a44:	f7fe feb0 	bl	100037a8 <RCCEx_PLL3_Config>
10004a48:	4603      	mov	r3, r0
10004a4a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004a4e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004a52:	2b00      	cmp	r3, #0
10004a54:	d003      	beq.n	10004a5e <HAL_RCCEx_PeriphCLKConfig+0xd32>
        {
          return status;
10004a56:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004a5a:	f000 bff1 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable UART Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004a5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004a62:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004a66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004a6a:	f043 0320 	orr.w	r3, r3, #32
10004a6e:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004a72:	e01e      	b.n	10004ab2 <HAL_RCCEx_PeriphCLKConfig+0xd86>

      case RCC_USART1CLKSOURCE_PLL4: /* PLL4 is used as clock source for USART1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004a74:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004a7c:	681b      	ldr	r3, [r3, #0]
10004a7e:	3380      	adds	r3, #128	; 0x80
10004a80:	4618      	mov	r0, r3
10004a82:	f7fe fffb 	bl	10003a7c <RCCEx_PLL4_Config>
10004a86:	4603      	mov	r3, r0
10004a88:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004a8c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004a90:	2b00      	cmp	r3, #0
10004a92:	d003      	beq.n	10004a9c <HAL_RCCEx_PeriphCLKConfig+0xd70>
        {
          return status;
10004a94:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004a98:	f000 bfd2 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable USART Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004a9c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004aa0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004aa4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004aa8:	f043 0320 	orr.w	r3, r3, #32
10004aac:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004ab0:	bf00      	nop
    }

    /* Set the source of USART1 clock*/
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
10004ab2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ab6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10004aba:	f023 0107 	bic.w	r1, r3, #7
10004abe:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004ac2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004ac6:	681b      	ldr	r3, [r3, #0]
10004ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
10004acc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004ad0:	430b      	orrs	r3, r1
10004ad2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /*---------------------------- SDMMC12 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC12) ==
10004ad6:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004ada:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004ade:	681b      	ldr	r3, [r3, #0]
10004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
10004ae4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
10004ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
10004aec:	2300      	movs	r3, #0
10004aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
10004af2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
10004af6:	460b      	mov	r3, r1
10004af8:	4313      	orrs	r3, r2
10004afa:	d05b      	beq.n	10004bb4 <HAL_RCCEx_PeriphCLKConfig+0xe88>
      RCC_PERIPHCLK_SDMMC12)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC12CLKSOURCE(PeriphClkInit->Sdmmc12ClockSelection));

    switch (PeriphClkInit->Sdmmc12ClockSelection)
10004afc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004b00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004b04:	681b      	ldr	r3, [r3, #0]
10004b06:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10004b0a:	2b01      	cmp	r3, #1
10004b0c:	d002      	beq.n	10004b14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
10004b0e:	2b02      	cmp	r3, #2
10004b10:	d01f      	beq.n	10004b52 <HAL_RCCEx_PeriphCLKConfig+0xe26>
10004b12:	e03d      	b.n	10004b90 <HAL_RCCEx_PeriphCLKConfig+0xe64>
    {
      case RCC_SDMMC12CLKSOURCE_PLL3: /* PLL3 is used as clock source for SDMMC12 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004b14:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004b18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004b1c:	681b      	ldr	r3, [r3, #0]
10004b1e:	3344      	adds	r3, #68	; 0x44
10004b20:	4618      	mov	r0, r3
10004b22:	f7fe fe41 	bl	100037a8 <RCCEx_PLL3_Config>
10004b26:	4603      	mov	r3, r0
10004b28:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004b2c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004b30:	2b00      	cmp	r3, #0
10004b32:	d003      	beq.n	10004b3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
        {
          return status;
10004b34:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004b38:	f000 bf82 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004b3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b40:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004b44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004b4c:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004b50:	e01e      	b.n	10004b90 <HAL_RCCEx_PeriphCLKConfig+0xe64>

      case RCC_SDMMC12CLKSOURCE_PLL4: /* PLL4 is used as clock source for SDMMC12 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004b52:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004b5a:	681b      	ldr	r3, [r3, #0]
10004b5c:	3380      	adds	r3, #128	; 0x80
10004b5e:	4618      	mov	r0, r3
10004b60:	f7fe ff8c 	bl	10003a7c <RCCEx_PLL4_Config>
10004b64:	4603      	mov	r3, r0
10004b66:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004b6a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004b6e:	2b00      	cmp	r3, #0
10004b70:	d003      	beq.n	10004b7a <HAL_RCCEx_PeriphCLKConfig+0xe4e>
        {
          return status;
10004b72:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004b76:	f000 bf63 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC12 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b7e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004b82:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004b86:	f043 0310 	orr.w	r3, r3, #16
10004b8a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004b8e:	bf00      	nop
    }

    /* Set the source of SDMMC12 clock*/
    __HAL_RCC_SDMMC12_CONFIG(PeriphClkInit->Sdmmc12ClockSelection);
10004b90:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004b94:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
10004b98:	f023 0107 	bic.w	r1, r3, #7
10004b9c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004ba0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004ba4:	681b      	ldr	r3, [r3, #0]
10004ba6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
10004baa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004bae:	430b      	orrs	r3, r1
10004bb0:	f8c2 38f4 	str.w	r3, [r2, #2292]	; 0x8f4
  }

  /*---------------------------- SDMMC3 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC3) ==
10004bb4:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004bb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004bbc:	681b      	ldr	r3, [r3, #0]
10004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
10004bc2:	2100      	movs	r1, #0
10004bc4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
10004bc8:	f003 0301 	and.w	r3, r3, #1
10004bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
10004bd0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
10004bd4:	460b      	mov	r3, r1
10004bd6:	4313      	orrs	r3, r2
10004bd8:	d05b      	beq.n	10004c92 <HAL_RCCEx_PeriphCLKConfig+0xf66>
      RCC_PERIPHCLK_SDMMC3)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC3CLKSOURCE(PeriphClkInit->Sdmmc3ClockSelection));

    switch (PeriphClkInit->Sdmmc3ClockSelection)
10004bda:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004bde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004be2:	681b      	ldr	r3, [r3, #0]
10004be4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10004be8:	2b01      	cmp	r3, #1
10004bea:	d002      	beq.n	10004bf2 <HAL_RCCEx_PeriphCLKConfig+0xec6>
10004bec:	2b02      	cmp	r3, #2
10004bee:	d01f      	beq.n	10004c30 <HAL_RCCEx_PeriphCLKConfig+0xf04>
10004bf0:	e03d      	b.n	10004c6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
    {
      case RCC_SDMMC3CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SDMMC3 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004bf2:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004bfa:	681b      	ldr	r3, [r3, #0]
10004bfc:	3344      	adds	r3, #68	; 0x44
10004bfe:	4618      	mov	r0, r3
10004c00:	f7fe fdd2 	bl	100037a8 <RCCEx_PLL3_Config>
10004c04:	4603      	mov	r3, r0
10004c06:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004c0a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004c0e:	2b00      	cmp	r3, #0
10004c10:	d003      	beq.n	10004c1a <HAL_RCCEx_PeriphCLKConfig+0xeee>
        {
          return status;
10004c12:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004c16:	f000 bf13 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004c1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c1e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004c22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004c2a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004c2e:	e01e      	b.n	10004c6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_SDMMC3CLKSOURCE_PLL4:  /* PLL4 is used as clock source for SDMMC3 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004c30:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004c38:	681b      	ldr	r3, [r3, #0]
10004c3a:	3380      	adds	r3, #128	; 0x80
10004c3c:	4618      	mov	r0, r3
10004c3e:	f7fe ff1d 	bl	10003a7c <RCCEx_PLL4_Config>
10004c42:	4603      	mov	r3, r0
10004c44:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004c48:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004c4c:	2b00      	cmp	r3, #0
10004c4e:	d003      	beq.n	10004c58 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
        {
          return status;
10004c50:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004c54:	f000 bef4 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SDMMC3 Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004c58:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c5c:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004c60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004c64:	f043 0310 	orr.w	r3, r3, #16
10004c68:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004c6c:	bf00      	nop
    }

    /* Set the source of SDMMC3 clock*/
    __HAL_RCC_SDMMC3_CONFIG(PeriphClkInit->Sdmmc3ClockSelection);
10004c6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004c72:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
10004c76:	f023 0107 	bic.w	r1, r3, #7
10004c7a:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004c7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004c82:	681b      	ldr	r3, [r3, #0]
10004c84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
10004c88:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004c8c:	430b      	orrs	r3, r1
10004c8e:	f8c2 38f8 	str.w	r3, [r2, #2296]	; 0x8f8
  }

  /*---------------------------- ETH configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ETH) ==
10004c92:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004c96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004c9a:	681b      	ldr	r3, [r3, #0]
10004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
10004ca0:	2100      	movs	r1, #0
10004ca2:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
10004ca6:	f003 0302 	and.w	r3, r3, #2
10004caa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
10004cae:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
10004cb2:	460b      	mov	r3, r1
10004cb4:	4313      	orrs	r3, r2
10004cb6:	d05b      	beq.n	10004d70 <HAL_RCCEx_PeriphCLKConfig+0x1044>
      RCC_PERIPHCLK_ETH)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ETHCLKSOURCE(PeriphClkInit->EthClockSelection));

    switch (PeriphClkInit->EthClockSelection)
10004cb8:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004cc0:	681b      	ldr	r3, [r3, #0]
10004cc2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10004cc6:	2b00      	cmp	r3, #0
10004cc8:	d002      	beq.n	10004cd0 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
10004cca:	2b01      	cmp	r3, #1
10004ccc:	d01f      	beq.n	10004d0e <HAL_RCCEx_PeriphCLKConfig+0xfe2>
10004cce:	e03d      	b.n	10004d4c <HAL_RCCEx_PeriphCLKConfig+0x1020>
    {
      case RCC_ETHCLKSOURCE_PLL4:     /* PLL4 is used as clock source for ETH */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004cd0:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004cd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004cd8:	681b      	ldr	r3, [r3, #0]
10004cda:	3380      	adds	r3, #128	; 0x80
10004cdc:	4618      	mov	r0, r3
10004cde:	f7fe fecd 	bl	10003a7c <RCCEx_PLL4_Config>
10004ce2:	4603      	mov	r3, r0
10004ce4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004ce8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004cec:	2b00      	cmp	r3, #0
10004cee:	d003      	beq.n	10004cf8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
        {
          return status;
10004cf0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004cf4:	f000 bea4 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL2 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004cf8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004cfc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004d00:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004d04:	f043 0310 	orr.w	r3, r3, #16
10004d08:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004d0c:	e01e      	b.n	10004d4c <HAL_RCCEx_PeriphCLKConfig+0x1020>

      case RCC_ETHCLKSOURCE_PLL3:     /* PLL3 is used as clock source for ETH */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004d0e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004d12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004d16:	681b      	ldr	r3, [r3, #0]
10004d18:	3344      	adds	r3, #68	; 0x44
10004d1a:	4618      	mov	r0, r3
10004d1c:	f7fe fd44 	bl	100037a8 <RCCEx_PLL3_Config>
10004d20:	4603      	mov	r3, r0
10004d22:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004d26:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004d2a:	2b00      	cmp	r3, #0
10004d2c:	d003      	beq.n	10004d36 <HAL_RCCEx_PeriphCLKConfig+0x100a>
        {
          return status;
10004d2e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004d32:	f000 be85 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ETH Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004d36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d3a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004d3e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004d42:	f043 0320 	orr.w	r3, r3, #32
10004d46:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004d4a:	bf00      	nop
    }

    /* Set the source of ETH clock*/
    __HAL_RCC_ETH_CONFIG(PeriphClkInit->EthClockSelection);
10004d4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004d50:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
10004d54:	f023 0103 	bic.w	r1, r3, #3
10004d58:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004d5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004d60:	681b      	ldr	r3, [r3, #0]
10004d62:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
10004d66:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004d6a:	430b      	orrs	r3, r1
10004d6c:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
  }

  /*---------------------------- QSPI configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) ==
10004d70:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004d74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004d78:	681b      	ldr	r3, [r3, #0]
10004d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
10004d7e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
10004d82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
10004d86:	2300      	movs	r3, #0
10004d88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
10004d8c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
10004d90:	460b      	mov	r3, r1
10004d92:	4313      	orrs	r3, r2
10004d94:	d05b      	beq.n	10004e4e <HAL_RCCEx_PeriphCLKConfig+0x1122>
      RCC_PERIPHCLK_QSPI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    switch (PeriphClkInit->QspiClockSelection)
10004d96:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004d9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004d9e:	681b      	ldr	r3, [r3, #0]
10004da0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10004da4:	2b01      	cmp	r3, #1
10004da6:	d002      	beq.n	10004dae <HAL_RCCEx_PeriphCLKConfig+0x1082>
10004da8:	2b02      	cmp	r3, #2
10004daa:	d01f      	beq.n	10004dec <HAL_RCCEx_PeriphCLKConfig+0x10c0>
10004dac:	e03d      	b.n	10004e2a <HAL_RCCEx_PeriphCLKConfig+0x10fe>
    {
      case RCC_QSPICLKSOURCE_PLL3:   /* PLL3 is used as clock source for QSPI */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004dae:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004db2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004db6:	681b      	ldr	r3, [r3, #0]
10004db8:	3344      	adds	r3, #68	; 0x44
10004dba:	4618      	mov	r0, r3
10004dbc:	f7fe fcf4 	bl	100037a8 <RCCEx_PLL3_Config>
10004dc0:	4603      	mov	r3, r0
10004dc2:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004dc6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004dca:	2b00      	cmp	r3, #0
10004dcc:	d003      	beq.n	10004dd6 <HAL_RCCEx_PeriphCLKConfig+0x10aa>
        {
          return status;
10004dce:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004dd2:	f000 be35 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004dd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004dda:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004dde:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004de6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004dea:	e01e      	b.n	10004e2a <HAL_RCCEx_PeriphCLKConfig+0x10fe>

      case RCC_QSPICLKSOURCE_PLL4:   /* PLL4 is used as clock source for QSPI */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004dec:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004df0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004df4:	681b      	ldr	r3, [r3, #0]
10004df6:	3380      	adds	r3, #128	; 0x80
10004df8:	4618      	mov	r0, r3
10004dfa:	f7fe fe3f 	bl	10003a7c <RCCEx_PLL4_Config>
10004dfe:	4603      	mov	r3, r0
10004e00:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004e04:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004e08:	2b00      	cmp	r3, #0
10004e0a:	d003      	beq.n	10004e14 <HAL_RCCEx_PeriphCLKConfig+0x10e8>
        {
          return status;
10004e0c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004e10:	f000 be16 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable QSPI Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004e14:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e18:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004e1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004e20:	f043 0310 	orr.w	r3, r3, #16
10004e24:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004e28:	bf00      	nop
    }

    /* Set the source of QSPI clock*/
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
10004e2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004e2e:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
10004e32:	f023 0103 	bic.w	r1, r3, #3
10004e36:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004e3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004e3e:	681b      	ldr	r3, [r3, #0]
10004e40:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
10004e44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004e48:	430b      	orrs	r3, r1
10004e4a:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  }

  /*---------------------------- FMC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) ==
10004e4e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004e52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004e56:	681b      	ldr	r3, [r3, #0]
10004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
10004e5c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
10004e60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
10004e64:	2300      	movs	r3, #0
10004e66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
10004e6a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
10004e6e:	460b      	mov	r3, r1
10004e70:	4313      	orrs	r3, r2
10004e72:	d05b      	beq.n	10004f2c <HAL_RCCEx_PeriphCLKConfig+0x1200>
      RCC_PERIPHCLK_FMC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));

    switch (PeriphClkInit->FmcClockSelection)
10004e74:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004e78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004e7c:	681b      	ldr	r3, [r3, #0]
10004e7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10004e82:	2b01      	cmp	r3, #1
10004e84:	d002      	beq.n	10004e8c <HAL_RCCEx_PeriphCLKConfig+0x1160>
10004e86:	2b02      	cmp	r3, #2
10004e88:	d01f      	beq.n	10004eca <HAL_RCCEx_PeriphCLKConfig+0x119e>
10004e8a:	e03d      	b.n	10004f08 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
    {
      case RCC_FMCCLKSOURCE_PLL3: /* PLL3 is used as clock source for FMC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004e8c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004e90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004e94:	681b      	ldr	r3, [r3, #0]
10004e96:	3344      	adds	r3, #68	; 0x44
10004e98:	4618      	mov	r0, r3
10004e9a:	f7fe fc85 	bl	100037a8 <RCCEx_PLL3_Config>
10004e9e:	4603      	mov	r3, r0
10004ea0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004ea4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004ea8:	2b00      	cmp	r3, #0
10004eaa:	d003      	beq.n	10004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
        {
          return status;
10004eac:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004eb0:	f000 bdc6 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
10004eb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004eb8:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004ebc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10004ec4:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004ec8:	e01e      	b.n	10004f08 <HAL_RCCEx_PeriphCLKConfig+0x11dc>

      case RCC_FMCCLKSOURCE_PLL4: /* PLL4 is used as clock source for FMC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004eca:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004ed2:	681b      	ldr	r3, [r3, #0]
10004ed4:	3380      	adds	r3, #128	; 0x80
10004ed6:	4618      	mov	r0, r3
10004ed8:	f7fe fdd0 	bl	10003a7c <RCCEx_PLL4_Config>
10004edc:	4603      	mov	r3, r0
10004ede:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004ee2:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004ee6:	2b00      	cmp	r3, #0
10004ee8:	d003      	beq.n	10004ef2 <HAL_RCCEx_PeriphCLKConfig+0x11c6>
        {
          return status;
10004eea:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004eee:	f000 bda7 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FMC Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10004ef2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004ef6:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004efa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004efe:	f043 0310 	orr.w	r3, r3, #16
10004f02:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004f06:	bf00      	nop
    }

    /* Set the source of FMC clock*/
    __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
10004f08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f0c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
10004f10:	f023 0103 	bic.w	r1, r3, #3
10004f14:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004f18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004f1c:	681b      	ldr	r3, [r3, #0]
10004f1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
10004f22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004f26:	430b      	orrs	r3, r1
10004f28:	f8c2 3904 	str.w	r3, [r2, #2308]	; 0x904
  }

#if defined(FDCAN1)
  /*---------------------------- FDCAN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) ==
10004f2c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004f30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004f34:	681b      	ldr	r3, [r3, #0]
10004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
10004f3a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
10004f3e:	67bb      	str	r3, [r7, #120]	; 0x78
10004f40:	2300      	movs	r3, #0
10004f42:	67fb      	str	r3, [r7, #124]	; 0x7c
10004f44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
10004f48:	460b      	mov	r3, r1
10004f4a:	4313      	orrs	r3, r2
10004f4c:	d07e      	beq.n	1000504c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      RCC_PERIPHCLK_FDCAN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    switch (PeriphClkInit->FdcanClockSelection)
10004f4e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004f52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004f56:	681b      	ldr	r3, [r3, #0]
10004f58:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10004f5c:	2b03      	cmp	r3, #3
10004f5e:	d044      	beq.n	10004fea <HAL_RCCEx_PeriphCLKConfig+0x12be>
10004f60:	2b03      	cmp	r3, #3
10004f62:	d861      	bhi.n	10005028 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
10004f64:	2b01      	cmp	r3, #1
10004f66:	d002      	beq.n	10004f6e <HAL_RCCEx_PeriphCLKConfig+0x1242>
10004f68:	2b02      	cmp	r3, #2
10004f6a:	d01f      	beq.n	10004fac <HAL_RCCEx_PeriphCLKConfig+0x1280>
10004f6c:	e05c      	b.n	10005028 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
    {
      case RCC_FDCANCLKSOURCE_PLL3: /* PLL3 is used as clock source for FDCAN */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10004f6e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004f72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004f76:	681b      	ldr	r3, [r3, #0]
10004f78:	3344      	adds	r3, #68	; 0x44
10004f7a:	4618      	mov	r0, r3
10004f7c:	f7fe fc14 	bl	100037a8 <RCCEx_PLL3_Config>
10004f80:	4603      	mov	r3, r0
10004f82:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004f86:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004f8a:	2b00      	cmp	r3, #0
10004f8c:	d003      	beq.n	10004f96 <HAL_RCCEx_PeriphCLKConfig+0x126a>
        {
          return status;
10004f8e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004f92:	f000 bd55 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10004f96:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004f9a:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10004f9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004fa2:	f043 0320 	orr.w	r3, r3, #32
10004fa6:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10004faa:	e03d      	b.n	10005028 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_Q: /* PLL4_Q is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004fac:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004fb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004fb4:	681b      	ldr	r3, [r3, #0]
10004fb6:	3380      	adds	r3, #128	; 0x80
10004fb8:	4618      	mov	r0, r3
10004fba:	f7fe fd5f 	bl	10003a7c <RCCEx_PLL4_Config>
10004fbe:	4603      	mov	r3, r0
10004fc0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10004fc4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004fc8:	2b00      	cmp	r3, #0
10004fca:	d003      	beq.n	10004fd4 <HAL_RCCEx_PeriphCLKConfig+0x12a8>
        {
          return status;
10004fcc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10004fd0:	f000 bd36 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10004fd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10004fd8:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10004fdc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10004fe0:	f043 0320 	orr.w	r3, r3, #32
10004fe4:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10004fe8:	e01e      	b.n	10005028 <HAL_RCCEx_PeriphCLKConfig+0x12fc>

      case RCC_FDCANCLKSOURCE_PLL4_R: /* PLL4_R is used as clock source for FDCAN */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10004fea:	f507 7312 	add.w	r3, r7, #584	; 0x248
10004fee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10004ff2:	681b      	ldr	r3, [r3, #0]
10004ff4:	3380      	adds	r3, #128	; 0x80
10004ff6:	4618      	mov	r0, r3
10004ff8:	f7fe fd40 	bl	10003a7c <RCCEx_PLL4_Config>
10004ffc:	4603      	mov	r3, r0
10004ffe:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005002:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005006:	2b00      	cmp	r3, #0
10005008:	d003      	beq.n	10005012 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
        {
          return status;
1000500a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000500e:	f000 bd17 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable FDCAN Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
10005012:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005016:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000501a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000501e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
10005022:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005026:	bf00      	nop
    }

    /* Set the source of FDCAN clock*/
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
10005028:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000502c:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
10005030:	f023 0103 	bic.w	r1, r3, #3
10005034:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005038:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000503c:	681b      	ldr	r3, [r3, #0]
1000503e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
10005042:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005046:	430b      	orrs	r3, r1
10005048:	f8c2 390c 	str.w	r3, [r2, #2316]	; 0x90c
  }
#endif /*FDCAN1*/

  /*---------------------------- SPDIFRX configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) ==
1000504c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005050:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005054:	681b      	ldr	r3, [r3, #0]
10005056:	e9d3 2300 	ldrd	r2, r3, [r3]
1000505a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
1000505e:	673b      	str	r3, [r7, #112]	; 0x70
10005060:	2300      	movs	r3, #0
10005062:	677b      	str	r3, [r7, #116]	; 0x74
10005064:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
10005068:	460b      	mov	r3, r1
1000506a:	4313      	orrs	r3, r2
1000506c:	d05b      	beq.n	10005126 <HAL_RCCEx_PeriphCLKConfig+0x13fa>
      RCC_PERIPHCLK_SPDIFRX)
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifrxClockSelection));

    switch (PeriphClkInit->SpdifrxClockSelection)
1000506e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005076:	681b      	ldr	r3, [r3, #0]
10005078:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
1000507c:	2b00      	cmp	r3, #0
1000507e:	d002      	beq.n	10005086 <HAL_RCCEx_PeriphCLKConfig+0x135a>
10005080:	2b01      	cmp	r3, #1
10005082:	d01f      	beq.n	100050c4 <HAL_RCCEx_PeriphCLKConfig+0x1398>
10005084:	e03d      	b.n	10005102 <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL4: /* PLL4 is used as clock source for SPDIF */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005086:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000508a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000508e:	681b      	ldr	r3, [r3, #0]
10005090:	3380      	adds	r3, #128	; 0x80
10005092:	4618      	mov	r0, r3
10005094:	f7fe fcf2 	bl	10003a7c <RCCEx_PLL4_Config>
10005098:	4603      	mov	r3, r0
1000509a:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000509e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100050a2:	2b00      	cmp	r3, #0
100050a4:	d003      	beq.n	100050ae <HAL_RCCEx_PeriphCLKConfig+0x1382>
        {
          return status;
100050a6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100050aa:	f000 bcc9 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100050ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050b2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100050b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100050ba:	f043 0310 	orr.w	r3, r3, #16
100050be:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
100050c2:	e01e      	b.n	10005102 <HAL_RCCEx_PeriphCLKConfig+0x13d6>

      case RCC_SPDIFRXCLKSOURCE_PLL3: /* PLL3 is used as clock source for SPDIF */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
100050c4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100050c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100050cc:	681b      	ldr	r3, [r3, #0]
100050ce:	3344      	adds	r3, #68	; 0x44
100050d0:	4618      	mov	r0, r3
100050d2:	f7fe fb69 	bl	100037a8 <RCCEx_PLL3_Config>
100050d6:	4603      	mov	r3, r0
100050d8:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100050dc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100050e0:	2b00      	cmp	r3, #0
100050e2:	d003      	beq.n	100050ec <HAL_RCCEx_PeriphCLKConfig+0x13c0>
        {
          return status;
100050e4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100050e8:	f000 bcaa 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable SPDIF Clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100050ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100050f0:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100050f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100050f8:	f043 0320 	orr.w	r3, r3, #32
100050fc:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
10005100:	bf00      	nop
    }

    /* Set the source of SPDIF clock*/
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
10005102:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005106:	f8d3 3914 	ldr.w	r3, [r3, #2324]	; 0x914
1000510a:	f023 0103 	bic.w	r1, r3, #3
1000510e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005116:	681b      	ldr	r3, [r3, #0]
10005118:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
1000511c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005120:	430b      	orrs	r3, r1
10005122:	f8c2 3914 	str.w	r3, [r2, #2324]	; 0x914
  }

  /*---------------------------- CEC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) ==
10005126:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000512a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000512e:	681b      	ldr	r3, [r3, #0]
10005130:	e9d3 2300 	ldrd	r2, r3, [r3]
10005134:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
10005138:	66bb      	str	r3, [r7, #104]	; 0x68
1000513a:	2300      	movs	r3, #0
1000513c:	66fb      	str	r3, [r7, #108]	; 0x6c
1000513e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
10005142:	460b      	mov	r3, r1
10005144:	4313      	orrs	r3, r2
10005146:	d011      	beq.n	1000516c <HAL_RCCEx_PeriphCLKConfig+0x1440>
      RCC_PERIPHCLK_CEC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
10005148:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000514c:	f8d3 3918 	ldr.w	r3, [r3, #2328]	; 0x918
10005150:	f023 0103 	bic.w	r1, r3, #3
10005154:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005158:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000515c:	681b      	ldr	r3, [r3, #0]
1000515e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
10005162:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005166:	430b      	orrs	r3, r1
10005168:	f8c2 3918 	str.w	r3, [r2, #2328]	; 0x918
  }

  /*---------------------------- USBPHY configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) ==
1000516c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005170:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005174:	681b      	ldr	r3, [r3, #0]
10005176:	e9d3 2300 	ldrd	r2, r3, [r3]
1000517a:	f402 7300 	and.w	r3, r2, #512	; 0x200
1000517e:	663b      	str	r3, [r7, #96]	; 0x60
10005180:	2300      	movs	r3, #0
10005182:	667b      	str	r3, [r7, #100]	; 0x64
10005184:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
10005188:	460b      	mov	r3, r1
1000518a:	4313      	orrs	r3, r2
1000518c:	d038      	beq.n	10005200 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
      RCC_PERIPHCLK_USBPHY)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(PeriphClkInit->UsbphyClockSelection));

    if (PeriphClkInit->UsbphyClockSelection == RCC_USBPHYCLKSOURCE_PLL4)
1000518e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005196:	681b      	ldr	r3, [r3, #0]
10005198:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1000519c:	2b01      	cmp	r3, #1
1000519e:	d11d      	bne.n	100051dc <HAL_RCCEx_PeriphCLKConfig+0x14b0>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100051a0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100051a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100051a8:	681b      	ldr	r3, [r3, #0]
100051aa:	3380      	adds	r3, #128	; 0x80
100051ac:	4618      	mov	r0, r3
100051ae:	f7fe fc65 	bl	10003a7c <RCCEx_PLL4_Config>
100051b2:	4603      	mov	r3, r0
100051b4:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100051b8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100051bc:	2b00      	cmp	r3, #0
100051be:	d003      	beq.n	100051c8 <HAL_RCCEx_PeriphCLKConfig+0x149c>
      {
        return status;
100051c0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100051c4:	f000 bc3c 	b.w	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB PHY Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100051c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051cc:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100051d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100051d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100051d8:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBPHY_CONFIG(PeriphClkInit->UsbphyClockSelection);
100051dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100051e0:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
100051e4:	f023 0103 	bic.w	r1, r3, #3
100051e8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100051ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100051f0:	681b      	ldr	r3, [r3, #0]
100051f2:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
100051f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100051fa:	430b      	orrs	r3, r1
100051fc:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- USBO configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBO) ==
10005200:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005204:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005208:	681b      	ldr	r3, [r3, #0]
1000520a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000520e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
10005212:	65bb      	str	r3, [r7, #88]	; 0x58
10005214:	2300      	movs	r3, #0
10005216:	65fb      	str	r3, [r7, #92]	; 0x5c
10005218:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
1000521c:	460b      	mov	r3, r1
1000521e:	4313      	orrs	r3, r2
10005220:	d037      	beq.n	10005292 <HAL_RCCEx_PeriphCLKConfig+0x1566>
      RCC_PERIPHCLK_USBO)
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBOCLKSOURCE(PeriphClkInit->UsboClockSelection));

    if (PeriphClkInit->UsboClockSelection == RCC_USBOCLKSOURCE_PLL4)
10005222:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005226:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000522a:	681b      	ldr	r3, [r3, #0]
1000522c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10005230:	2b00      	cmp	r3, #0
10005232:	d11c      	bne.n	1000526e <HAL_RCCEx_PeriphCLKConfig+0x1542>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005234:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005238:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000523c:	681b      	ldr	r3, [r3, #0]
1000523e:	3380      	adds	r3, #128	; 0x80
10005240:	4618      	mov	r0, r3
10005242:	f7fe fc1b 	bl	10003a7c <RCCEx_PLL4_Config>
10005246:	4603      	mov	r3, r0
10005248:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
1000524c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005250:	2b00      	cmp	r3, #0
10005252:	d002      	beq.n	1000525a <HAL_RCCEx_PeriphCLKConfig+0x152e>
      {
        return status;
10005254:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005258:	e3f2      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable USB OTG Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000525a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000525e:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000526a:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_USBO_CONFIG(PeriphClkInit->UsboClockSelection);
1000526e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005272:	f8d3 391c 	ldr.w	r3, [r3, #2332]	; 0x91c
10005276:	f023 0110 	bic.w	r1, r3, #16
1000527a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000527e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005282:	681b      	ldr	r3, [r3, #0]
10005284:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
10005288:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000528c:	430b      	orrs	r3, r1
1000528e:	f8c2 391c 	str.w	r3, [r2, #2332]	; 0x91c
  }

  /*---------------------------- RNG1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG1) ==
10005292:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005296:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000529a:	681b      	ldr	r3, [r3, #0]
1000529c:	e9d3 2300 	ldrd	r2, r3, [r3]
100052a0:	2100      	movs	r1, #0
100052a2:	6539      	str	r1, [r7, #80]	; 0x50
100052a4:	f003 0304 	and.w	r3, r3, #4
100052a8:	657b      	str	r3, [r7, #84]	; 0x54
100052aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
100052ae:	460b      	mov	r3, r1
100052b0:	4313      	orrs	r3, r2
100052b2:	d037      	beq.n	10005324 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
      RCC_PERIPHCLK_RNG1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG1CLKSOURCE(PeriphClkInit->Rng1ClockSelection));

    if (PeriphClkInit->Rng1ClockSelection == RCC_RNG1CLKSOURCE_PLL4)
100052b4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100052b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100052bc:	681b      	ldr	r3, [r3, #0]
100052be:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
100052c2:	2b01      	cmp	r3, #1
100052c4:	d11c      	bne.n	10005300 <HAL_RCCEx_PeriphCLKConfig+0x15d4>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100052c6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100052ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100052ce:	681b      	ldr	r3, [r3, #0]
100052d0:	3380      	adds	r3, #128	; 0x80
100052d2:	4618      	mov	r0, r3
100052d4:	f7fe fbd2 	bl	10003a7c <RCCEx_PLL4_Config>
100052d8:	4603      	mov	r3, r0
100052da:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
100052de:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100052e2:	2b00      	cmp	r3, #0
100052e4:	d002      	beq.n	100052ec <HAL_RCCEx_PeriphCLKConfig+0x15c0>
      {
        return status;
100052e6:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100052ea:	e3a9      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG1 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100052ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100052f0:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100052f4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100052f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100052fc:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG1 clock*/
    __HAL_RCC_RNG1_CONFIG(PeriphClkInit->Rng1ClockSelection);
10005300:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005304:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
10005308:	f023 0103 	bic.w	r1, r3, #3
1000530c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005310:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005314:	681b      	ldr	r3, [r3, #0]
10005316:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
1000531a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000531e:	430b      	orrs	r3, r1
10005320:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
  }

  /*---------------------------- RNG2 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG2) ==
10005324:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005328:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000532c:	681b      	ldr	r3, [r3, #0]
1000532e:	e9d3 2300 	ldrd	r2, r3, [r3]
10005332:	2100      	movs	r1, #0
10005334:	64b9      	str	r1, [r7, #72]	; 0x48
10005336:	f003 0308 	and.w	r3, r3, #8
1000533a:	64fb      	str	r3, [r7, #76]	; 0x4c
1000533c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
10005340:	460b      	mov	r3, r1
10005342:	4313      	orrs	r3, r2
10005344:	d037      	beq.n	100053b6 <HAL_RCCEx_PeriphCLKConfig+0x168a>
      RCC_PERIPHCLK_RNG2)
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNG2CLKSOURCE(PeriphClkInit->Rng2ClockSelection));

    if (PeriphClkInit->Rng2ClockSelection == RCC_RNG2CLKSOURCE_PLL4)
10005346:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000534a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000534e:	681b      	ldr	r3, [r3, #0]
10005350:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
10005354:	2b01      	cmp	r3, #1
10005356:	d11c      	bne.n	10005392 <HAL_RCCEx_PeriphCLKConfig+0x1666>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005358:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000535c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005360:	681b      	ldr	r3, [r3, #0]
10005362:	3380      	adds	r3, #128	; 0x80
10005364:	4618      	mov	r0, r3
10005366:	f7fe fb89 	bl	10003a7c <RCCEx_PLL4_Config>
1000536a:	4603      	mov	r3, r0
1000536c:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005370:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005374:	2b00      	cmp	r3, #0
10005376:	d002      	beq.n	1000537e <HAL_RCCEx_PeriphCLKConfig+0x1652>
      {
        return status;
10005378:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000537c:	e360      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable RNG2 Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
1000537e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005382:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005386:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000538a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000538e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of RNG2 clock*/
    __HAL_RCC_RNG2_CONFIG(PeriphClkInit->Rng2ClockSelection);
10005392:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005396:	f8d3 3920 	ldr.w	r3, [r3, #2336]	; 0x920
1000539a:	f023 0103 	bic.w	r1, r3, #3
1000539e:	f507 7312 	add.w	r3, r7, #584	; 0x248
100053a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100053a6:	681b      	ldr	r3, [r3, #0]
100053a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
100053ac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100053b0:	430b      	orrs	r3, r1
100053b2:	f8c2 3920 	str.w	r3, [r2, #2336]	; 0x920
  }

  /*---------------------------- STGEN configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_STGEN) ==
100053b6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100053ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100053be:	681b      	ldr	r3, [r3, #0]
100053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
100053c4:	2100      	movs	r1, #0
100053c6:	6439      	str	r1, [r7, #64]	; 0x40
100053c8:	f003 0310 	and.w	r3, r3, #16
100053cc:	647b      	str	r3, [r7, #68]	; 0x44
100053ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
100053d2:	460b      	mov	r3, r1
100053d4:	4313      	orrs	r3, r2
100053d6:	d011      	beq.n	100053fc <HAL_RCCEx_PeriphCLKConfig+0x16d0>
      RCC_PERIPHCLK_STGEN)
  {
    /* Check the parameters */
    assert_param(IS_RCC_STGENCLKSOURCE(PeriphClkInit->StgenClockSelection));

    __HAL_RCC_STGEN_CONFIG(PeriphClkInit->StgenClockSelection);
100053d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100053dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
100053e0:	f023 0103 	bic.w	r1, r3, #3
100053e4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100053e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100053ec:	681b      	ldr	r3, [r3, #0]
100053ee:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
100053f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100053f6:	430b      	orrs	r3, r1
100053f8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  }

#if defined(DSI)
  /*---------------------------- DSI configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) ==
100053fc:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005400:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005404:	681b      	ldr	r3, [r3, #0]
10005406:	e9d3 2300 	ldrd	r2, r3, [r3]
1000540a:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
1000540e:	63bb      	str	r3, [r7, #56]	; 0x38
10005410:	2300      	movs	r3, #0
10005412:	63fb      	str	r3, [r7, #60]	; 0x3c
10005414:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
10005418:	460b      	mov	r3, r1
1000541a:	4313      	orrs	r3, r2
1000541c:	d037      	beq.n	1000548e <HAL_RCCEx_PeriphCLKConfig+0x1762>
      RCC_PERIPHCLK_DSI)
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    if (PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLL4)
1000541e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005426:	681b      	ldr	r3, [r3, #0]
10005428:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
1000542c:	2b01      	cmp	r3, #1
1000542e:	d11c      	bne.n	1000546a <HAL_RCCEx_PeriphCLKConfig+0x173e>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
10005430:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005434:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005438:	681b      	ldr	r3, [r3, #0]
1000543a:	3380      	adds	r3, #128	; 0x80
1000543c:	4618      	mov	r0, r3
1000543e:	f7fe fb1d 	bl	10003a7c <RCCEx_PLL4_Config>
10005442:	4603      	mov	r3, r0
10005444:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005448:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000544c:	2b00      	cmp	r3, #0
1000544e:	d002      	beq.n	10005456 <HAL_RCCEx_PeriphCLKConfig+0x172a>
      {
        return status;
10005450:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005454:	e2f4      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable DSI Clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005456:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000545a:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000545e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005462:	f043 0310 	orr.w	r3, r3, #16
10005466:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
1000546a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000546e:	f8d3 3924 	ldr.w	r3, [r3, #2340]	; 0x924
10005472:	f023 0101 	bic.w	r1, r3, #1
10005476:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000547a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000547e:	681b      	ldr	r3, [r3, #0]
10005480:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
10005484:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005488:	430b      	orrs	r3, r1
1000548a:	f8c2 3924 	str.w	r3, [r2, #2340]	; 0x924
  }
#endif /*DSI*/

  /*---------------------------- ADC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) ==
1000548e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005492:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005496:	681b      	ldr	r3, [r3, #0]
10005498:	e9d3 2300 	ldrd	r2, r3, [r3]
1000549c:	f002 0308 	and.w	r3, r2, #8
100054a0:	633b      	str	r3, [r7, #48]	; 0x30
100054a2:	2300      	movs	r3, #0
100054a4:	637b      	str	r3, [r7, #52]	; 0x34
100054a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
100054aa:	460b      	mov	r3, r1
100054ac:	4313      	orrs	r3, r2
100054ae:	d059      	beq.n	10005564 <HAL_RCCEx_PeriphCLKConfig+0x1838>
      RCC_PERIPHCLK_ADC)
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    switch (PeriphClkInit->AdcClockSelection)
100054b0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100054b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100054b8:	681b      	ldr	r3, [r3, #0]
100054ba:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
100054be:	2b00      	cmp	r3, #0
100054c0:	d002      	beq.n	100054c8 <HAL_RCCEx_PeriphCLKConfig+0x179c>
100054c2:	2b02      	cmp	r3, #2
100054c4:	d01e      	beq.n	10005504 <HAL_RCCEx_PeriphCLKConfig+0x17d8>
100054c6:	e03b      	b.n	10005540 <HAL_RCCEx_PeriphCLKConfig+0x1814>
    {
      case RCC_ADCCLKSOURCE_PLL4: /* PLL4 is used as clock source for ADC */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100054c8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100054cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100054d0:	681b      	ldr	r3, [r3, #0]
100054d2:	3380      	adds	r3, #128	; 0x80
100054d4:	4618      	mov	r0, r3
100054d6:	f7fe fad1 	bl	10003a7c <RCCEx_PLL4_Config>
100054da:	4603      	mov	r3, r0
100054dc:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100054e0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100054e4:	2b00      	cmp	r3, #0
100054e6:	d002      	beq.n	100054ee <HAL_RCCEx_PeriphCLKConfig+0x17c2>
        {
          return status;
100054e8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100054ec:	e2a8      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL4 */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVR);
100054ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100054f2:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
100054f6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100054fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
100054fe:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
        break;
10005502:	e01d      	b.n	10005540 <HAL_RCCEx_PeriphCLKConfig+0x1814>

      case RCC_ADCCLKSOURCE_PLL3: /* PLL3 is used as clock source for ADC */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005504:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000550c:	681b      	ldr	r3, [r3, #0]
1000550e:	3344      	adds	r3, #68	; 0x44
10005510:	4618      	mov	r0, r3
10005512:	f7fe f949 	bl	100037a8 <RCCEx_PLL3_Config>
10005516:	4603      	mov	r3, r0
10005518:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000551c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005520:	2b00      	cmp	r3, #0
10005522:	d002      	beq.n	1000552a <HAL_RCCEx_PeriphCLKConfig+0x17fe>
        {
          return status;
10005524:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005528:	e28a      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable ADC Clock output generated on PLL3 */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
1000552a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000552e:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005532:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005536:	f043 0320 	orr.w	r3, r3, #32
1000553a:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000553e:	bf00      	nop
    }

    /* Set the source of ADC clock*/
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
10005540:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005544:	f8d3 3928 	ldr.w	r3, [r3, #2344]	; 0x928
10005548:	f023 0103 	bic.w	r1, r3, #3
1000554c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005554:	681b      	ldr	r3, [r3, #0]
10005556:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
1000555a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000555e:	430b      	orrs	r3, r1
10005560:	f8c2 3928 	str.w	r3, [r2, #2344]	; 0x928
  }

  /*---------------------------- LPTIM45 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM45) ==
10005564:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000556c:	681b      	ldr	r3, [r3, #0]
1000556e:	e9d3 2300 	ldrd	r2, r3, [r3]
10005572:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
10005576:	62bb      	str	r3, [r7, #40]	; 0x28
10005578:	2300      	movs	r3, #0
1000557a:	62fb      	str	r3, [r7, #44]	; 0x2c
1000557c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
10005580:	460b      	mov	r3, r1
10005582:	4313      	orrs	r3, r2
10005584:	d058      	beq.n	10005638 <HAL_RCCEx_PeriphCLKConfig+0x190c>
      RCC_PERIPHCLK_LPTIM45)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM45CLKSOURCE(PeriphClkInit->Lptim45ClockSelection));

    switch (PeriphClkInit->Lptim45ClockSelection)
10005586:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000558a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000558e:	681b      	ldr	r3, [r3, #0]
10005590:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10005594:	2b01      	cmp	r3, #1
10005596:	d01f      	beq.n	100055d8 <HAL_RCCEx_PeriphCLKConfig+0x18ac>
10005598:	2b02      	cmp	r3, #2
1000559a:	d13b      	bne.n	10005614 <HAL_RCCEx_PeriphCLKConfig+0x18e8>
    {
      case RCC_LPTIM45CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPTIM45 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
1000559c:	f507 7312 	add.w	r3, r7, #584	; 0x248
100055a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100055a4:	681b      	ldr	r3, [r3, #0]
100055a6:	3344      	adds	r3, #68	; 0x44
100055a8:	4618      	mov	r0, r3
100055aa:	f7fe f8fd 	bl	100037a8 <RCCEx_PLL3_Config>
100055ae:	4603      	mov	r3, r0
100055b0:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100055b4:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100055b8:	2b00      	cmp	r3, #0
100055ba:	d002      	beq.n	100055c2 <HAL_RCCEx_PeriphCLKConfig+0x1896>
        {
          return status;
100055bc:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100055c0:	e23e      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
100055c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100055c6:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
100055ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
100055ce:	f043 0320 	orr.w	r3, r3, #32
100055d2:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
100055d6:	e01d      	b.n	10005614 <HAL_RCCEx_PeriphCLKConfig+0x18e8>

      case RCC_LPTIM45CLKSOURCE_PLL4: /* PLL4 is used as clock source for LPTIM45 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
100055d8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100055dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100055e0:	681b      	ldr	r3, [r3, #0]
100055e2:	3380      	adds	r3, #128	; 0x80
100055e4:	4618      	mov	r0, r3
100055e6:	f7fe fa49 	bl	10003a7c <RCCEx_PLL4_Config>
100055ea:	4603      	mov	r3, r0
100055ec:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
100055f0:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100055f4:	2b00      	cmp	r3, #0
100055f6:	d002      	beq.n	100055fe <HAL_RCCEx_PeriphCLKConfig+0x18d2>
        {
          return status;
100055f8:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
100055fc:	e220      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
100055fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005602:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
10005606:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000560a:	f043 0310 	orr.w	r3, r3, #16
1000560e:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005612:	bf00      	nop
    }

    /* Set the source of LPTIM45 clock*/
    __HAL_RCC_LPTIM45_CONFIG(PeriphClkInit->Lptim45ClockSelection);
10005614:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005618:	f8d3 392c 	ldr.w	r3, [r3, #2348]	; 0x92c
1000561c:	f023 0207 	bic.w	r2, r3, #7
10005620:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005624:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005628:	681b      	ldr	r3, [r3, #0]
1000562a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000562e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005632:	4313      	orrs	r3, r2
10005634:	f8c1 392c 	str.w	r3, [r1, #2348]	; 0x92c
  }

  /*---------------------------- LPTIM23 configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM23) ==
10005638:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000563c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005640:	681b      	ldr	r3, [r3, #0]
10005642:	e9d3 2300 	ldrd	r2, r3, [r3]
10005646:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
1000564a:	623b      	str	r3, [r7, #32]
1000564c:	2300      	movs	r3, #0
1000564e:	627b      	str	r3, [r7, #36]	; 0x24
10005650:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
10005654:	460b      	mov	r3, r1
10005656:	4313      	orrs	r3, r2
10005658:	d037      	beq.n	100056ca <HAL_RCCEx_PeriphCLKConfig+0x199e>
      RCC_PERIPHCLK_LPTIM23)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM23CLKSOURCE(PeriphClkInit->Lptim23ClockSelection));

    if (PeriphClkInit->Lptim23ClockSelection == RCC_LPTIM23CLKSOURCE_PLL4)
1000565a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000565e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005662:	681b      	ldr	r3, [r3, #0]
10005664:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
10005668:	2b01      	cmp	r3, #1
1000566a:	d11c      	bne.n	100056a6 <HAL_RCCEx_PeriphCLKConfig+0x197a>
    {
      status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000566c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005670:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005674:	681b      	ldr	r3, [r3, #0]
10005676:	3380      	adds	r3, #128	; 0x80
10005678:	4618      	mov	r0, r3
1000567a:	f7fe f9ff 	bl	10003a7c <RCCEx_PLL4_Config>
1000567e:	4603      	mov	r3, r0
10005680:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
      if (status != HAL_OK)
10005684:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005688:	2b00      	cmp	r3, #0
1000568a:	d002      	beq.n	10005692 <HAL_RCCEx_PeriphCLKConfig+0x1966>
      {
        return status;
1000568c:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005690:	e1d6      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
      }
      /* Enable clock output generated on PLL4 . */
      __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVQ);
10005692:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005696:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000569a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000569e:	f043 0320 	orr.w	r3, r3, #32
100056a2:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894
    }

    /* Set the source of LPTIM23 clock*/
    __HAL_RCC_LPTIM23_CONFIG(PeriphClkInit->Lptim23ClockSelection);
100056a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100056aa:	f8d3 3930 	ldr.w	r3, [r3, #2352]	; 0x930
100056ae:	f023 0207 	bic.w	r2, r3, #7
100056b2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100056b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100056ba:	681b      	ldr	r3, [r3, #0]
100056bc:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
100056c0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
100056c4:	4313      	orrs	r3, r2
100056c6:	f8c1 3930 	str.w	r3, [r1, #2352]	; 0x930
  }

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) ==
100056ca:	f507 7312 	add.w	r3, r7, #584	; 0x248
100056ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100056d2:	681b      	ldr	r3, [r3, #0]
100056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
100056d8:	f002 0340 	and.w	r3, r2, #64	; 0x40
100056dc:	61bb      	str	r3, [r7, #24]
100056de:	2300      	movs	r3, #0
100056e0:	61fb      	str	r3, [r7, #28]
100056e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
100056e6:	460b      	mov	r3, r1
100056e8:	4313      	orrs	r3, r2
100056ea:	d058      	beq.n	1000579e <HAL_RCCEx_PeriphCLKConfig+0x1a72>
      RCC_PERIPHCLK_LPTIM1)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    switch (PeriphClkInit->Lptim1ClockSelection)
100056ec:	f507 7312 	add.w	r3, r7, #584	; 0x248
100056f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100056f4:	681b      	ldr	r3, [r3, #0]
100056f6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
100056fa:	2b01      	cmp	r3, #1
100056fc:	d01f      	beq.n	1000573e <HAL_RCCEx_PeriphCLKConfig+0x1a12>
100056fe:	2b02      	cmp	r3, #2
10005700:	d13b      	bne.n	1000577a <HAL_RCCEx_PeriphCLKConfig+0x1a4e>
    {
      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1 */

        status = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3));
10005702:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005706:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000570a:	681b      	ldr	r3, [r3, #0]
1000570c:	3344      	adds	r3, #68	; 0x44
1000570e:	4618      	mov	r0, r3
10005710:	f7fe f84a 	bl	100037a8 <RCCEx_PLL3_Config>
10005714:	4603      	mov	r3, r0
10005716:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
1000571a:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000571e:	2b00      	cmp	r3, #0
10005720:	d002      	beq.n	10005728 <HAL_RCCEx_PeriphCLKConfig+0x19fc>
        {
          return status;
10005722:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005726:	e18b      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL3 . */
        __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
10005728:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000572c:	f8d3 3880 	ldr.w	r3, [r3, #2176]	; 0x880
10005730:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005734:	f043 0320 	orr.w	r3, r3, #32
10005738:	f8c2 3880 	str.w	r3, [r2, #2176]	; 0x880

        break;
1000573c:	e01d      	b.n	1000577a <HAL_RCCEx_PeriphCLKConfig+0x1a4e>

      case RCC_LPTIM1CLKSOURCE_PLL4:  /* PLL4 is used as clock source for LPTIM1 */

        status = RCCEx_PLL4_Config(&(PeriphClkInit->PLL4));
1000573e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005742:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005746:	681b      	ldr	r3, [r3, #0]
10005748:	3380      	adds	r3, #128	; 0x80
1000574a:	4618      	mov	r0, r3
1000574c:	f7fe f996 	bl	10003a7c <RCCEx_PLL4_Config>
10005750:	4603      	mov	r3, r0
10005752:	f887 323b 	strb.w	r3, [r7, #571]	; 0x23b
        if (status != HAL_OK)
10005756:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
1000575a:	2b00      	cmp	r3, #0
1000575c:	d002      	beq.n	10005764 <HAL_RCCEx_PeriphCLKConfig+0x1a38>
        {
          return status;
1000575e:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
10005762:	e16d      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }
        /* Enable clock output generated on PLL4 . */
        __HAL_RCC_PLL4CLKOUT_ENABLE(RCC_PLL4_DIVP);
10005764:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005768:	f8d3 3894 	ldr.w	r3, [r3, #2196]	; 0x894
1000576c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005770:	f043 0310 	orr.w	r3, r3, #16
10005774:	f8c2 3894 	str.w	r3, [r2, #2196]	; 0x894

        break;
10005778:	bf00      	nop
    }

    /* Set the source of LPTIM1 clock*/
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
1000577a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000577e:	f8d3 3934 	ldr.w	r3, [r3, #2356]	; 0x934
10005782:	f023 0207 	bic.w	r2, r3, #7
10005786:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000578a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
1000578e:	681b      	ldr	r3, [r3, #0]
10005790:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
10005794:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005798:	4313      	orrs	r3, r2
1000579a:	f8c1 3934 	str.w	r3, [r1, #2356]	; 0x934
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) ==
1000579e:	f507 7312 	add.w	r3, r7, #584	; 0x248
100057a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100057a6:	681b      	ldr	r3, [r3, #0]
100057a8:	e9d3 2300 	ldrd	r2, r3, [r3]
100057ac:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
100057b0:	613b      	str	r3, [r7, #16]
100057b2:	2300      	movs	r3, #0
100057b4:	617b      	str	r3, [r7, #20]
100057b6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
100057ba:	460b      	mov	r3, r1
100057bc:	4313      	orrs	r3, r2
100057be:	f000 80c6 	beq.w	1000594e <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
100057c2:	4ba2      	ldr	r3, [pc, #648]	; (10005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100057c4:	681b      	ldr	r3, [r3, #0]
100057c6:	4aa1      	ldr	r2, [pc, #644]	; (10005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100057c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
100057cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
100057ce:	f7fb fe97 	bl	10001500 <HAL_GetTick>
100057d2:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100057d6:	e00a      	b.n	100057ee <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
    {
      if ((HAL_GetTick() - tickstart) > DBP_TIMEOUT_VALUE)
100057d8:	f7fb fe92 	bl	10001500 <HAL_GetTick>
100057dc:	4602      	mov	r2, r0
100057de:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
100057e2:	1ad3      	subs	r3, r2, r3
100057e4:	2b64      	cmp	r3, #100	; 0x64
100057e6:	d902      	bls.n	100057ee <HAL_RCCEx_PeriphCLKConfig+0x1ac2>
      {
        ret = HAL_TIMEOUT;
100057e8:	2303      	movs	r3, #3
100057ea:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
    while ((PWR->CR1 & PWR_CR1_DBP) == RESET)
100057ee:	4b97      	ldr	r3, [pc, #604]	; (10005a4c <HAL_RCCEx_PeriphCLKConfig+0x1d20>)
100057f0:	681b      	ldr	r3, [r3, #0]
100057f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
100057f6:	2b00      	cmp	r3, #0
100057f8:	d0ee      	beq.n	100057d8 <HAL_RCCEx_PeriphCLKConfig+0x1aac>
      }
    }

    if (ret == HAL_OK)
100057fa:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100057fe:	2b00      	cmp	r3, #0
10005800:	f040 80a2 	bne.w	10005948 <HAL_RCCEx_PeriphCLKConfig+0x1c1c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSRC) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSRC))
10005804:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005808:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
1000580c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005814:	681b      	ldr	r3, [r3, #0]
10005816:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
1000581a:	4053      	eors	r3, r2
1000581c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
10005820:	2b00      	cmp	r3, #0
10005822:	f000 8086 	beq.w	10005932 <HAL_RCCEx_PeriphCLKConfig+0x1c06>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSRC));
10005826:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000582a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000582e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
10005832:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
10005836:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000583a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000583e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005842:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
10005846:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        __HAL_RCC_BACKUPRESET_RELEASE();
1000584a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000584e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10005852:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
10005856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
1000585a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

        /* Set the LSEDrive value */
        __HAL_RCC_LSEDRIVE_CONFIG(tmpreg & RCC_BDCR_LSEDRV);
1000585e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005862:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
10005866:	f023 0230 	bic.w	r2, r3, #48	; 0x30
1000586a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
1000586e:	f003 0330 	and.w	r3, r3, #48	; 0x30
10005872:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005876:	4313      	orrs	r3, r2
10005878:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* RCC_BDCR_LSEON can be enabled for RTC or another IP, re-enable it */
        RCC_OscInitTypeDef RCC_OscInitStructure;
        /* Configure LSE Oscillator*/
        RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_LSE;
1000587c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005880:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10005884:	2204      	movs	r2, #4
10005886:	601a      	str	r2, [r3, #0]
        RCC_OscInitStructure.LSEState = (tmpreg & LSE_MASK);
10005888:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
1000588c:	f003 020b 	and.w	r2, r3, #11
10005890:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005894:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
10005898:	609a      	str	r2, [r3, #8]

        RCC_OscInitStructure.PLL.PLLState = RCC_PLL_NONE;
1000589a:	f507 7312 	add.w	r3, r7, #584	; 0x248
1000589e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
100058a2:	2200      	movs	r2, #0
100058a4:	625a      	str	r2, [r3, #36]	; 0x24
        RCC_OscInitStructure.PLL2.PLLState = RCC_PLL_NONE;
100058a6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100058aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
100058ae:	2200      	movs	r2, #0
100058b0:	661a      	str	r2, [r3, #96]	; 0x60
        RCC_OscInitStructure.PLL3.PLLState = RCC_PLL_NONE;
100058b2:	f507 7312 	add.w	r3, r7, #584	; 0x248
100058b6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
100058ba:	2200      	movs	r2, #0
100058bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        RCC_OscInitStructure.PLL4.PLLState = RCC_PLL_NONE;
100058c0:	f507 7312 	add.w	r3, r7, #584	; 0x248
100058c4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
100058c8:	2200      	movs	r2, #0
100058ca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
        ret = HAL_RCC_OscConfig(&RCC_OscInitStructure);
100058ce:	f507 7390 	add.w	r3, r7, #288	; 0x120
100058d2:	4618      	mov	r0, r3
100058d4:	f7fc f96e 	bl	10001bb4 <HAL_RCC_OscConfig>
100058d8:	4603      	mov	r3, r0
100058da:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
        if (ret != HAL_OK)
100058de:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100058e2:	2b00      	cmp	r3, #0
100058e4:	d002      	beq.n	100058ec <HAL_RCCEx_PeriphCLKConfig+0x1bc0>
        {
          return ret;
100058e6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
100058ea:	e0a9      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
        }

        /* Write the RTCSRC */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
100058ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100058f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
100058f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
100058f8:	f507 7312 	add.w	r3, r7, #584	; 0x248
100058fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005900:	681b      	ldr	r3, [r3, #0]
10005902:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
10005906:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000590a:	4313      	orrs	r3, r2
1000590c:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

        /* Fill up Reserved register mask for BDCR
         * All already filled up or what shouldn't be modified must be put on the mask */
        RESERVED_BDCR_MASK = ~(RCC_BDCR_VSWRST | RCC_BDCR_RTCCKEN | RCC_BDCR_RTCSRC |
10005910:	4b4f      	ldr	r3, [pc, #316]	; (10005a50 <HAL_RCCEx_PeriphCLKConfig+0x1d24>)
10005912:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
                               RCC_BDCR_LSECSSD | RCC_BDCR_LSEDRV | RCC_BDCR_DIGBYP |
                               RCC_BDCR_LSERDY | RCC_BDCR_LSEBYP | RCC_BDCR_LSEON);

        /* Restore the BDCR context: RESERVED registers plus RCC_BDCR_LSECSSON */
        WRITE_REG(RCC->BDCR, (READ_REG(RCC->BDCR) | (tmpreg & RESERVED_BDCR_MASK)));
10005916:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
1000591a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
1000591e:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
10005922:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
10005926:	400b      	ands	r3, r1
10005928:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000592c:	4313      	orrs	r3, r2
1000592e:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140

      }/* End RTCSRC changed */

      /*Enable RTC clock   */
      __HAL_RCC_RTC_ENABLE();
10005932:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005936:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
1000593a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
1000593e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
10005942:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
10005946:	e002      	b.n	1000594e <HAL_RCCEx_PeriphCLKConfig+0x1c22>
    }
    else
    {
      // Enable write access to Backup domain failed
      /* return the error */
      return ret;
10005948:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
1000594c:	e078      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    }
  }

  /*---------------------------- TIMG1 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG1) ==
1000594e:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005956:	681b      	ldr	r3, [r3, #0]
10005958:	e9d3 2300 	ldrd	r2, r3, [r3]
1000595c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
10005960:	60bb      	str	r3, [r7, #8]
10005962:	2300      	movs	r3, #0
10005964:	60fb      	str	r3, [r7, #12]
10005966:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
1000596a:	460b      	mov	r3, r1
1000596c:	4313      	orrs	r3, r2
1000596e:	d02a      	beq.n	100059c6 <HAL_RCCEx_PeriphCLKConfig+0x1c9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG1PRES(PeriphClkInit->TIMG1PresSelection);
10005970:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005974:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
10005978:	f023 0201 	bic.w	r2, r3, #1
1000597c:	f507 7312 	add.w	r3, r7, #584	; 0x248
10005980:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
10005984:	681b      	ldr	r3, [r3, #0]
10005986:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
1000598a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
1000598e:	4313      	orrs	r3, r2
10005990:	f8c1 3828 	str.w	r3, [r1, #2088]	; 0x828

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10005994:	f7fb fdb4 	bl	10001500 <HAL_GetTick>
10005998:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
1000599c:	e00a      	b.n	100059b4 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
1000599e:	f7fb fdaf 	bl	10001500 <HAL_GetTick>
100059a2:	4602      	mov	r2, r0
100059a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
100059a8:	1ad3      	subs	r3, r2, r3
100059aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
100059ae:	d901      	bls.n	100059b4 <HAL_RCCEx_PeriphCLKConfig+0x1c88>
      {
        return HAL_TIMEOUT;
100059b0:	2303      	movs	r3, #3
100059b2:	e045      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG1PRERDY) == RESET)
100059b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059b8:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
100059bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
100059c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
100059c4:	d1eb      	bne.n	1000599e <HAL_RCCEx_PeriphCLKConfig+0x1c72>
      }
    }
  }

  /*---------------------------- TIMG2 configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIMG2) ==
100059c6:	f507 7312 	add.w	r3, r7, #584	; 0x248
100059ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100059ce:	681b      	ldr	r3, [r3, #0]
100059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
100059d4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
100059d8:	603b      	str	r3, [r7, #0]
100059da:	2300      	movs	r3, #0
100059dc:	607b      	str	r3, [r7, #4]
100059de:	e9d7 1200 	ldrd	r1, r2, [r7]
100059e2:	460b      	mov	r3, r1
100059e4:	4313      	orrs	r3, r2
100059e6:	d02a      	beq.n	10005a3e <HAL_RCCEx_PeriphCLKConfig+0x1d12>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection));

    /* Set TIMG1 division factor */
    __HAL_RCC_TIMG2PRES(PeriphClkInit->TIMG2PresSelection);
100059e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100059ec:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
100059f0:	f023 0201 	bic.w	r2, r3, #1
100059f4:	f507 7312 	add.w	r3, r7, #584	; 0x248
100059f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
100059fc:	681b      	ldr	r3, [r3, #0]
100059fe:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
10005a02:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
10005a06:	4313      	orrs	r3, r2
10005a08:	f8c1 382c 	str.w	r3, [r1, #2092]	; 0x82c

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
10005a0c:	f7fb fd78 	bl	10001500 <HAL_GetTick>
10005a10:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234

    /* Wait till TIMG1 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10005a14:	e00a      	b.n	10005a2c <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
10005a16:	f7fb fd73 	bl	10001500 <HAL_GetTick>
10005a1a:	4602      	mov	r2, r0
10005a1c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
10005a20:	1ad3      	subs	r3, r2, r3
10005a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
10005a26:	d901      	bls.n	10005a2c <HAL_RCCEx_PeriphCLKConfig+0x1d00>
      {
        return HAL_TIMEOUT;
10005a28:	2303      	movs	r3, #3
10005a2a:	e009      	b.n	10005a40 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_TIMG2PRERDY) == RESET)
10005a2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005a30:	f8d3 382c 	ldr.w	r3, [r3, #2092]	; 0x82c
10005a34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
10005a38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
10005a3c:	d1eb      	bne.n	10005a16 <HAL_RCCEx_PeriphCLKConfig+0x1cea>
      }
    }
  }

  return HAL_OK;
10005a3e:	2300      	movs	r3, #0
}
10005a40:	4618      	mov	r0, r3
10005a42:	f507 7712 	add.w	r7, r7, #584	; 0x248
10005a46:	46bd      	mov	sp, r7
10005a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
10005a4c:	50001000 	.word	0x50001000
10005a50:	7fecfdc0 	.word	0x7fecfdc0

10005a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
10005a54:	b580      	push	{r7, lr}
10005a56:	b082      	sub	sp, #8
10005a58:	af00      	add	r7, sp, #0
10005a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
10005a5c:	687b      	ldr	r3, [r7, #4]
10005a5e:	2b00      	cmp	r3, #0
10005a60:	d101      	bne.n	10005a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
10005a62:	2301      	movs	r3, #1
10005a64:	e042      	b.n	10005aec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
10005a66:	687b      	ldr	r3, [r7, #4]
10005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10005a6c:	2b00      	cmp	r3, #0
10005a6e:	d106      	bne.n	10005a7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
10005a70:	687b      	ldr	r3, [r7, #4]
10005a72:	2200      	movs	r2, #0
10005a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
10005a78:	6878      	ldr	r0, [r7, #4]
10005a7a:	f7fb fbd3 	bl	10001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
10005a7e:	687b      	ldr	r3, [r7, #4]
10005a80:	2224      	movs	r2, #36	; 0x24
10005a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
10005a86:	687b      	ldr	r3, [r7, #4]
10005a88:	681b      	ldr	r3, [r3, #0]
10005a8a:	681a      	ldr	r2, [r3, #0]
10005a8c:	687b      	ldr	r3, [r7, #4]
10005a8e:	681b      	ldr	r3, [r3, #0]
10005a90:	f022 0201 	bic.w	r2, r2, #1
10005a94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
10005a96:	6878      	ldr	r0, [r7, #4]
10005a98:	f000 f8c4 	bl	10005c24 <UART_SetConfig>
10005a9c:	4603      	mov	r3, r0
10005a9e:	2b01      	cmp	r3, #1
10005aa0:	d101      	bne.n	10005aa6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
10005aa2:	2301      	movs	r3, #1
10005aa4:	e022      	b.n	10005aec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
10005aa6:	687b      	ldr	r3, [r7, #4]
10005aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10005aaa:	2b00      	cmp	r3, #0
10005aac:	d002      	beq.n	10005ab4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
10005aae:	6878      	ldr	r0, [r7, #4]
10005ab0:	f001 f95e 	bl	10006d70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
10005ab4:	687b      	ldr	r3, [r7, #4]
10005ab6:	681b      	ldr	r3, [r3, #0]
10005ab8:	685a      	ldr	r2, [r3, #4]
10005aba:	687b      	ldr	r3, [r7, #4]
10005abc:	681b      	ldr	r3, [r3, #0]
10005abe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
10005ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
10005ac4:	687b      	ldr	r3, [r7, #4]
10005ac6:	681b      	ldr	r3, [r3, #0]
10005ac8:	689a      	ldr	r2, [r3, #8]
10005aca:	687b      	ldr	r3, [r7, #4]
10005acc:	681b      	ldr	r3, [r3, #0]
10005ace:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
10005ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
10005ad4:	687b      	ldr	r3, [r7, #4]
10005ad6:	681b      	ldr	r3, [r3, #0]
10005ad8:	681a      	ldr	r2, [r3, #0]
10005ada:	687b      	ldr	r3, [r7, #4]
10005adc:	681b      	ldr	r3, [r3, #0]
10005ade:	f042 0201 	orr.w	r2, r2, #1
10005ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
10005ae4:	6878      	ldr	r0, [r7, #4]
10005ae6:	f001 f9e5 	bl	10006eb4 <UART_CheckIdleState>
10005aea:	4603      	mov	r3, r0
}
10005aec:	4618      	mov	r0, r3
10005aee:	3708      	adds	r7, #8
10005af0:	46bd      	mov	sp, r7
10005af2:	bd80      	pop	{r7, pc}

10005af4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
10005af4:	b580      	push	{r7, lr}
10005af6:	b08a      	sub	sp, #40	; 0x28
10005af8:	af02      	add	r7, sp, #8
10005afa:	60f8      	str	r0, [r7, #12]
10005afc:	60b9      	str	r1, [r7, #8]
10005afe:	603b      	str	r3, [r7, #0]
10005b00:	4613      	mov	r3, r2
10005b02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
10005b04:	68fb      	ldr	r3, [r7, #12]
10005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10005b0a:	2b20      	cmp	r3, #32
10005b0c:	f040 8084 	bne.w	10005c18 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
10005b10:	68bb      	ldr	r3, [r7, #8]
10005b12:	2b00      	cmp	r3, #0
10005b14:	d002      	beq.n	10005b1c <HAL_UART_Transmit+0x28>
10005b16:	88fb      	ldrh	r3, [r7, #6]
10005b18:	2b00      	cmp	r3, #0
10005b1a:	d101      	bne.n	10005b20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
10005b1c:	2301      	movs	r3, #1
10005b1e:	e07c      	b.n	10005c1a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
10005b20:	68fb      	ldr	r3, [r7, #12]
10005b22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10005b26:	2b01      	cmp	r3, #1
10005b28:	d101      	bne.n	10005b2e <HAL_UART_Transmit+0x3a>
10005b2a:	2302      	movs	r3, #2
10005b2c:	e075      	b.n	10005c1a <HAL_UART_Transmit+0x126>
10005b2e:	68fb      	ldr	r3, [r7, #12]
10005b30:	2201      	movs	r2, #1
10005b32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    huart->ErrorCode = HAL_UART_ERROR_NONE;
10005b36:	68fb      	ldr	r3, [r7, #12]
10005b38:	2200      	movs	r2, #0
10005b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
10005b3e:	68fb      	ldr	r3, [r7, #12]
10005b40:	2221      	movs	r2, #33	; 0x21
10005b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
10005b46:	f7fb fcdb 	bl	10001500 <HAL_GetTick>
10005b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
10005b4c:	68fb      	ldr	r3, [r7, #12]
10005b4e:	88fa      	ldrh	r2, [r7, #6]
10005b50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
10005b54:	68fb      	ldr	r3, [r7, #12]
10005b56:	88fa      	ldrh	r2, [r7, #6]
10005b58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
10005b5c:	68fb      	ldr	r3, [r7, #12]
10005b5e:	689b      	ldr	r3, [r3, #8]
10005b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
10005b64:	d108      	bne.n	10005b78 <HAL_UART_Transmit+0x84>
10005b66:	68fb      	ldr	r3, [r7, #12]
10005b68:	691b      	ldr	r3, [r3, #16]
10005b6a:	2b00      	cmp	r3, #0
10005b6c:	d104      	bne.n	10005b78 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
10005b6e:	2300      	movs	r3, #0
10005b70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
10005b72:	68bb      	ldr	r3, [r7, #8]
10005b74:	61bb      	str	r3, [r7, #24]
10005b76:	e003      	b.n	10005b80 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
10005b78:	68bb      	ldr	r3, [r7, #8]
10005b7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
10005b7c:	2300      	movs	r3, #0
10005b7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
10005b80:	68fb      	ldr	r3, [r7, #12]
10005b82:	2200      	movs	r2, #0
10005b84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    while (huart->TxXferCount > 0U)
10005b88:	e02d      	b.n	10005be6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
10005b8a:	683b      	ldr	r3, [r7, #0]
10005b8c:	9300      	str	r3, [sp, #0]
10005b8e:	697b      	ldr	r3, [r7, #20]
10005b90:	2200      	movs	r2, #0
10005b92:	2180      	movs	r1, #128	; 0x80
10005b94:	68f8      	ldr	r0, [r7, #12]
10005b96:	f001 f9d5 	bl	10006f44 <UART_WaitOnFlagUntilTimeout>
10005b9a:	4603      	mov	r3, r0
10005b9c:	2b00      	cmp	r3, #0
10005b9e:	d001      	beq.n	10005ba4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
10005ba0:	2303      	movs	r3, #3
10005ba2:	e03a      	b.n	10005c1a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
10005ba4:	69fb      	ldr	r3, [r7, #28]
10005ba6:	2b00      	cmp	r3, #0
10005ba8:	d10b      	bne.n	10005bc2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
10005baa:	69bb      	ldr	r3, [r7, #24]
10005bac:	881a      	ldrh	r2, [r3, #0]
10005bae:	68fb      	ldr	r3, [r7, #12]
10005bb0:	681b      	ldr	r3, [r3, #0]
10005bb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
10005bb6:	b292      	uxth	r2, r2
10005bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
10005bba:	69bb      	ldr	r3, [r7, #24]
10005bbc:	3302      	adds	r3, #2
10005bbe:	61bb      	str	r3, [r7, #24]
10005bc0:	e008      	b.n	10005bd4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
10005bc2:	69fb      	ldr	r3, [r7, #28]
10005bc4:	781a      	ldrb	r2, [r3, #0]
10005bc6:	68fb      	ldr	r3, [r7, #12]
10005bc8:	681b      	ldr	r3, [r3, #0]
10005bca:	b292      	uxth	r2, r2
10005bcc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
10005bce:	69fb      	ldr	r3, [r7, #28]
10005bd0:	3301      	adds	r3, #1
10005bd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
10005bd4:	68fb      	ldr	r3, [r7, #12]
10005bd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10005bda:	b29b      	uxth	r3, r3
10005bdc:	3b01      	subs	r3, #1
10005bde:	b29a      	uxth	r2, r3
10005be0:	68fb      	ldr	r3, [r7, #12]
10005be2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
10005be6:	68fb      	ldr	r3, [r7, #12]
10005be8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
10005bec:	b29b      	uxth	r3, r3
10005bee:	2b00      	cmp	r3, #0
10005bf0:	d1cb      	bne.n	10005b8a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
10005bf2:	683b      	ldr	r3, [r7, #0]
10005bf4:	9300      	str	r3, [sp, #0]
10005bf6:	697b      	ldr	r3, [r7, #20]
10005bf8:	2200      	movs	r2, #0
10005bfa:	2140      	movs	r1, #64	; 0x40
10005bfc:	68f8      	ldr	r0, [r7, #12]
10005bfe:	f001 f9a1 	bl	10006f44 <UART_WaitOnFlagUntilTimeout>
10005c02:	4603      	mov	r3, r0
10005c04:	2b00      	cmp	r3, #0
10005c06:	d001      	beq.n	10005c0c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
10005c08:	2303      	movs	r3, #3
10005c0a:	e006      	b.n	10005c1a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
10005c0c:	68fb      	ldr	r3, [r7, #12]
10005c0e:	2220      	movs	r2, #32
10005c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
10005c14:	2300      	movs	r3, #0
10005c16:	e000      	b.n	10005c1a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
10005c18:	2302      	movs	r3, #2
  }
}
10005c1a:	4618      	mov	r0, r3
10005c1c:	3720      	adds	r7, #32
10005c1e:	46bd      	mov	sp, r7
10005c20:	bd80      	pop	{r7, pc}
	...

10005c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
10005c24:	b580      	push	{r7, lr}
10005c26:	b08e      	sub	sp, #56	; 0x38
10005c28:	af00      	add	r7, sp, #0
10005c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
10005c2c:	2300      	movs	r3, #0
10005c2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_StatusTypeDef ret               = HAL_OK;
10005c30:	2300      	movs	r3, #0
10005c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
10005c36:	687b      	ldr	r3, [r7, #4]
10005c38:	689a      	ldr	r2, [r3, #8]
10005c3a:	687b      	ldr	r3, [r7, #4]
10005c3c:	691b      	ldr	r3, [r3, #16]
10005c3e:	431a      	orrs	r2, r3
10005c40:	687b      	ldr	r3, [r7, #4]
10005c42:	695b      	ldr	r3, [r3, #20]
10005c44:	431a      	orrs	r2, r3
10005c46:	687b      	ldr	r3, [r7, #4]
10005c48:	69db      	ldr	r3, [r3, #28]
10005c4a:	4313      	orrs	r3, r2
10005c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpreg |= (uint32_t)huart->FifoMode;
10005c4e:	687b      	ldr	r3, [r7, #4]
10005c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10005c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
10005c54:	4313      	orrs	r3, r2
10005c56:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
10005c58:	687b      	ldr	r3, [r7, #4]
10005c5a:	681b      	ldr	r3, [r3, #0]
10005c5c:	681a      	ldr	r2, [r3, #0]
10005c5e:	4bb1      	ldr	r3, [pc, #708]	; (10005f24 <UART_SetConfig+0x300>)
10005c60:	4013      	ands	r3, r2
10005c62:	687a      	ldr	r2, [r7, #4]
10005c64:	6812      	ldr	r2, [r2, #0]
10005c66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10005c68:	430b      	orrs	r3, r1
10005c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
10005c6c:	687b      	ldr	r3, [r7, #4]
10005c6e:	681b      	ldr	r3, [r3, #0]
10005c70:	685b      	ldr	r3, [r3, #4]
10005c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
10005c76:	687b      	ldr	r3, [r7, #4]
10005c78:	68da      	ldr	r2, [r3, #12]
10005c7a:	687b      	ldr	r3, [r7, #4]
10005c7c:	681b      	ldr	r3, [r3, #0]
10005c7e:	430a      	orrs	r2, r1
10005c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
10005c82:	687b      	ldr	r3, [r7, #4]
10005c84:	699b      	ldr	r3, [r3, #24]
10005c86:	62bb      	str	r3, [r7, #40]	; 0x28

  tmpreg |= huart->Init.OneBitSampling;
10005c88:	687b      	ldr	r3, [r7, #4]
10005c8a:	6a1b      	ldr	r3, [r3, #32]
10005c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
10005c8e:	4313      	orrs	r3, r2
10005c90:	62bb      	str	r3, [r7, #40]	; 0x28
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
10005c92:	687b      	ldr	r3, [r7, #4]
10005c94:	681b      	ldr	r3, [r3, #0]
10005c96:	689b      	ldr	r3, [r3, #8]
10005c98:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
10005c9c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
10005ca0:	687a      	ldr	r2, [r7, #4]
10005ca2:	6812      	ldr	r2, [r2, #0]
10005ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
10005ca6:	430b      	orrs	r3, r1
10005ca8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
10005caa:	687b      	ldr	r3, [r7, #4]
10005cac:	681b      	ldr	r3, [r3, #0]
10005cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10005cb0:	f023 010f 	bic.w	r1, r3, #15
10005cb4:	687b      	ldr	r3, [r7, #4]
10005cb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
10005cb8:	687b      	ldr	r3, [r7, #4]
10005cba:	681b      	ldr	r3, [r3, #0]
10005cbc:	430a      	orrs	r2, r1
10005cbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
10005cc0:	687b      	ldr	r3, [r7, #4]
10005cc2:	681b      	ldr	r3, [r3, #0]
10005cc4:	f1b3 4fb8 	cmp.w	r3, #1543503872	; 0x5c000000
10005cc8:	d132      	bne.n	10005d30 <UART_SetConfig+0x10c>
10005cca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005cce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
10005cd2:	f003 0307 	and.w	r3, r3, #7
10005cd6:	2b05      	cmp	r3, #5
10005cd8:	d826      	bhi.n	10005d28 <UART_SetConfig+0x104>
10005cda:	a201      	add	r2, pc, #4	; (adr r2, 10005ce0 <UART_SetConfig+0xbc>)
10005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005ce0:	10005cf9 	.word	0x10005cf9
10005ce4:	10005d01 	.word	0x10005d01
10005ce8:	10005d09 	.word	0x10005d09
10005cec:	10005d11 	.word	0x10005d11
10005cf0:	10005d19 	.word	0x10005d19
10005cf4:	10005d21 	.word	0x10005d21
10005cf8:	2302      	movs	r3, #2
10005cfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005cfe:	e184      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d00:	2304      	movs	r3, #4
10005d02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d06:	e180      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d08:	2310      	movs	r3, #16
10005d0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d0e:	e17c      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d10:	2320      	movs	r3, #32
10005d12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d16:	e178      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d18:	2308      	movs	r3, #8
10005d1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d1e:	e174      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d20:	2340      	movs	r3, #64	; 0x40
10005d22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d26:	e170      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d28:	2380      	movs	r3, #128	; 0x80
10005d2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d2e:	e16c      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d30:	687b      	ldr	r3, [r7, #4]
10005d32:	681b      	ldr	r3, [r3, #0]
10005d34:	4a7c      	ldr	r2, [pc, #496]	; (10005f28 <UART_SetConfig+0x304>)
10005d36:	4293      	cmp	r3, r2
10005d38:	d12c      	bne.n	10005d94 <UART_SetConfig+0x170>
10005d3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005d3e:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10005d42:	f003 0307 	and.w	r3, r3, #7
10005d46:	2b04      	cmp	r3, #4
10005d48:	d820      	bhi.n	10005d8c <UART_SetConfig+0x168>
10005d4a:	a201      	add	r2, pc, #4	; (adr r2, 10005d50 <UART_SetConfig+0x12c>)
10005d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005d50:	10005d65 	.word	0x10005d65
10005d54:	10005d6d 	.word	0x10005d6d
10005d58:	10005d75 	.word	0x10005d75
10005d5c:	10005d7d 	.word	0x10005d7d
10005d60:	10005d85 	.word	0x10005d85
10005d64:	2300      	movs	r3, #0
10005d66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d6a:	e14e      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d6c:	2308      	movs	r3, #8
10005d6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d72:	e14a      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d74:	2310      	movs	r3, #16
10005d76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d7a:	e146      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d7c:	2320      	movs	r3, #32
10005d7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d82:	e142      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d84:	2340      	movs	r3, #64	; 0x40
10005d86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d8a:	e13e      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d8c:	2380      	movs	r3, #128	; 0x80
10005d8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005d92:	e13a      	b.n	1000600a <UART_SetConfig+0x3e6>
10005d94:	687b      	ldr	r3, [r7, #4]
10005d96:	681b      	ldr	r3, [r3, #0]
10005d98:	4a64      	ldr	r2, [pc, #400]	; (10005f2c <UART_SetConfig+0x308>)
10005d9a:	4293      	cmp	r3, r2
10005d9c:	d12c      	bne.n	10005df8 <UART_SetConfig+0x1d4>
10005d9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005da2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10005da6:	f003 0307 	and.w	r3, r3, #7
10005daa:	2b04      	cmp	r3, #4
10005dac:	d820      	bhi.n	10005df0 <UART_SetConfig+0x1cc>
10005dae:	a201      	add	r2, pc, #4	; (adr r2, 10005db4 <UART_SetConfig+0x190>)
10005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005db4:	10005dc9 	.word	0x10005dc9
10005db8:	10005dd1 	.word	0x10005dd1
10005dbc:	10005dd9 	.word	0x10005dd9
10005dc0:	10005de1 	.word	0x10005de1
10005dc4:	10005de9 	.word	0x10005de9
10005dc8:	2300      	movs	r3, #0
10005dca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005dce:	e11c      	b.n	1000600a <UART_SetConfig+0x3e6>
10005dd0:	2308      	movs	r3, #8
10005dd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005dd6:	e118      	b.n	1000600a <UART_SetConfig+0x3e6>
10005dd8:	2310      	movs	r3, #16
10005dda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005dde:	e114      	b.n	1000600a <UART_SetConfig+0x3e6>
10005de0:	2320      	movs	r3, #32
10005de2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005de6:	e110      	b.n	1000600a <UART_SetConfig+0x3e6>
10005de8:	2340      	movs	r3, #64	; 0x40
10005dea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005dee:	e10c      	b.n	1000600a <UART_SetConfig+0x3e6>
10005df0:	2380      	movs	r3, #128	; 0x80
10005df2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005df6:	e108      	b.n	1000600a <UART_SetConfig+0x3e6>
10005df8:	687b      	ldr	r3, [r7, #4]
10005dfa:	681b      	ldr	r3, [r3, #0]
10005dfc:	4a4c      	ldr	r2, [pc, #304]	; (10005f30 <UART_SetConfig+0x30c>)
10005dfe:	4293      	cmp	r3, r2
10005e00:	d12c      	bne.n	10005e5c <UART_SetConfig+0x238>
10005e02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e06:	f8d3 38e8 	ldr.w	r3, [r3, #2280]	; 0x8e8
10005e0a:	f003 0307 	and.w	r3, r3, #7
10005e0e:	2b04      	cmp	r3, #4
10005e10:	d820      	bhi.n	10005e54 <UART_SetConfig+0x230>
10005e12:	a201      	add	r2, pc, #4	; (adr r2, 10005e18 <UART_SetConfig+0x1f4>)
10005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005e18:	10005e2d 	.word	0x10005e2d
10005e1c:	10005e35 	.word	0x10005e35
10005e20:	10005e3d 	.word	0x10005e3d
10005e24:	10005e45 	.word	0x10005e45
10005e28:	10005e4d 	.word	0x10005e4d
10005e2c:	2300      	movs	r3, #0
10005e2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005e32:	e0ea      	b.n	1000600a <UART_SetConfig+0x3e6>
10005e34:	2308      	movs	r3, #8
10005e36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005e3a:	e0e6      	b.n	1000600a <UART_SetConfig+0x3e6>
10005e3c:	2310      	movs	r3, #16
10005e3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005e42:	e0e2      	b.n	1000600a <UART_SetConfig+0x3e6>
10005e44:	2320      	movs	r3, #32
10005e46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005e4a:	e0de      	b.n	1000600a <UART_SetConfig+0x3e6>
10005e4c:	2340      	movs	r3, #64	; 0x40
10005e4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005e52:	e0da      	b.n	1000600a <UART_SetConfig+0x3e6>
10005e54:	2380      	movs	r3, #128	; 0x80
10005e56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005e5a:	e0d6      	b.n	1000600a <UART_SetConfig+0x3e6>
10005e5c:	687b      	ldr	r3, [r7, #4]
10005e5e:	681b      	ldr	r3, [r3, #0]
10005e60:	4a34      	ldr	r2, [pc, #208]	; (10005f34 <UART_SetConfig+0x310>)
10005e62:	4293      	cmp	r3, r2
10005e64:	d12c      	bne.n	10005ec0 <UART_SetConfig+0x29c>
10005e66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005e6a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
10005e6e:	f003 0307 	and.w	r3, r3, #7
10005e72:	2b04      	cmp	r3, #4
10005e74:	d820      	bhi.n	10005eb8 <UART_SetConfig+0x294>
10005e76:	a201      	add	r2, pc, #4	; (adr r2, 10005e7c <UART_SetConfig+0x258>)
10005e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005e7c:	10005e91 	.word	0x10005e91
10005e80:	10005e99 	.word	0x10005e99
10005e84:	10005ea1 	.word	0x10005ea1
10005e88:	10005ea9 	.word	0x10005ea9
10005e8c:	10005eb1 	.word	0x10005eb1
10005e90:	2300      	movs	r3, #0
10005e92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005e96:	e0b8      	b.n	1000600a <UART_SetConfig+0x3e6>
10005e98:	2308      	movs	r3, #8
10005e9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005e9e:	e0b4      	b.n	1000600a <UART_SetConfig+0x3e6>
10005ea0:	2310      	movs	r3, #16
10005ea2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005ea6:	e0b0      	b.n	1000600a <UART_SetConfig+0x3e6>
10005ea8:	2320      	movs	r3, #32
10005eaa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005eae:	e0ac      	b.n	1000600a <UART_SetConfig+0x3e6>
10005eb0:	2340      	movs	r3, #64	; 0x40
10005eb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005eb6:	e0a8      	b.n	1000600a <UART_SetConfig+0x3e6>
10005eb8:	2380      	movs	r3, #128	; 0x80
10005eba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005ebe:	e0a4      	b.n	1000600a <UART_SetConfig+0x3e6>
10005ec0:	687b      	ldr	r3, [r7, #4]
10005ec2:	681b      	ldr	r3, [r3, #0]
10005ec4:	4a1c      	ldr	r2, [pc, #112]	; (10005f38 <UART_SetConfig+0x314>)
10005ec6:	4293      	cmp	r3, r2
10005ec8:	d138      	bne.n	10005f3c <UART_SetConfig+0x318>
10005eca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005ece:	f8d3 38e4 	ldr.w	r3, [r3, #2276]	; 0x8e4
10005ed2:	f003 0307 	and.w	r3, r3, #7
10005ed6:	2b04      	cmp	r3, #4
10005ed8:	d820      	bhi.n	10005f1c <UART_SetConfig+0x2f8>
10005eda:	a201      	add	r2, pc, #4	; (adr r2, 10005ee0 <UART_SetConfig+0x2bc>)
10005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005ee0:	10005ef5 	.word	0x10005ef5
10005ee4:	10005efd 	.word	0x10005efd
10005ee8:	10005f05 	.word	0x10005f05
10005eec:	10005f0d 	.word	0x10005f0d
10005ef0:	10005f15 	.word	0x10005f15
10005ef4:	2301      	movs	r3, #1
10005ef6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005efa:	e086      	b.n	1000600a <UART_SetConfig+0x3e6>
10005efc:	2308      	movs	r3, #8
10005efe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005f02:	e082      	b.n	1000600a <UART_SetConfig+0x3e6>
10005f04:	2310      	movs	r3, #16
10005f06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005f0a:	e07e      	b.n	1000600a <UART_SetConfig+0x3e6>
10005f0c:	2320      	movs	r3, #32
10005f0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005f12:	e07a      	b.n	1000600a <UART_SetConfig+0x3e6>
10005f14:	2340      	movs	r3, #64	; 0x40
10005f16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005f1a:	e076      	b.n	1000600a <UART_SetConfig+0x3e6>
10005f1c:	2380      	movs	r3, #128	; 0x80
10005f1e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005f22:	e072      	b.n	1000600a <UART_SetConfig+0x3e6>
10005f24:	cfff69f3 	.word	0xcfff69f3
10005f28:	4000e000 	.word	0x4000e000
10005f2c:	4000f000 	.word	0x4000f000
10005f30:	40010000 	.word	0x40010000
10005f34:	40011000 	.word	0x40011000
10005f38:	44003000 	.word	0x44003000
10005f3c:	687b      	ldr	r3, [r7, #4]
10005f3e:	681b      	ldr	r3, [r3, #0]
10005f40:	4aab      	ldr	r2, [pc, #684]	; (100061f0 <UART_SetConfig+0x5cc>)
10005f42:	4293      	cmp	r3, r2
10005f44:	d12c      	bne.n	10005fa0 <UART_SetConfig+0x37c>
10005f46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005f4a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10005f4e:	f003 0307 	and.w	r3, r3, #7
10005f52:	2b04      	cmp	r3, #4
10005f54:	d820      	bhi.n	10005f98 <UART_SetConfig+0x374>
10005f56:	a201      	add	r2, pc, #4	; (adr r2, 10005f5c <UART_SetConfig+0x338>)
10005f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005f5c:	10005f71 	.word	0x10005f71
10005f60:	10005f79 	.word	0x10005f79
10005f64:	10005f81 	.word	0x10005f81
10005f68:	10005f89 	.word	0x10005f89
10005f6c:	10005f91 	.word	0x10005f91
10005f70:	2300      	movs	r3, #0
10005f72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005f76:	e048      	b.n	1000600a <UART_SetConfig+0x3e6>
10005f78:	2308      	movs	r3, #8
10005f7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005f7e:	e044      	b.n	1000600a <UART_SetConfig+0x3e6>
10005f80:	2310      	movs	r3, #16
10005f82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005f86:	e040      	b.n	1000600a <UART_SetConfig+0x3e6>
10005f88:	2320      	movs	r3, #32
10005f8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005f8e:	e03c      	b.n	1000600a <UART_SetConfig+0x3e6>
10005f90:	2340      	movs	r3, #64	; 0x40
10005f92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005f96:	e038      	b.n	1000600a <UART_SetConfig+0x3e6>
10005f98:	2380      	movs	r3, #128	; 0x80
10005f9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005f9e:	e034      	b.n	1000600a <UART_SetConfig+0x3e6>
10005fa0:	687b      	ldr	r3, [r7, #4]
10005fa2:	681b      	ldr	r3, [r3, #0]
10005fa4:	4a93      	ldr	r2, [pc, #588]	; (100061f4 <UART_SetConfig+0x5d0>)
10005fa6:	4293      	cmp	r3, r2
10005fa8:	d12c      	bne.n	10006004 <UART_SetConfig+0x3e0>
10005faa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10005fae:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
10005fb2:	f003 0307 	and.w	r3, r3, #7
10005fb6:	2b04      	cmp	r3, #4
10005fb8:	d820      	bhi.n	10005ffc <UART_SetConfig+0x3d8>
10005fba:	a201      	add	r2, pc, #4	; (adr r2, 10005fc0 <UART_SetConfig+0x39c>)
10005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10005fc0:	10005fd5 	.word	0x10005fd5
10005fc4:	10005fdd 	.word	0x10005fdd
10005fc8:	10005fe5 	.word	0x10005fe5
10005fcc:	10005fed 	.word	0x10005fed
10005fd0:	10005ff5 	.word	0x10005ff5
10005fd4:	2300      	movs	r3, #0
10005fd6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005fda:	e016      	b.n	1000600a <UART_SetConfig+0x3e6>
10005fdc:	2308      	movs	r3, #8
10005fde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005fe2:	e012      	b.n	1000600a <UART_SetConfig+0x3e6>
10005fe4:	2310      	movs	r3, #16
10005fe6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005fea:	e00e      	b.n	1000600a <UART_SetConfig+0x3e6>
10005fec:	2320      	movs	r3, #32
10005fee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005ff2:	e00a      	b.n	1000600a <UART_SetConfig+0x3e6>
10005ff4:	2340      	movs	r3, #64	; 0x40
10005ff6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10005ffa:	e006      	b.n	1000600a <UART_SetConfig+0x3e6>
10005ffc:	2380      	movs	r3, #128	; 0x80
10005ffe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
10006002:	e002      	b.n	1000600a <UART_SetConfig+0x3e6>
10006004:	2380      	movs	r3, #128	; 0x80
10006006:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
1000600a:	687b      	ldr	r3, [r7, #4]
1000600c:	69db      	ldr	r3, [r3, #28]
1000600e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
10006012:	f040 8354 	bne.w	100066be <UART_SetConfig+0xa9a>
  {
    switch (clocksource)
10006016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
1000601a:	2b20      	cmp	r3, #32
1000601c:	dc4a      	bgt.n	100060b4 <UART_SetConfig+0x490>
1000601e:	2b00      	cmp	r3, #0
10006020:	f2c0 832b 	blt.w	1000667a <UART_SetConfig+0xa56>
10006024:	2b20      	cmp	r3, #32
10006026:	f200 8328 	bhi.w	1000667a <UART_SetConfig+0xa56>
1000602a:	a201      	add	r2, pc, #4	; (adr r2, 10006030 <UART_SetConfig+0x40c>)
1000602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10006030:	100060bd 	.word	0x100060bd
10006034:	10006175 	.word	0x10006175
10006038:	10006235 	.word	0x10006235
1000603c:	1000667b 	.word	0x1000667b
10006040:	100062ed 	.word	0x100062ed
10006044:	1000667b 	.word	0x1000667b
10006048:	1000667b 	.word	0x1000667b
1000604c:	1000667b 	.word	0x1000667b
10006050:	100063a9 	.word	0x100063a9
10006054:	1000667b 	.word	0x1000667b
10006058:	1000667b 	.word	0x1000667b
1000605c:	1000667b 	.word	0x1000667b
10006060:	1000667b 	.word	0x1000667b
10006064:	1000667b 	.word	0x1000667b
10006068:	1000667b 	.word	0x1000667b
1000606c:	1000667b 	.word	0x1000667b
10006070:	10006465 	.word	0x10006465
10006074:	1000667b 	.word	0x1000667b
10006078:	1000667b 	.word	0x1000667b
1000607c:	1000667b 	.word	0x1000667b
10006080:	1000667b 	.word	0x1000667b
10006084:	1000667b 	.word	0x1000667b
10006088:	1000667b 	.word	0x1000667b
1000608c:	1000667b 	.word	0x1000667b
10006090:	1000667b 	.word	0x1000667b
10006094:	1000667b 	.word	0x1000667b
10006098:	1000667b 	.word	0x1000667b
1000609c:	1000667b 	.word	0x1000667b
100060a0:	1000667b 	.word	0x1000667b
100060a4:	1000667b 	.word	0x1000667b
100060a8:	1000667b 	.word	0x1000667b
100060ac:	1000667b 	.word	0x1000667b
100060b0:	10006517 	.word	0x10006517
100060b4:	2b40      	cmp	r3, #64	; 0x40
100060b6:	f000 8287 	beq.w	100065c8 <UART_SetConfig+0x9a4>
100060ba:	e2de      	b.n	1000667a <UART_SetConfig+0xa56>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
100060bc:	f7fd f8ce 	bl	1000325c <HAL_RCC_GetPCLK1Freq>
100060c0:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100060c2:	687b      	ldr	r3, [r7, #4]
100060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060c6:	2b00      	cmp	r3, #0
100060c8:	d044      	beq.n	10006154 <UART_SetConfig+0x530>
100060ca:	687b      	ldr	r3, [r7, #4]
100060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060ce:	2b01      	cmp	r3, #1
100060d0:	d03e      	beq.n	10006150 <UART_SetConfig+0x52c>
100060d2:	687b      	ldr	r3, [r7, #4]
100060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060d6:	2b02      	cmp	r3, #2
100060d8:	d038      	beq.n	1000614c <UART_SetConfig+0x528>
100060da:	687b      	ldr	r3, [r7, #4]
100060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060de:	2b03      	cmp	r3, #3
100060e0:	d032      	beq.n	10006148 <UART_SetConfig+0x524>
100060e2:	687b      	ldr	r3, [r7, #4]
100060e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060e6:	2b04      	cmp	r3, #4
100060e8:	d02c      	beq.n	10006144 <UART_SetConfig+0x520>
100060ea:	687b      	ldr	r3, [r7, #4]
100060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060ee:	2b05      	cmp	r3, #5
100060f0:	d026      	beq.n	10006140 <UART_SetConfig+0x51c>
100060f2:	687b      	ldr	r3, [r7, #4]
100060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060f6:	2b06      	cmp	r3, #6
100060f8:	d020      	beq.n	1000613c <UART_SetConfig+0x518>
100060fa:	687b      	ldr	r3, [r7, #4]
100060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100060fe:	2b07      	cmp	r3, #7
10006100:	d01a      	beq.n	10006138 <UART_SetConfig+0x514>
10006102:	687b      	ldr	r3, [r7, #4]
10006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006106:	2b08      	cmp	r3, #8
10006108:	d014      	beq.n	10006134 <UART_SetConfig+0x510>
1000610a:	687b      	ldr	r3, [r7, #4]
1000610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000610e:	2b09      	cmp	r3, #9
10006110:	d00e      	beq.n	10006130 <UART_SetConfig+0x50c>
10006112:	687b      	ldr	r3, [r7, #4]
10006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006116:	2b0a      	cmp	r3, #10
10006118:	d008      	beq.n	1000612c <UART_SetConfig+0x508>
1000611a:	687b      	ldr	r3, [r7, #4]
1000611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000611e:	2b0b      	cmp	r3, #11
10006120:	d102      	bne.n	10006128 <UART_SetConfig+0x504>
10006122:	f44f 7380 	mov.w	r3, #256	; 0x100
10006126:	e016      	b.n	10006156 <UART_SetConfig+0x532>
10006128:	2301      	movs	r3, #1
1000612a:	e014      	b.n	10006156 <UART_SetConfig+0x532>
1000612c:	2380      	movs	r3, #128	; 0x80
1000612e:	e012      	b.n	10006156 <UART_SetConfig+0x532>
10006130:	2340      	movs	r3, #64	; 0x40
10006132:	e010      	b.n	10006156 <UART_SetConfig+0x532>
10006134:	2320      	movs	r3, #32
10006136:	e00e      	b.n	10006156 <UART_SetConfig+0x532>
10006138:	2310      	movs	r3, #16
1000613a:	e00c      	b.n	10006156 <UART_SetConfig+0x532>
1000613c:	230c      	movs	r3, #12
1000613e:	e00a      	b.n	10006156 <UART_SetConfig+0x532>
10006140:	230a      	movs	r3, #10
10006142:	e008      	b.n	10006156 <UART_SetConfig+0x532>
10006144:	2308      	movs	r3, #8
10006146:	e006      	b.n	10006156 <UART_SetConfig+0x532>
10006148:	2306      	movs	r3, #6
1000614a:	e004      	b.n	10006156 <UART_SetConfig+0x532>
1000614c:	2304      	movs	r3, #4
1000614e:	e002      	b.n	10006156 <UART_SetConfig+0x532>
10006150:	2302      	movs	r3, #2
10006152:	e000      	b.n	10006156 <UART_SetConfig+0x532>
10006154:	2301      	movs	r3, #1
10006156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10006158:	fbb2 f3f3 	udiv	r3, r2, r3
1000615c:	005a      	lsls	r2, r3, #1
1000615e:	687b      	ldr	r3, [r7, #4]
10006160:	685b      	ldr	r3, [r3, #4]
10006162:	085b      	lsrs	r3, r3, #1
10006164:	441a      	add	r2, r3
10006166:	687b      	ldr	r3, [r7, #4]
10006168:	685b      	ldr	r3, [r3, #4]
1000616a:	fbb2 f3f3 	udiv	r3, r2, r3
1000616e:	b29b      	uxth	r3, r3
10006170:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006172:	e286      	b.n	10006682 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10006174:	f7fd f88d 	bl	10003292 <HAL_RCC_GetPCLK2Freq>
10006178:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000617a:	687b      	ldr	r3, [r7, #4]
1000617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000617e:	2b00      	cmp	r3, #0
10006180:	d048      	beq.n	10006214 <UART_SetConfig+0x5f0>
10006182:	687b      	ldr	r3, [r7, #4]
10006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006186:	2b01      	cmp	r3, #1
10006188:	d042      	beq.n	10006210 <UART_SetConfig+0x5ec>
1000618a:	687b      	ldr	r3, [r7, #4]
1000618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000618e:	2b02      	cmp	r3, #2
10006190:	d03c      	beq.n	1000620c <UART_SetConfig+0x5e8>
10006192:	687b      	ldr	r3, [r7, #4]
10006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006196:	2b03      	cmp	r3, #3
10006198:	d036      	beq.n	10006208 <UART_SetConfig+0x5e4>
1000619a:	687b      	ldr	r3, [r7, #4]
1000619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000619e:	2b04      	cmp	r3, #4
100061a0:	d030      	beq.n	10006204 <UART_SetConfig+0x5e0>
100061a2:	687b      	ldr	r3, [r7, #4]
100061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061a6:	2b05      	cmp	r3, #5
100061a8:	d02a      	beq.n	10006200 <UART_SetConfig+0x5dc>
100061aa:	687b      	ldr	r3, [r7, #4]
100061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061ae:	2b06      	cmp	r3, #6
100061b0:	d024      	beq.n	100061fc <UART_SetConfig+0x5d8>
100061b2:	687b      	ldr	r3, [r7, #4]
100061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061b6:	2b07      	cmp	r3, #7
100061b8:	d01e      	beq.n	100061f8 <UART_SetConfig+0x5d4>
100061ba:	687b      	ldr	r3, [r7, #4]
100061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061be:	2b08      	cmp	r3, #8
100061c0:	d014      	beq.n	100061ec <UART_SetConfig+0x5c8>
100061c2:	687b      	ldr	r3, [r7, #4]
100061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061c6:	2b09      	cmp	r3, #9
100061c8:	d00e      	beq.n	100061e8 <UART_SetConfig+0x5c4>
100061ca:	687b      	ldr	r3, [r7, #4]
100061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061ce:	2b0a      	cmp	r3, #10
100061d0:	d008      	beq.n	100061e4 <UART_SetConfig+0x5c0>
100061d2:	687b      	ldr	r3, [r7, #4]
100061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100061d6:	2b0b      	cmp	r3, #11
100061d8:	d102      	bne.n	100061e0 <UART_SetConfig+0x5bc>
100061da:	f44f 7380 	mov.w	r3, #256	; 0x100
100061de:	e01a      	b.n	10006216 <UART_SetConfig+0x5f2>
100061e0:	2301      	movs	r3, #1
100061e2:	e018      	b.n	10006216 <UART_SetConfig+0x5f2>
100061e4:	2380      	movs	r3, #128	; 0x80
100061e6:	e016      	b.n	10006216 <UART_SetConfig+0x5f2>
100061e8:	2340      	movs	r3, #64	; 0x40
100061ea:	e014      	b.n	10006216 <UART_SetConfig+0x5f2>
100061ec:	2320      	movs	r3, #32
100061ee:	e012      	b.n	10006216 <UART_SetConfig+0x5f2>
100061f0:	40018000 	.word	0x40018000
100061f4:	40019000 	.word	0x40019000
100061f8:	2310      	movs	r3, #16
100061fa:	e00c      	b.n	10006216 <UART_SetConfig+0x5f2>
100061fc:	230c      	movs	r3, #12
100061fe:	e00a      	b.n	10006216 <UART_SetConfig+0x5f2>
10006200:	230a      	movs	r3, #10
10006202:	e008      	b.n	10006216 <UART_SetConfig+0x5f2>
10006204:	2308      	movs	r3, #8
10006206:	e006      	b.n	10006216 <UART_SetConfig+0x5f2>
10006208:	2306      	movs	r3, #6
1000620a:	e004      	b.n	10006216 <UART_SetConfig+0x5f2>
1000620c:	2304      	movs	r3, #4
1000620e:	e002      	b.n	10006216 <UART_SetConfig+0x5f2>
10006210:	2302      	movs	r3, #2
10006212:	e000      	b.n	10006216 <UART_SetConfig+0x5f2>
10006214:	2301      	movs	r3, #1
10006216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10006218:	fbb2 f3f3 	udiv	r3, r2, r3
1000621c:	005a      	lsls	r2, r3, #1
1000621e:	687b      	ldr	r3, [r7, #4]
10006220:	685b      	ldr	r3, [r3, #4]
10006222:	085b      	lsrs	r3, r3, #1
10006224:	441a      	add	r2, r3
10006226:	687b      	ldr	r3, [r7, #4]
10006228:	685b      	ldr	r3, [r3, #4]
1000622a:	fbb2 f3f3 	udiv	r3, r2, r3
1000622e:	b29b      	uxth	r3, r3
10006230:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006232:	e226      	b.n	10006682 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
10006234:	f7fd f848 	bl	100032c8 <HAL_RCC_GetPCLK5Freq>
10006238:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000623a:	687b      	ldr	r3, [r7, #4]
1000623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000623e:	2b00      	cmp	r3, #0
10006240:	d044      	beq.n	100062cc <UART_SetConfig+0x6a8>
10006242:	687b      	ldr	r3, [r7, #4]
10006244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006246:	2b01      	cmp	r3, #1
10006248:	d03e      	beq.n	100062c8 <UART_SetConfig+0x6a4>
1000624a:	687b      	ldr	r3, [r7, #4]
1000624c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000624e:	2b02      	cmp	r3, #2
10006250:	d038      	beq.n	100062c4 <UART_SetConfig+0x6a0>
10006252:	687b      	ldr	r3, [r7, #4]
10006254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006256:	2b03      	cmp	r3, #3
10006258:	d032      	beq.n	100062c0 <UART_SetConfig+0x69c>
1000625a:	687b      	ldr	r3, [r7, #4]
1000625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000625e:	2b04      	cmp	r3, #4
10006260:	d02c      	beq.n	100062bc <UART_SetConfig+0x698>
10006262:	687b      	ldr	r3, [r7, #4]
10006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006266:	2b05      	cmp	r3, #5
10006268:	d026      	beq.n	100062b8 <UART_SetConfig+0x694>
1000626a:	687b      	ldr	r3, [r7, #4]
1000626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000626e:	2b06      	cmp	r3, #6
10006270:	d020      	beq.n	100062b4 <UART_SetConfig+0x690>
10006272:	687b      	ldr	r3, [r7, #4]
10006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006276:	2b07      	cmp	r3, #7
10006278:	d01a      	beq.n	100062b0 <UART_SetConfig+0x68c>
1000627a:	687b      	ldr	r3, [r7, #4]
1000627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000627e:	2b08      	cmp	r3, #8
10006280:	d014      	beq.n	100062ac <UART_SetConfig+0x688>
10006282:	687b      	ldr	r3, [r7, #4]
10006284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006286:	2b09      	cmp	r3, #9
10006288:	d00e      	beq.n	100062a8 <UART_SetConfig+0x684>
1000628a:	687b      	ldr	r3, [r7, #4]
1000628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000628e:	2b0a      	cmp	r3, #10
10006290:	d008      	beq.n	100062a4 <UART_SetConfig+0x680>
10006292:	687b      	ldr	r3, [r7, #4]
10006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006296:	2b0b      	cmp	r3, #11
10006298:	d102      	bne.n	100062a0 <UART_SetConfig+0x67c>
1000629a:	f44f 7380 	mov.w	r3, #256	; 0x100
1000629e:	e016      	b.n	100062ce <UART_SetConfig+0x6aa>
100062a0:	2301      	movs	r3, #1
100062a2:	e014      	b.n	100062ce <UART_SetConfig+0x6aa>
100062a4:	2380      	movs	r3, #128	; 0x80
100062a6:	e012      	b.n	100062ce <UART_SetConfig+0x6aa>
100062a8:	2340      	movs	r3, #64	; 0x40
100062aa:	e010      	b.n	100062ce <UART_SetConfig+0x6aa>
100062ac:	2320      	movs	r3, #32
100062ae:	e00e      	b.n	100062ce <UART_SetConfig+0x6aa>
100062b0:	2310      	movs	r3, #16
100062b2:	e00c      	b.n	100062ce <UART_SetConfig+0x6aa>
100062b4:	230c      	movs	r3, #12
100062b6:	e00a      	b.n	100062ce <UART_SetConfig+0x6aa>
100062b8:	230a      	movs	r3, #10
100062ba:	e008      	b.n	100062ce <UART_SetConfig+0x6aa>
100062bc:	2308      	movs	r3, #8
100062be:	e006      	b.n	100062ce <UART_SetConfig+0x6aa>
100062c0:	2306      	movs	r3, #6
100062c2:	e004      	b.n	100062ce <UART_SetConfig+0x6aa>
100062c4:	2304      	movs	r3, #4
100062c6:	e002      	b.n	100062ce <UART_SetConfig+0x6aa>
100062c8:	2302      	movs	r3, #2
100062ca:	e000      	b.n	100062ce <UART_SetConfig+0x6aa>
100062cc:	2301      	movs	r3, #1
100062ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100062d0:	fbb2 f3f3 	udiv	r3, r2, r3
100062d4:	005a      	lsls	r2, r3, #1
100062d6:	687b      	ldr	r3, [r7, #4]
100062d8:	685b      	ldr	r3, [r3, #4]
100062da:	085b      	lsrs	r3, r3, #1
100062dc:	441a      	add	r2, r3
100062de:	687b      	ldr	r3, [r7, #4]
100062e0:	685b      	ldr	r3, [r3, #4]
100062e2:	fbb2 f3f3 	udiv	r3, r2, r3
100062e6:	b29b      	uxth	r3, r3
100062e8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100062ea:	e1ca      	b.n	10006682 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
100062ec:	f107 0314 	add.w	r3, r7, #20
100062f0:	4618      	mov	r0, r3
100062f2:	f7fc fdb1 	bl	10002e58 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100062f6:	69ba      	ldr	r2, [r7, #24]
100062f8:	687b      	ldr	r3, [r7, #4]
100062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100062fc:	2b00      	cmp	r3, #0
100062fe:	d044      	beq.n	1000638a <UART_SetConfig+0x766>
10006300:	687b      	ldr	r3, [r7, #4]
10006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006304:	2b01      	cmp	r3, #1
10006306:	d03e      	beq.n	10006386 <UART_SetConfig+0x762>
10006308:	687b      	ldr	r3, [r7, #4]
1000630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000630c:	2b02      	cmp	r3, #2
1000630e:	d038      	beq.n	10006382 <UART_SetConfig+0x75e>
10006310:	687b      	ldr	r3, [r7, #4]
10006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006314:	2b03      	cmp	r3, #3
10006316:	d032      	beq.n	1000637e <UART_SetConfig+0x75a>
10006318:	687b      	ldr	r3, [r7, #4]
1000631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000631c:	2b04      	cmp	r3, #4
1000631e:	d02c      	beq.n	1000637a <UART_SetConfig+0x756>
10006320:	687b      	ldr	r3, [r7, #4]
10006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006324:	2b05      	cmp	r3, #5
10006326:	d026      	beq.n	10006376 <UART_SetConfig+0x752>
10006328:	687b      	ldr	r3, [r7, #4]
1000632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000632c:	2b06      	cmp	r3, #6
1000632e:	d020      	beq.n	10006372 <UART_SetConfig+0x74e>
10006330:	687b      	ldr	r3, [r7, #4]
10006332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006334:	2b07      	cmp	r3, #7
10006336:	d01a      	beq.n	1000636e <UART_SetConfig+0x74a>
10006338:	687b      	ldr	r3, [r7, #4]
1000633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000633c:	2b08      	cmp	r3, #8
1000633e:	d014      	beq.n	1000636a <UART_SetConfig+0x746>
10006340:	687b      	ldr	r3, [r7, #4]
10006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006344:	2b09      	cmp	r3, #9
10006346:	d00e      	beq.n	10006366 <UART_SetConfig+0x742>
10006348:	687b      	ldr	r3, [r7, #4]
1000634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000634c:	2b0a      	cmp	r3, #10
1000634e:	d008      	beq.n	10006362 <UART_SetConfig+0x73e>
10006350:	687b      	ldr	r3, [r7, #4]
10006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006354:	2b0b      	cmp	r3, #11
10006356:	d102      	bne.n	1000635e <UART_SetConfig+0x73a>
10006358:	f44f 7380 	mov.w	r3, #256	; 0x100
1000635c:	e016      	b.n	1000638c <UART_SetConfig+0x768>
1000635e:	2301      	movs	r3, #1
10006360:	e014      	b.n	1000638c <UART_SetConfig+0x768>
10006362:	2380      	movs	r3, #128	; 0x80
10006364:	e012      	b.n	1000638c <UART_SetConfig+0x768>
10006366:	2340      	movs	r3, #64	; 0x40
10006368:	e010      	b.n	1000638c <UART_SetConfig+0x768>
1000636a:	2320      	movs	r3, #32
1000636c:	e00e      	b.n	1000638c <UART_SetConfig+0x768>
1000636e:	2310      	movs	r3, #16
10006370:	e00c      	b.n	1000638c <UART_SetConfig+0x768>
10006372:	230c      	movs	r3, #12
10006374:	e00a      	b.n	1000638c <UART_SetConfig+0x768>
10006376:	230a      	movs	r3, #10
10006378:	e008      	b.n	1000638c <UART_SetConfig+0x768>
1000637a:	2308      	movs	r3, #8
1000637c:	e006      	b.n	1000638c <UART_SetConfig+0x768>
1000637e:	2306      	movs	r3, #6
10006380:	e004      	b.n	1000638c <UART_SetConfig+0x768>
10006382:	2304      	movs	r3, #4
10006384:	e002      	b.n	1000638c <UART_SetConfig+0x768>
10006386:	2302      	movs	r3, #2
10006388:	e000      	b.n	1000638c <UART_SetConfig+0x768>
1000638a:	2301      	movs	r3, #1
1000638c:	fbb2 f3f3 	udiv	r3, r2, r3
10006390:	005a      	lsls	r2, r3, #1
10006392:	687b      	ldr	r3, [r7, #4]
10006394:	685b      	ldr	r3, [r3, #4]
10006396:	085b      	lsrs	r3, r3, #1
10006398:	441a      	add	r2, r3
1000639a:	687b      	ldr	r3, [r7, #4]
1000639c:	685b      	ldr	r3, [r3, #4]
1000639e:	fbb2 f3f3 	udiv	r3, r2, r3
100063a2:	b29b      	uxth	r3, r3
100063a4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100063a6:	e16c      	b.n	10006682 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
100063a8:	f107 0308 	add.w	r3, r7, #8
100063ac:	4618      	mov	r0, r3
100063ae:	f7fc fe4d 	bl	1000304c <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100063b2:	68fa      	ldr	r2, [r7, #12]
100063b4:	687b      	ldr	r3, [r7, #4]
100063b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063b8:	2b00      	cmp	r3, #0
100063ba:	d044      	beq.n	10006446 <UART_SetConfig+0x822>
100063bc:	687b      	ldr	r3, [r7, #4]
100063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063c0:	2b01      	cmp	r3, #1
100063c2:	d03e      	beq.n	10006442 <UART_SetConfig+0x81e>
100063c4:	687b      	ldr	r3, [r7, #4]
100063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063c8:	2b02      	cmp	r3, #2
100063ca:	d038      	beq.n	1000643e <UART_SetConfig+0x81a>
100063cc:	687b      	ldr	r3, [r7, #4]
100063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063d0:	2b03      	cmp	r3, #3
100063d2:	d032      	beq.n	1000643a <UART_SetConfig+0x816>
100063d4:	687b      	ldr	r3, [r7, #4]
100063d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063d8:	2b04      	cmp	r3, #4
100063da:	d02c      	beq.n	10006436 <UART_SetConfig+0x812>
100063dc:	687b      	ldr	r3, [r7, #4]
100063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063e0:	2b05      	cmp	r3, #5
100063e2:	d026      	beq.n	10006432 <UART_SetConfig+0x80e>
100063e4:	687b      	ldr	r3, [r7, #4]
100063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063e8:	2b06      	cmp	r3, #6
100063ea:	d020      	beq.n	1000642e <UART_SetConfig+0x80a>
100063ec:	687b      	ldr	r3, [r7, #4]
100063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063f0:	2b07      	cmp	r3, #7
100063f2:	d01a      	beq.n	1000642a <UART_SetConfig+0x806>
100063f4:	687b      	ldr	r3, [r7, #4]
100063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100063f8:	2b08      	cmp	r3, #8
100063fa:	d014      	beq.n	10006426 <UART_SetConfig+0x802>
100063fc:	687b      	ldr	r3, [r7, #4]
100063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006400:	2b09      	cmp	r3, #9
10006402:	d00e      	beq.n	10006422 <UART_SetConfig+0x7fe>
10006404:	687b      	ldr	r3, [r7, #4]
10006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006408:	2b0a      	cmp	r3, #10
1000640a:	d008      	beq.n	1000641e <UART_SetConfig+0x7fa>
1000640c:	687b      	ldr	r3, [r7, #4]
1000640e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006410:	2b0b      	cmp	r3, #11
10006412:	d102      	bne.n	1000641a <UART_SetConfig+0x7f6>
10006414:	f44f 7380 	mov.w	r3, #256	; 0x100
10006418:	e016      	b.n	10006448 <UART_SetConfig+0x824>
1000641a:	2301      	movs	r3, #1
1000641c:	e014      	b.n	10006448 <UART_SetConfig+0x824>
1000641e:	2380      	movs	r3, #128	; 0x80
10006420:	e012      	b.n	10006448 <UART_SetConfig+0x824>
10006422:	2340      	movs	r3, #64	; 0x40
10006424:	e010      	b.n	10006448 <UART_SetConfig+0x824>
10006426:	2320      	movs	r3, #32
10006428:	e00e      	b.n	10006448 <UART_SetConfig+0x824>
1000642a:	2310      	movs	r3, #16
1000642c:	e00c      	b.n	10006448 <UART_SetConfig+0x824>
1000642e:	230c      	movs	r3, #12
10006430:	e00a      	b.n	10006448 <UART_SetConfig+0x824>
10006432:	230a      	movs	r3, #10
10006434:	e008      	b.n	10006448 <UART_SetConfig+0x824>
10006436:	2308      	movs	r3, #8
10006438:	e006      	b.n	10006448 <UART_SetConfig+0x824>
1000643a:	2306      	movs	r3, #6
1000643c:	e004      	b.n	10006448 <UART_SetConfig+0x824>
1000643e:	2304      	movs	r3, #4
10006440:	e002      	b.n	10006448 <UART_SetConfig+0x824>
10006442:	2302      	movs	r3, #2
10006444:	e000      	b.n	10006448 <UART_SetConfig+0x824>
10006446:	2301      	movs	r3, #1
10006448:	fbb2 f3f3 	udiv	r3, r2, r3
1000644c:	005a      	lsls	r2, r3, #1
1000644e:	687b      	ldr	r3, [r7, #4]
10006450:	685b      	ldr	r3, [r3, #4]
10006452:	085b      	lsrs	r3, r3, #1
10006454:	441a      	add	r2, r3
10006456:	687b      	ldr	r3, [r7, #4]
10006458:	685b      	ldr	r3, [r3, #4]
1000645a:	fbb2 f3f3 	udiv	r3, r2, r3
1000645e:	b29b      	uxth	r3, r3
10006460:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006462:	e10e      	b.n	10006682 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006464:	687b      	ldr	r3, [r7, #4]
10006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006468:	2b00      	cmp	r3, #0
1000646a:	d044      	beq.n	100064f6 <UART_SetConfig+0x8d2>
1000646c:	687b      	ldr	r3, [r7, #4]
1000646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006470:	2b01      	cmp	r3, #1
10006472:	d03e      	beq.n	100064f2 <UART_SetConfig+0x8ce>
10006474:	687b      	ldr	r3, [r7, #4]
10006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006478:	2b02      	cmp	r3, #2
1000647a:	d038      	beq.n	100064ee <UART_SetConfig+0x8ca>
1000647c:	687b      	ldr	r3, [r7, #4]
1000647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006480:	2b03      	cmp	r3, #3
10006482:	d032      	beq.n	100064ea <UART_SetConfig+0x8c6>
10006484:	687b      	ldr	r3, [r7, #4]
10006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006488:	2b04      	cmp	r3, #4
1000648a:	d02c      	beq.n	100064e6 <UART_SetConfig+0x8c2>
1000648c:	687b      	ldr	r3, [r7, #4]
1000648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006490:	2b05      	cmp	r3, #5
10006492:	d026      	beq.n	100064e2 <UART_SetConfig+0x8be>
10006494:	687b      	ldr	r3, [r7, #4]
10006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006498:	2b06      	cmp	r3, #6
1000649a:	d020      	beq.n	100064de <UART_SetConfig+0x8ba>
1000649c:	687b      	ldr	r3, [r7, #4]
1000649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100064a0:	2b07      	cmp	r3, #7
100064a2:	d01a      	beq.n	100064da <UART_SetConfig+0x8b6>
100064a4:	687b      	ldr	r3, [r7, #4]
100064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100064a8:	2b08      	cmp	r3, #8
100064aa:	d014      	beq.n	100064d6 <UART_SetConfig+0x8b2>
100064ac:	687b      	ldr	r3, [r7, #4]
100064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100064b0:	2b09      	cmp	r3, #9
100064b2:	d00e      	beq.n	100064d2 <UART_SetConfig+0x8ae>
100064b4:	687b      	ldr	r3, [r7, #4]
100064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100064b8:	2b0a      	cmp	r3, #10
100064ba:	d008      	beq.n	100064ce <UART_SetConfig+0x8aa>
100064bc:	687b      	ldr	r3, [r7, #4]
100064be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100064c0:	2b0b      	cmp	r3, #11
100064c2:	d102      	bne.n	100064ca <UART_SetConfig+0x8a6>
100064c4:	f44f 7380 	mov.w	r3, #256	; 0x100
100064c8:	e016      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064ca:	2301      	movs	r3, #1
100064cc:	e014      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064ce:	2380      	movs	r3, #128	; 0x80
100064d0:	e012      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064d2:	2340      	movs	r3, #64	; 0x40
100064d4:	e010      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064d6:	2320      	movs	r3, #32
100064d8:	e00e      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064da:	2310      	movs	r3, #16
100064dc:	e00c      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064de:	230c      	movs	r3, #12
100064e0:	e00a      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064e2:	230a      	movs	r3, #10
100064e4:	e008      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064e6:	2308      	movs	r3, #8
100064e8:	e006      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064ea:	2306      	movs	r3, #6
100064ec:	e004      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064ee:	2304      	movs	r3, #4
100064f0:	e002      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064f2:	2302      	movs	r3, #2
100064f4:	e000      	b.n	100064f8 <UART_SetConfig+0x8d4>
100064f6:	2301      	movs	r3, #1
100064f8:	4a9a      	ldr	r2, [pc, #616]	; (10006764 <UART_SetConfig+0xb40>)
100064fa:	fbb2 f3f3 	udiv	r3, r2, r3
100064fe:	005a      	lsls	r2, r3, #1
10006500:	687b      	ldr	r3, [r7, #4]
10006502:	685b      	ldr	r3, [r3, #4]
10006504:	085b      	lsrs	r3, r3, #1
10006506:	441a      	add	r2, r3
10006508:	687b      	ldr	r3, [r7, #4]
1000650a:	685b      	ldr	r3, [r3, #4]
1000650c:	fbb2 f3f3 	udiv	r3, r2, r3
10006510:	b29b      	uxth	r3, r3
10006512:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006514:	e0b5      	b.n	10006682 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006516:	687b      	ldr	r3, [r7, #4]
10006518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000651a:	2b00      	cmp	r3, #0
1000651c:	d044      	beq.n	100065a8 <UART_SetConfig+0x984>
1000651e:	687b      	ldr	r3, [r7, #4]
10006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006522:	2b01      	cmp	r3, #1
10006524:	d03e      	beq.n	100065a4 <UART_SetConfig+0x980>
10006526:	687b      	ldr	r3, [r7, #4]
10006528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000652a:	2b02      	cmp	r3, #2
1000652c:	d038      	beq.n	100065a0 <UART_SetConfig+0x97c>
1000652e:	687b      	ldr	r3, [r7, #4]
10006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006532:	2b03      	cmp	r3, #3
10006534:	d032      	beq.n	1000659c <UART_SetConfig+0x978>
10006536:	687b      	ldr	r3, [r7, #4]
10006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000653a:	2b04      	cmp	r3, #4
1000653c:	d02c      	beq.n	10006598 <UART_SetConfig+0x974>
1000653e:	687b      	ldr	r3, [r7, #4]
10006540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006542:	2b05      	cmp	r3, #5
10006544:	d026      	beq.n	10006594 <UART_SetConfig+0x970>
10006546:	687b      	ldr	r3, [r7, #4]
10006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000654a:	2b06      	cmp	r3, #6
1000654c:	d020      	beq.n	10006590 <UART_SetConfig+0x96c>
1000654e:	687b      	ldr	r3, [r7, #4]
10006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006552:	2b07      	cmp	r3, #7
10006554:	d01a      	beq.n	1000658c <UART_SetConfig+0x968>
10006556:	687b      	ldr	r3, [r7, #4]
10006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000655a:	2b08      	cmp	r3, #8
1000655c:	d014      	beq.n	10006588 <UART_SetConfig+0x964>
1000655e:	687b      	ldr	r3, [r7, #4]
10006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006562:	2b09      	cmp	r3, #9
10006564:	d00e      	beq.n	10006584 <UART_SetConfig+0x960>
10006566:	687b      	ldr	r3, [r7, #4]
10006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000656a:	2b0a      	cmp	r3, #10
1000656c:	d008      	beq.n	10006580 <UART_SetConfig+0x95c>
1000656e:	687b      	ldr	r3, [r7, #4]
10006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006572:	2b0b      	cmp	r3, #11
10006574:	d102      	bne.n	1000657c <UART_SetConfig+0x958>
10006576:	f44f 7380 	mov.w	r3, #256	; 0x100
1000657a:	e016      	b.n	100065aa <UART_SetConfig+0x986>
1000657c:	2301      	movs	r3, #1
1000657e:	e014      	b.n	100065aa <UART_SetConfig+0x986>
10006580:	2380      	movs	r3, #128	; 0x80
10006582:	e012      	b.n	100065aa <UART_SetConfig+0x986>
10006584:	2340      	movs	r3, #64	; 0x40
10006586:	e010      	b.n	100065aa <UART_SetConfig+0x986>
10006588:	2320      	movs	r3, #32
1000658a:	e00e      	b.n	100065aa <UART_SetConfig+0x986>
1000658c:	2310      	movs	r3, #16
1000658e:	e00c      	b.n	100065aa <UART_SetConfig+0x986>
10006590:	230c      	movs	r3, #12
10006592:	e00a      	b.n	100065aa <UART_SetConfig+0x986>
10006594:	230a      	movs	r3, #10
10006596:	e008      	b.n	100065aa <UART_SetConfig+0x986>
10006598:	2308      	movs	r3, #8
1000659a:	e006      	b.n	100065aa <UART_SetConfig+0x986>
1000659c:	2306      	movs	r3, #6
1000659e:	e004      	b.n	100065aa <UART_SetConfig+0x986>
100065a0:	2304      	movs	r3, #4
100065a2:	e002      	b.n	100065aa <UART_SetConfig+0x986>
100065a4:	2302      	movs	r3, #2
100065a6:	e000      	b.n	100065aa <UART_SetConfig+0x986>
100065a8:	2301      	movs	r3, #1
100065aa:	4a6f      	ldr	r2, [pc, #444]	; (10006768 <UART_SetConfig+0xb44>)
100065ac:	fbb2 f3f3 	udiv	r3, r2, r3
100065b0:	005a      	lsls	r2, r3, #1
100065b2:	687b      	ldr	r3, [r7, #4]
100065b4:	685b      	ldr	r3, [r3, #4]
100065b6:	085b      	lsrs	r3, r3, #1
100065b8:	441a      	add	r2, r3
100065ba:	687b      	ldr	r3, [r7, #4]
100065bc:	685b      	ldr	r3, [r3, #4]
100065be:	fbb2 f3f3 	udiv	r3, r2, r3
100065c2:	b29b      	uxth	r3, r3
100065c4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100065c6:	e05c      	b.n	10006682 <UART_SetConfig+0xa5e>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100065c8:	687b      	ldr	r3, [r7, #4]
100065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100065cc:	2b00      	cmp	r3, #0
100065ce:	d044      	beq.n	1000665a <UART_SetConfig+0xa36>
100065d0:	687b      	ldr	r3, [r7, #4]
100065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100065d4:	2b01      	cmp	r3, #1
100065d6:	d03e      	beq.n	10006656 <UART_SetConfig+0xa32>
100065d8:	687b      	ldr	r3, [r7, #4]
100065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100065dc:	2b02      	cmp	r3, #2
100065de:	d038      	beq.n	10006652 <UART_SetConfig+0xa2e>
100065e0:	687b      	ldr	r3, [r7, #4]
100065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100065e4:	2b03      	cmp	r3, #3
100065e6:	d032      	beq.n	1000664e <UART_SetConfig+0xa2a>
100065e8:	687b      	ldr	r3, [r7, #4]
100065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100065ec:	2b04      	cmp	r3, #4
100065ee:	d02c      	beq.n	1000664a <UART_SetConfig+0xa26>
100065f0:	687b      	ldr	r3, [r7, #4]
100065f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100065f4:	2b05      	cmp	r3, #5
100065f6:	d026      	beq.n	10006646 <UART_SetConfig+0xa22>
100065f8:	687b      	ldr	r3, [r7, #4]
100065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100065fc:	2b06      	cmp	r3, #6
100065fe:	d020      	beq.n	10006642 <UART_SetConfig+0xa1e>
10006600:	687b      	ldr	r3, [r7, #4]
10006602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006604:	2b07      	cmp	r3, #7
10006606:	d01a      	beq.n	1000663e <UART_SetConfig+0xa1a>
10006608:	687b      	ldr	r3, [r7, #4]
1000660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000660c:	2b08      	cmp	r3, #8
1000660e:	d014      	beq.n	1000663a <UART_SetConfig+0xa16>
10006610:	687b      	ldr	r3, [r7, #4]
10006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006614:	2b09      	cmp	r3, #9
10006616:	d00e      	beq.n	10006636 <UART_SetConfig+0xa12>
10006618:	687b      	ldr	r3, [r7, #4]
1000661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000661c:	2b0a      	cmp	r3, #10
1000661e:	d008      	beq.n	10006632 <UART_SetConfig+0xa0e>
10006620:	687b      	ldr	r3, [r7, #4]
10006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006624:	2b0b      	cmp	r3, #11
10006626:	d102      	bne.n	1000662e <UART_SetConfig+0xa0a>
10006628:	f44f 7380 	mov.w	r3, #256	; 0x100
1000662c:	e016      	b.n	1000665c <UART_SetConfig+0xa38>
1000662e:	2301      	movs	r3, #1
10006630:	e014      	b.n	1000665c <UART_SetConfig+0xa38>
10006632:	2380      	movs	r3, #128	; 0x80
10006634:	e012      	b.n	1000665c <UART_SetConfig+0xa38>
10006636:	2340      	movs	r3, #64	; 0x40
10006638:	e010      	b.n	1000665c <UART_SetConfig+0xa38>
1000663a:	2320      	movs	r3, #32
1000663c:	e00e      	b.n	1000665c <UART_SetConfig+0xa38>
1000663e:	2310      	movs	r3, #16
10006640:	e00c      	b.n	1000665c <UART_SetConfig+0xa38>
10006642:	230c      	movs	r3, #12
10006644:	e00a      	b.n	1000665c <UART_SetConfig+0xa38>
10006646:	230a      	movs	r3, #10
10006648:	e008      	b.n	1000665c <UART_SetConfig+0xa38>
1000664a:	2308      	movs	r3, #8
1000664c:	e006      	b.n	1000665c <UART_SetConfig+0xa38>
1000664e:	2306      	movs	r3, #6
10006650:	e004      	b.n	1000665c <UART_SetConfig+0xa38>
10006652:	2304      	movs	r3, #4
10006654:	e002      	b.n	1000665c <UART_SetConfig+0xa38>
10006656:	2302      	movs	r3, #2
10006658:	e000      	b.n	1000665c <UART_SetConfig+0xa38>
1000665a:	2301      	movs	r3, #1
1000665c:	4a43      	ldr	r2, [pc, #268]	; (1000676c <UART_SetConfig+0xb48>)
1000665e:	fbb2 f3f3 	udiv	r3, r2, r3
10006662:	005a      	lsls	r2, r3, #1
10006664:	687b      	ldr	r3, [r7, #4]
10006666:	685b      	ldr	r3, [r3, #4]
10006668:	085b      	lsrs	r3, r3, #1
1000666a:	441a      	add	r2, r3
1000666c:	687b      	ldr	r3, [r7, #4]
1000666e:	685b      	ldr	r3, [r3, #4]
10006670:	fbb2 f3f3 	udiv	r3, r2, r3
10006674:	b29b      	uxth	r3, r3
10006676:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006678:	e003      	b.n	10006682 <UART_SetConfig+0xa5e>
      default:
        ret = HAL_ERROR;
1000667a:	2301      	movs	r3, #1
1000667c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
10006680:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10006682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006684:	2b0f      	cmp	r3, #15
10006686:	d916      	bls.n	100066b6 <UART_SetConfig+0xa92>
10006688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000668a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
1000668e:	d212      	bcs.n	100066b6 <UART_SetConfig+0xa92>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
10006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006692:	b29b      	uxth	r3, r3
10006694:	f023 030f 	bic.w	r3, r3, #15
10006698:	847b      	strh	r3, [r7, #34]	; 0x22
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
1000669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000669c:	085b      	lsrs	r3, r3, #1
1000669e:	b29b      	uxth	r3, r3
100066a0:	f003 0307 	and.w	r3, r3, #7
100066a4:	b29a      	uxth	r2, r3
100066a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
100066a8:	4313      	orrs	r3, r2
100066aa:	847b      	strh	r3, [r7, #34]	; 0x22
      huart->Instance->BRR = brrtemp;
100066ac:	687b      	ldr	r3, [r7, #4]
100066ae:	681b      	ldr	r3, [r3, #0]
100066b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
100066b2:	60da      	str	r2, [r3, #12]
100066b4:	e342      	b.n	10006d3c <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
100066b6:	2301      	movs	r3, #1
100066b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
100066bc:	e33e      	b.n	10006d3c <UART_SetConfig+0x1118>
    }
  }
  else
  {
    switch (clocksource)
100066be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
100066c2:	2b20      	cmp	r3, #32
100066c4:	dc4a      	bgt.n	1000675c <UART_SetConfig+0xb38>
100066c6:	2b00      	cmp	r3, #0
100066c8:	f2c0 8325 	blt.w	10006d16 <UART_SetConfig+0x10f2>
100066cc:	2b20      	cmp	r3, #32
100066ce:	f200 8322 	bhi.w	10006d16 <UART_SetConfig+0x10f2>
100066d2:	a201      	add	r2, pc, #4	; (adr r2, 100066d8 <UART_SetConfig+0xab4>)
100066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
100066d8:	10006771 	.word	0x10006771
100066dc:	10006827 	.word	0x10006827
100066e0:	100068dd 	.word	0x100068dd
100066e4:	10006d17 	.word	0x10006d17
100066e8:	10006993 	.word	0x10006993
100066ec:	10006d17 	.word	0x10006d17
100066f0:	10006d17 	.word	0x10006d17
100066f4:	10006d17 	.word	0x10006d17
100066f8:	10006a4d 	.word	0x10006a4d
100066fc:	10006d17 	.word	0x10006d17
10006700:	10006d17 	.word	0x10006d17
10006704:	10006d17 	.word	0x10006d17
10006708:	10006d17 	.word	0x10006d17
1000670c:	10006d17 	.word	0x10006d17
10006710:	10006d17 	.word	0x10006d17
10006714:	10006d17 	.word	0x10006d17
10006718:	10006b07 	.word	0x10006b07
1000671c:	10006d17 	.word	0x10006d17
10006720:	10006d17 	.word	0x10006d17
10006724:	10006d17 	.word	0x10006d17
10006728:	10006d17 	.word	0x10006d17
1000672c:	10006d17 	.word	0x10006d17
10006730:	10006d17 	.word	0x10006d17
10006734:	10006d17 	.word	0x10006d17
10006738:	10006d17 	.word	0x10006d17
1000673c:	10006d17 	.word	0x10006d17
10006740:	10006d17 	.word	0x10006d17
10006744:	10006d17 	.word	0x10006d17
10006748:	10006d17 	.word	0x10006d17
1000674c:	10006d17 	.word	0x10006d17
10006750:	10006d17 	.word	0x10006d17
10006754:	10006d17 	.word	0x10006d17
10006758:	10006bb7 	.word	0x10006bb7
1000675c:	2b40      	cmp	r3, #64	; 0x40
1000675e:	f000 8282 	beq.w	10006c66 <UART_SetConfig+0x1042>
10006762:	e2d8      	b.n	10006d16 <UART_SetConfig+0x10f2>
10006764:	03d09000 	.word	0x03d09000
10006768:	003d0900 	.word	0x003d0900
1000676c:	016e3600 	.word	0x016e3600
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
10006770:	f7fc fd74 	bl	1000325c <HAL_RCC_GetPCLK1Freq>
10006774:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006776:	687b      	ldr	r3, [r7, #4]
10006778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000677a:	2b00      	cmp	r3, #0
1000677c:	d044      	beq.n	10006808 <UART_SetConfig+0xbe4>
1000677e:	687b      	ldr	r3, [r7, #4]
10006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006782:	2b01      	cmp	r3, #1
10006784:	d03e      	beq.n	10006804 <UART_SetConfig+0xbe0>
10006786:	687b      	ldr	r3, [r7, #4]
10006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000678a:	2b02      	cmp	r3, #2
1000678c:	d038      	beq.n	10006800 <UART_SetConfig+0xbdc>
1000678e:	687b      	ldr	r3, [r7, #4]
10006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006792:	2b03      	cmp	r3, #3
10006794:	d032      	beq.n	100067fc <UART_SetConfig+0xbd8>
10006796:	687b      	ldr	r3, [r7, #4]
10006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000679a:	2b04      	cmp	r3, #4
1000679c:	d02c      	beq.n	100067f8 <UART_SetConfig+0xbd4>
1000679e:	687b      	ldr	r3, [r7, #4]
100067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100067a2:	2b05      	cmp	r3, #5
100067a4:	d026      	beq.n	100067f4 <UART_SetConfig+0xbd0>
100067a6:	687b      	ldr	r3, [r7, #4]
100067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100067aa:	2b06      	cmp	r3, #6
100067ac:	d020      	beq.n	100067f0 <UART_SetConfig+0xbcc>
100067ae:	687b      	ldr	r3, [r7, #4]
100067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100067b2:	2b07      	cmp	r3, #7
100067b4:	d01a      	beq.n	100067ec <UART_SetConfig+0xbc8>
100067b6:	687b      	ldr	r3, [r7, #4]
100067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100067ba:	2b08      	cmp	r3, #8
100067bc:	d014      	beq.n	100067e8 <UART_SetConfig+0xbc4>
100067be:	687b      	ldr	r3, [r7, #4]
100067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100067c2:	2b09      	cmp	r3, #9
100067c4:	d00e      	beq.n	100067e4 <UART_SetConfig+0xbc0>
100067c6:	687b      	ldr	r3, [r7, #4]
100067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100067ca:	2b0a      	cmp	r3, #10
100067cc:	d008      	beq.n	100067e0 <UART_SetConfig+0xbbc>
100067ce:	687b      	ldr	r3, [r7, #4]
100067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100067d2:	2b0b      	cmp	r3, #11
100067d4:	d102      	bne.n	100067dc <UART_SetConfig+0xbb8>
100067d6:	f44f 7380 	mov.w	r3, #256	; 0x100
100067da:	e016      	b.n	1000680a <UART_SetConfig+0xbe6>
100067dc:	2301      	movs	r3, #1
100067de:	e014      	b.n	1000680a <UART_SetConfig+0xbe6>
100067e0:	2380      	movs	r3, #128	; 0x80
100067e2:	e012      	b.n	1000680a <UART_SetConfig+0xbe6>
100067e4:	2340      	movs	r3, #64	; 0x40
100067e6:	e010      	b.n	1000680a <UART_SetConfig+0xbe6>
100067e8:	2320      	movs	r3, #32
100067ea:	e00e      	b.n	1000680a <UART_SetConfig+0xbe6>
100067ec:	2310      	movs	r3, #16
100067ee:	e00c      	b.n	1000680a <UART_SetConfig+0xbe6>
100067f0:	230c      	movs	r3, #12
100067f2:	e00a      	b.n	1000680a <UART_SetConfig+0xbe6>
100067f4:	230a      	movs	r3, #10
100067f6:	e008      	b.n	1000680a <UART_SetConfig+0xbe6>
100067f8:	2308      	movs	r3, #8
100067fa:	e006      	b.n	1000680a <UART_SetConfig+0xbe6>
100067fc:	2306      	movs	r3, #6
100067fe:	e004      	b.n	1000680a <UART_SetConfig+0xbe6>
10006800:	2304      	movs	r3, #4
10006802:	e002      	b.n	1000680a <UART_SetConfig+0xbe6>
10006804:	2302      	movs	r3, #2
10006806:	e000      	b.n	1000680a <UART_SetConfig+0xbe6>
10006808:	2301      	movs	r3, #1
1000680a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
1000680c:	fbb2 f2f3 	udiv	r2, r2, r3
10006810:	687b      	ldr	r3, [r7, #4]
10006812:	685b      	ldr	r3, [r3, #4]
10006814:	085b      	lsrs	r3, r3, #1
10006816:	441a      	add	r2, r3
10006818:	687b      	ldr	r3, [r7, #4]
1000681a:	685b      	ldr	r3, [r3, #4]
1000681c:	fbb2 f3f3 	udiv	r3, r2, r3
10006820:	b29b      	uxth	r3, r3
10006822:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006824:	e27b      	b.n	10006d1e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
10006826:	f7fc fd34 	bl	10003292 <HAL_RCC_GetPCLK2Freq>
1000682a:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000682c:	687b      	ldr	r3, [r7, #4]
1000682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006830:	2b00      	cmp	r3, #0
10006832:	d044      	beq.n	100068be <UART_SetConfig+0xc9a>
10006834:	687b      	ldr	r3, [r7, #4]
10006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006838:	2b01      	cmp	r3, #1
1000683a:	d03e      	beq.n	100068ba <UART_SetConfig+0xc96>
1000683c:	687b      	ldr	r3, [r7, #4]
1000683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006840:	2b02      	cmp	r3, #2
10006842:	d038      	beq.n	100068b6 <UART_SetConfig+0xc92>
10006844:	687b      	ldr	r3, [r7, #4]
10006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006848:	2b03      	cmp	r3, #3
1000684a:	d032      	beq.n	100068b2 <UART_SetConfig+0xc8e>
1000684c:	687b      	ldr	r3, [r7, #4]
1000684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006850:	2b04      	cmp	r3, #4
10006852:	d02c      	beq.n	100068ae <UART_SetConfig+0xc8a>
10006854:	687b      	ldr	r3, [r7, #4]
10006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006858:	2b05      	cmp	r3, #5
1000685a:	d026      	beq.n	100068aa <UART_SetConfig+0xc86>
1000685c:	687b      	ldr	r3, [r7, #4]
1000685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006860:	2b06      	cmp	r3, #6
10006862:	d020      	beq.n	100068a6 <UART_SetConfig+0xc82>
10006864:	687b      	ldr	r3, [r7, #4]
10006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006868:	2b07      	cmp	r3, #7
1000686a:	d01a      	beq.n	100068a2 <UART_SetConfig+0xc7e>
1000686c:	687b      	ldr	r3, [r7, #4]
1000686e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006870:	2b08      	cmp	r3, #8
10006872:	d014      	beq.n	1000689e <UART_SetConfig+0xc7a>
10006874:	687b      	ldr	r3, [r7, #4]
10006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006878:	2b09      	cmp	r3, #9
1000687a:	d00e      	beq.n	1000689a <UART_SetConfig+0xc76>
1000687c:	687b      	ldr	r3, [r7, #4]
1000687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006880:	2b0a      	cmp	r3, #10
10006882:	d008      	beq.n	10006896 <UART_SetConfig+0xc72>
10006884:	687b      	ldr	r3, [r7, #4]
10006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006888:	2b0b      	cmp	r3, #11
1000688a:	d102      	bne.n	10006892 <UART_SetConfig+0xc6e>
1000688c:	f44f 7380 	mov.w	r3, #256	; 0x100
10006890:	e016      	b.n	100068c0 <UART_SetConfig+0xc9c>
10006892:	2301      	movs	r3, #1
10006894:	e014      	b.n	100068c0 <UART_SetConfig+0xc9c>
10006896:	2380      	movs	r3, #128	; 0x80
10006898:	e012      	b.n	100068c0 <UART_SetConfig+0xc9c>
1000689a:	2340      	movs	r3, #64	; 0x40
1000689c:	e010      	b.n	100068c0 <UART_SetConfig+0xc9c>
1000689e:	2320      	movs	r3, #32
100068a0:	e00e      	b.n	100068c0 <UART_SetConfig+0xc9c>
100068a2:	2310      	movs	r3, #16
100068a4:	e00c      	b.n	100068c0 <UART_SetConfig+0xc9c>
100068a6:	230c      	movs	r3, #12
100068a8:	e00a      	b.n	100068c0 <UART_SetConfig+0xc9c>
100068aa:	230a      	movs	r3, #10
100068ac:	e008      	b.n	100068c0 <UART_SetConfig+0xc9c>
100068ae:	2308      	movs	r3, #8
100068b0:	e006      	b.n	100068c0 <UART_SetConfig+0xc9c>
100068b2:	2306      	movs	r3, #6
100068b4:	e004      	b.n	100068c0 <UART_SetConfig+0xc9c>
100068b6:	2304      	movs	r3, #4
100068b8:	e002      	b.n	100068c0 <UART_SetConfig+0xc9c>
100068ba:	2302      	movs	r3, #2
100068bc:	e000      	b.n	100068c0 <UART_SetConfig+0xc9c>
100068be:	2301      	movs	r3, #1
100068c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100068c2:	fbb2 f2f3 	udiv	r2, r2, r3
100068c6:	687b      	ldr	r3, [r7, #4]
100068c8:	685b      	ldr	r3, [r3, #4]
100068ca:	085b      	lsrs	r3, r3, #1
100068cc:	441a      	add	r2, r3
100068ce:	687b      	ldr	r3, [r7, #4]
100068d0:	685b      	ldr	r3, [r3, #4]
100068d2:	fbb2 f3f3 	udiv	r3, r2, r3
100068d6:	b29b      	uxth	r3, r3
100068d8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
100068da:	e220      	b.n	10006d1e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PCLK5:
        pclk = HAL_RCC_GetPCLK5Freq();
100068dc:	f7fc fcf4 	bl	100032c8 <HAL_RCC_GetPCLK5Freq>
100068e0:	6278      	str	r0, [r7, #36]	; 0x24
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
100068e2:	687b      	ldr	r3, [r7, #4]
100068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100068e6:	2b00      	cmp	r3, #0
100068e8:	d044      	beq.n	10006974 <UART_SetConfig+0xd50>
100068ea:	687b      	ldr	r3, [r7, #4]
100068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100068ee:	2b01      	cmp	r3, #1
100068f0:	d03e      	beq.n	10006970 <UART_SetConfig+0xd4c>
100068f2:	687b      	ldr	r3, [r7, #4]
100068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100068f6:	2b02      	cmp	r3, #2
100068f8:	d038      	beq.n	1000696c <UART_SetConfig+0xd48>
100068fa:	687b      	ldr	r3, [r7, #4]
100068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100068fe:	2b03      	cmp	r3, #3
10006900:	d032      	beq.n	10006968 <UART_SetConfig+0xd44>
10006902:	687b      	ldr	r3, [r7, #4]
10006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006906:	2b04      	cmp	r3, #4
10006908:	d02c      	beq.n	10006964 <UART_SetConfig+0xd40>
1000690a:	687b      	ldr	r3, [r7, #4]
1000690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000690e:	2b05      	cmp	r3, #5
10006910:	d026      	beq.n	10006960 <UART_SetConfig+0xd3c>
10006912:	687b      	ldr	r3, [r7, #4]
10006914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006916:	2b06      	cmp	r3, #6
10006918:	d020      	beq.n	1000695c <UART_SetConfig+0xd38>
1000691a:	687b      	ldr	r3, [r7, #4]
1000691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000691e:	2b07      	cmp	r3, #7
10006920:	d01a      	beq.n	10006958 <UART_SetConfig+0xd34>
10006922:	687b      	ldr	r3, [r7, #4]
10006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006926:	2b08      	cmp	r3, #8
10006928:	d014      	beq.n	10006954 <UART_SetConfig+0xd30>
1000692a:	687b      	ldr	r3, [r7, #4]
1000692c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000692e:	2b09      	cmp	r3, #9
10006930:	d00e      	beq.n	10006950 <UART_SetConfig+0xd2c>
10006932:	687b      	ldr	r3, [r7, #4]
10006934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006936:	2b0a      	cmp	r3, #10
10006938:	d008      	beq.n	1000694c <UART_SetConfig+0xd28>
1000693a:	687b      	ldr	r3, [r7, #4]
1000693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1000693e:	2b0b      	cmp	r3, #11
10006940:	d102      	bne.n	10006948 <UART_SetConfig+0xd24>
10006942:	f44f 7380 	mov.w	r3, #256	; 0x100
10006946:	e016      	b.n	10006976 <UART_SetConfig+0xd52>
10006948:	2301      	movs	r3, #1
1000694a:	e014      	b.n	10006976 <UART_SetConfig+0xd52>
1000694c:	2380      	movs	r3, #128	; 0x80
1000694e:	e012      	b.n	10006976 <UART_SetConfig+0xd52>
10006950:	2340      	movs	r3, #64	; 0x40
10006952:	e010      	b.n	10006976 <UART_SetConfig+0xd52>
10006954:	2320      	movs	r3, #32
10006956:	e00e      	b.n	10006976 <UART_SetConfig+0xd52>
10006958:	2310      	movs	r3, #16
1000695a:	e00c      	b.n	10006976 <UART_SetConfig+0xd52>
1000695c:	230c      	movs	r3, #12
1000695e:	e00a      	b.n	10006976 <UART_SetConfig+0xd52>
10006960:	230a      	movs	r3, #10
10006962:	e008      	b.n	10006976 <UART_SetConfig+0xd52>
10006964:	2308      	movs	r3, #8
10006966:	e006      	b.n	10006976 <UART_SetConfig+0xd52>
10006968:	2306      	movs	r3, #6
1000696a:	e004      	b.n	10006976 <UART_SetConfig+0xd52>
1000696c:	2304      	movs	r3, #4
1000696e:	e002      	b.n	10006976 <UART_SetConfig+0xd52>
10006970:	2302      	movs	r3, #2
10006972:	e000      	b.n	10006976 <UART_SetConfig+0xd52>
10006974:	2301      	movs	r3, #1
10006976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
10006978:	fbb2 f2f3 	udiv	r2, r2, r3
1000697c:	687b      	ldr	r3, [r7, #4]
1000697e:	685b      	ldr	r3, [r3, #4]
10006980:	085b      	lsrs	r3, r3, #1
10006982:	441a      	add	r2, r3
10006984:	687b      	ldr	r3, [r7, #4]
10006986:	685b      	ldr	r3, [r3, #4]
10006988:	fbb2 f3f3 	udiv	r3, r2, r3
1000698c:	b29b      	uxth	r3, r3
1000698e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006990:	e1c5      	b.n	10006d1e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL3Q:
        HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10006992:	f107 0314 	add.w	r3, r7, #20
10006996:	4618      	mov	r0, r3
10006998:	f7fc fa5e 	bl	10002e58 <HAL_RCC_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
1000699c:	69ba      	ldr	r2, [r7, #24]
1000699e:	687b      	ldr	r3, [r7, #4]
100069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069a2:	2b00      	cmp	r3, #0
100069a4:	d044      	beq.n	10006a30 <UART_SetConfig+0xe0c>
100069a6:	687b      	ldr	r3, [r7, #4]
100069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069aa:	2b01      	cmp	r3, #1
100069ac:	d03e      	beq.n	10006a2c <UART_SetConfig+0xe08>
100069ae:	687b      	ldr	r3, [r7, #4]
100069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069b2:	2b02      	cmp	r3, #2
100069b4:	d038      	beq.n	10006a28 <UART_SetConfig+0xe04>
100069b6:	687b      	ldr	r3, [r7, #4]
100069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069ba:	2b03      	cmp	r3, #3
100069bc:	d032      	beq.n	10006a24 <UART_SetConfig+0xe00>
100069be:	687b      	ldr	r3, [r7, #4]
100069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069c2:	2b04      	cmp	r3, #4
100069c4:	d02c      	beq.n	10006a20 <UART_SetConfig+0xdfc>
100069c6:	687b      	ldr	r3, [r7, #4]
100069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069ca:	2b05      	cmp	r3, #5
100069cc:	d026      	beq.n	10006a1c <UART_SetConfig+0xdf8>
100069ce:	687b      	ldr	r3, [r7, #4]
100069d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069d2:	2b06      	cmp	r3, #6
100069d4:	d020      	beq.n	10006a18 <UART_SetConfig+0xdf4>
100069d6:	687b      	ldr	r3, [r7, #4]
100069d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069da:	2b07      	cmp	r3, #7
100069dc:	d01a      	beq.n	10006a14 <UART_SetConfig+0xdf0>
100069de:	687b      	ldr	r3, [r7, #4]
100069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069e2:	2b08      	cmp	r3, #8
100069e4:	d014      	beq.n	10006a10 <UART_SetConfig+0xdec>
100069e6:	687b      	ldr	r3, [r7, #4]
100069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069ea:	2b09      	cmp	r3, #9
100069ec:	d00e      	beq.n	10006a0c <UART_SetConfig+0xde8>
100069ee:	687b      	ldr	r3, [r7, #4]
100069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069f2:	2b0a      	cmp	r3, #10
100069f4:	d008      	beq.n	10006a08 <UART_SetConfig+0xde4>
100069f6:	687b      	ldr	r3, [r7, #4]
100069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
100069fa:	2b0b      	cmp	r3, #11
100069fc:	d102      	bne.n	10006a04 <UART_SetConfig+0xde0>
100069fe:	f44f 7380 	mov.w	r3, #256	; 0x100
10006a02:	e016      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a04:	2301      	movs	r3, #1
10006a06:	e014      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a08:	2380      	movs	r3, #128	; 0x80
10006a0a:	e012      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a0c:	2340      	movs	r3, #64	; 0x40
10006a0e:	e010      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a10:	2320      	movs	r3, #32
10006a12:	e00e      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a14:	2310      	movs	r3, #16
10006a16:	e00c      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a18:	230c      	movs	r3, #12
10006a1a:	e00a      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a1c:	230a      	movs	r3, #10
10006a1e:	e008      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a20:	2308      	movs	r3, #8
10006a22:	e006      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a24:	2306      	movs	r3, #6
10006a26:	e004      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a28:	2304      	movs	r3, #4
10006a2a:	e002      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a2c:	2302      	movs	r3, #2
10006a2e:	e000      	b.n	10006a32 <UART_SetConfig+0xe0e>
10006a30:	2301      	movs	r3, #1
10006a32:	fbb2 f2f3 	udiv	r2, r2, r3
10006a36:	687b      	ldr	r3, [r7, #4]
10006a38:	685b      	ldr	r3, [r3, #4]
10006a3a:	085b      	lsrs	r3, r3, #1
10006a3c:	441a      	add	r2, r3
10006a3e:	687b      	ldr	r3, [r7, #4]
10006a40:	685b      	ldr	r3, [r3, #4]
10006a42:	fbb2 f3f3 	udiv	r3, r2, r3
10006a46:	b29b      	uxth	r3, r3
10006a48:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006a4a:	e168      	b.n	10006d1e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_PLL4Q:
        HAL_RCC_GetPLL4ClockFreq(&pll4_clocks);
10006a4c:	f107 0308 	add.w	r3, r7, #8
10006a50:	4618      	mov	r0, r3
10006a52:	f7fc fafb 	bl	1000304c <HAL_RCC_GetPLL4ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll4_clocks.PLL4_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006a56:	68fa      	ldr	r2, [r7, #12]
10006a58:	687b      	ldr	r3, [r7, #4]
10006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006a5c:	2b00      	cmp	r3, #0
10006a5e:	d044      	beq.n	10006aea <UART_SetConfig+0xec6>
10006a60:	687b      	ldr	r3, [r7, #4]
10006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006a64:	2b01      	cmp	r3, #1
10006a66:	d03e      	beq.n	10006ae6 <UART_SetConfig+0xec2>
10006a68:	687b      	ldr	r3, [r7, #4]
10006a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006a6c:	2b02      	cmp	r3, #2
10006a6e:	d038      	beq.n	10006ae2 <UART_SetConfig+0xebe>
10006a70:	687b      	ldr	r3, [r7, #4]
10006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006a74:	2b03      	cmp	r3, #3
10006a76:	d032      	beq.n	10006ade <UART_SetConfig+0xeba>
10006a78:	687b      	ldr	r3, [r7, #4]
10006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006a7c:	2b04      	cmp	r3, #4
10006a7e:	d02c      	beq.n	10006ada <UART_SetConfig+0xeb6>
10006a80:	687b      	ldr	r3, [r7, #4]
10006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006a84:	2b05      	cmp	r3, #5
10006a86:	d026      	beq.n	10006ad6 <UART_SetConfig+0xeb2>
10006a88:	687b      	ldr	r3, [r7, #4]
10006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006a8c:	2b06      	cmp	r3, #6
10006a8e:	d020      	beq.n	10006ad2 <UART_SetConfig+0xeae>
10006a90:	687b      	ldr	r3, [r7, #4]
10006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006a94:	2b07      	cmp	r3, #7
10006a96:	d01a      	beq.n	10006ace <UART_SetConfig+0xeaa>
10006a98:	687b      	ldr	r3, [r7, #4]
10006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006a9c:	2b08      	cmp	r3, #8
10006a9e:	d014      	beq.n	10006aca <UART_SetConfig+0xea6>
10006aa0:	687b      	ldr	r3, [r7, #4]
10006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006aa4:	2b09      	cmp	r3, #9
10006aa6:	d00e      	beq.n	10006ac6 <UART_SetConfig+0xea2>
10006aa8:	687b      	ldr	r3, [r7, #4]
10006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006aac:	2b0a      	cmp	r3, #10
10006aae:	d008      	beq.n	10006ac2 <UART_SetConfig+0xe9e>
10006ab0:	687b      	ldr	r3, [r7, #4]
10006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006ab4:	2b0b      	cmp	r3, #11
10006ab6:	d102      	bne.n	10006abe <UART_SetConfig+0xe9a>
10006ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
10006abc:	e016      	b.n	10006aec <UART_SetConfig+0xec8>
10006abe:	2301      	movs	r3, #1
10006ac0:	e014      	b.n	10006aec <UART_SetConfig+0xec8>
10006ac2:	2380      	movs	r3, #128	; 0x80
10006ac4:	e012      	b.n	10006aec <UART_SetConfig+0xec8>
10006ac6:	2340      	movs	r3, #64	; 0x40
10006ac8:	e010      	b.n	10006aec <UART_SetConfig+0xec8>
10006aca:	2320      	movs	r3, #32
10006acc:	e00e      	b.n	10006aec <UART_SetConfig+0xec8>
10006ace:	2310      	movs	r3, #16
10006ad0:	e00c      	b.n	10006aec <UART_SetConfig+0xec8>
10006ad2:	230c      	movs	r3, #12
10006ad4:	e00a      	b.n	10006aec <UART_SetConfig+0xec8>
10006ad6:	230a      	movs	r3, #10
10006ad8:	e008      	b.n	10006aec <UART_SetConfig+0xec8>
10006ada:	2308      	movs	r3, #8
10006adc:	e006      	b.n	10006aec <UART_SetConfig+0xec8>
10006ade:	2306      	movs	r3, #6
10006ae0:	e004      	b.n	10006aec <UART_SetConfig+0xec8>
10006ae2:	2304      	movs	r3, #4
10006ae4:	e002      	b.n	10006aec <UART_SetConfig+0xec8>
10006ae6:	2302      	movs	r3, #2
10006ae8:	e000      	b.n	10006aec <UART_SetConfig+0xec8>
10006aea:	2301      	movs	r3, #1
10006aec:	fbb2 f2f3 	udiv	r2, r2, r3
10006af0:	687b      	ldr	r3, [r7, #4]
10006af2:	685b      	ldr	r3, [r3, #4]
10006af4:	085b      	lsrs	r3, r3, #1
10006af6:	441a      	add	r2, r3
10006af8:	687b      	ldr	r3, [r7, #4]
10006afa:	685b      	ldr	r3, [r3, #4]
10006afc:	fbb2 f3f3 	udiv	r3, r2, r3
10006b00:	b29b      	uxth	r3, r3
10006b02:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006b04:	e10b      	b.n	10006d1e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006b06:	687b      	ldr	r3, [r7, #4]
10006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b0a:	2b00      	cmp	r3, #0
10006b0c:	d044      	beq.n	10006b98 <UART_SetConfig+0xf74>
10006b0e:	687b      	ldr	r3, [r7, #4]
10006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b12:	2b01      	cmp	r3, #1
10006b14:	d03e      	beq.n	10006b94 <UART_SetConfig+0xf70>
10006b16:	687b      	ldr	r3, [r7, #4]
10006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b1a:	2b02      	cmp	r3, #2
10006b1c:	d038      	beq.n	10006b90 <UART_SetConfig+0xf6c>
10006b1e:	687b      	ldr	r3, [r7, #4]
10006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b22:	2b03      	cmp	r3, #3
10006b24:	d032      	beq.n	10006b8c <UART_SetConfig+0xf68>
10006b26:	687b      	ldr	r3, [r7, #4]
10006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b2a:	2b04      	cmp	r3, #4
10006b2c:	d02c      	beq.n	10006b88 <UART_SetConfig+0xf64>
10006b2e:	687b      	ldr	r3, [r7, #4]
10006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b32:	2b05      	cmp	r3, #5
10006b34:	d026      	beq.n	10006b84 <UART_SetConfig+0xf60>
10006b36:	687b      	ldr	r3, [r7, #4]
10006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b3a:	2b06      	cmp	r3, #6
10006b3c:	d020      	beq.n	10006b80 <UART_SetConfig+0xf5c>
10006b3e:	687b      	ldr	r3, [r7, #4]
10006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b42:	2b07      	cmp	r3, #7
10006b44:	d01a      	beq.n	10006b7c <UART_SetConfig+0xf58>
10006b46:	687b      	ldr	r3, [r7, #4]
10006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b4a:	2b08      	cmp	r3, #8
10006b4c:	d014      	beq.n	10006b78 <UART_SetConfig+0xf54>
10006b4e:	687b      	ldr	r3, [r7, #4]
10006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b52:	2b09      	cmp	r3, #9
10006b54:	d00e      	beq.n	10006b74 <UART_SetConfig+0xf50>
10006b56:	687b      	ldr	r3, [r7, #4]
10006b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b5a:	2b0a      	cmp	r3, #10
10006b5c:	d008      	beq.n	10006b70 <UART_SetConfig+0xf4c>
10006b5e:	687b      	ldr	r3, [r7, #4]
10006b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006b62:	2b0b      	cmp	r3, #11
10006b64:	d102      	bne.n	10006b6c <UART_SetConfig+0xf48>
10006b66:	f44f 7380 	mov.w	r3, #256	; 0x100
10006b6a:	e016      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b6c:	2301      	movs	r3, #1
10006b6e:	e014      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b70:	2380      	movs	r3, #128	; 0x80
10006b72:	e012      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b74:	2340      	movs	r3, #64	; 0x40
10006b76:	e010      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b78:	2320      	movs	r3, #32
10006b7a:	e00e      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b7c:	2310      	movs	r3, #16
10006b7e:	e00c      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b80:	230c      	movs	r3, #12
10006b82:	e00a      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b84:	230a      	movs	r3, #10
10006b86:	e008      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b88:	2308      	movs	r3, #8
10006b8a:	e006      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b8c:	2306      	movs	r3, #6
10006b8e:	e004      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b90:	2304      	movs	r3, #4
10006b92:	e002      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b94:	2302      	movs	r3, #2
10006b96:	e000      	b.n	10006b9a <UART_SetConfig+0xf76>
10006b98:	2301      	movs	r3, #1
10006b9a:	4a72      	ldr	r2, [pc, #456]	; (10006d64 <UART_SetConfig+0x1140>)
10006b9c:	fbb2 f2f3 	udiv	r2, r2, r3
10006ba0:	687b      	ldr	r3, [r7, #4]
10006ba2:	685b      	ldr	r3, [r3, #4]
10006ba4:	085b      	lsrs	r3, r3, #1
10006ba6:	441a      	add	r2, r3
10006ba8:	687b      	ldr	r3, [r7, #4]
10006baa:	685b      	ldr	r3, [r3, #4]
10006bac:	fbb2 f3f3 	udiv	r3, r2, r3
10006bb0:	b29b      	uxth	r3, r3
10006bb2:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006bb4:	e0b3      	b.n	10006d1e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006bb6:	687b      	ldr	r3, [r7, #4]
10006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006bba:	2b00      	cmp	r3, #0
10006bbc:	d044      	beq.n	10006c48 <UART_SetConfig+0x1024>
10006bbe:	687b      	ldr	r3, [r7, #4]
10006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006bc2:	2b01      	cmp	r3, #1
10006bc4:	d03e      	beq.n	10006c44 <UART_SetConfig+0x1020>
10006bc6:	687b      	ldr	r3, [r7, #4]
10006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006bca:	2b02      	cmp	r3, #2
10006bcc:	d038      	beq.n	10006c40 <UART_SetConfig+0x101c>
10006bce:	687b      	ldr	r3, [r7, #4]
10006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006bd2:	2b03      	cmp	r3, #3
10006bd4:	d032      	beq.n	10006c3c <UART_SetConfig+0x1018>
10006bd6:	687b      	ldr	r3, [r7, #4]
10006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006bda:	2b04      	cmp	r3, #4
10006bdc:	d02c      	beq.n	10006c38 <UART_SetConfig+0x1014>
10006bde:	687b      	ldr	r3, [r7, #4]
10006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006be2:	2b05      	cmp	r3, #5
10006be4:	d026      	beq.n	10006c34 <UART_SetConfig+0x1010>
10006be6:	687b      	ldr	r3, [r7, #4]
10006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006bea:	2b06      	cmp	r3, #6
10006bec:	d020      	beq.n	10006c30 <UART_SetConfig+0x100c>
10006bee:	687b      	ldr	r3, [r7, #4]
10006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006bf2:	2b07      	cmp	r3, #7
10006bf4:	d01a      	beq.n	10006c2c <UART_SetConfig+0x1008>
10006bf6:	687b      	ldr	r3, [r7, #4]
10006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006bfa:	2b08      	cmp	r3, #8
10006bfc:	d014      	beq.n	10006c28 <UART_SetConfig+0x1004>
10006bfe:	687b      	ldr	r3, [r7, #4]
10006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006c02:	2b09      	cmp	r3, #9
10006c04:	d00e      	beq.n	10006c24 <UART_SetConfig+0x1000>
10006c06:	687b      	ldr	r3, [r7, #4]
10006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006c0a:	2b0a      	cmp	r3, #10
10006c0c:	d008      	beq.n	10006c20 <UART_SetConfig+0xffc>
10006c0e:	687b      	ldr	r3, [r7, #4]
10006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006c12:	2b0b      	cmp	r3, #11
10006c14:	d102      	bne.n	10006c1c <UART_SetConfig+0xff8>
10006c16:	f44f 7380 	mov.w	r3, #256	; 0x100
10006c1a:	e016      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c1c:	2301      	movs	r3, #1
10006c1e:	e014      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c20:	2380      	movs	r3, #128	; 0x80
10006c22:	e012      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c24:	2340      	movs	r3, #64	; 0x40
10006c26:	e010      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c28:	2320      	movs	r3, #32
10006c2a:	e00e      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c2c:	2310      	movs	r3, #16
10006c2e:	e00c      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c30:	230c      	movs	r3, #12
10006c32:	e00a      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c34:	230a      	movs	r3, #10
10006c36:	e008      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c38:	2308      	movs	r3, #8
10006c3a:	e006      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c3c:	2306      	movs	r3, #6
10006c3e:	e004      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c40:	2304      	movs	r3, #4
10006c42:	e002      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c44:	2302      	movs	r3, #2
10006c46:	e000      	b.n	10006c4a <UART_SetConfig+0x1026>
10006c48:	2301      	movs	r3, #1
10006c4a:	4a47      	ldr	r2, [pc, #284]	; (10006d68 <UART_SetConfig+0x1144>)
10006c4c:	fbb2 f2f3 	udiv	r2, r2, r3
10006c50:	687b      	ldr	r3, [r7, #4]
10006c52:	685b      	ldr	r3, [r3, #4]
10006c54:	085b      	lsrs	r3, r3, #1
10006c56:	441a      	add	r2, r3
10006c58:	687b      	ldr	r3, [r7, #4]
10006c5a:	685b      	ldr	r3, [r3, #4]
10006c5c:	fbb2 f3f3 	udiv	r3, r2, r3
10006c60:	b29b      	uxth	r3, r3
10006c62:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006c64:	e05b      	b.n	10006d1e <UART_SetConfig+0x10fa>
      case UART_CLOCKSOURCE_HSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
10006c66:	687b      	ldr	r3, [r7, #4]
10006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006c6a:	2b00      	cmp	r3, #0
10006c6c:	d044      	beq.n	10006cf8 <UART_SetConfig+0x10d4>
10006c6e:	687b      	ldr	r3, [r7, #4]
10006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006c72:	2b01      	cmp	r3, #1
10006c74:	d03e      	beq.n	10006cf4 <UART_SetConfig+0x10d0>
10006c76:	687b      	ldr	r3, [r7, #4]
10006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006c7a:	2b02      	cmp	r3, #2
10006c7c:	d038      	beq.n	10006cf0 <UART_SetConfig+0x10cc>
10006c7e:	687b      	ldr	r3, [r7, #4]
10006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006c82:	2b03      	cmp	r3, #3
10006c84:	d032      	beq.n	10006cec <UART_SetConfig+0x10c8>
10006c86:	687b      	ldr	r3, [r7, #4]
10006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006c8a:	2b04      	cmp	r3, #4
10006c8c:	d02c      	beq.n	10006ce8 <UART_SetConfig+0x10c4>
10006c8e:	687b      	ldr	r3, [r7, #4]
10006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006c92:	2b05      	cmp	r3, #5
10006c94:	d026      	beq.n	10006ce4 <UART_SetConfig+0x10c0>
10006c96:	687b      	ldr	r3, [r7, #4]
10006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006c9a:	2b06      	cmp	r3, #6
10006c9c:	d020      	beq.n	10006ce0 <UART_SetConfig+0x10bc>
10006c9e:	687b      	ldr	r3, [r7, #4]
10006ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006ca2:	2b07      	cmp	r3, #7
10006ca4:	d01a      	beq.n	10006cdc <UART_SetConfig+0x10b8>
10006ca6:	687b      	ldr	r3, [r7, #4]
10006ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006caa:	2b08      	cmp	r3, #8
10006cac:	d014      	beq.n	10006cd8 <UART_SetConfig+0x10b4>
10006cae:	687b      	ldr	r3, [r7, #4]
10006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006cb2:	2b09      	cmp	r3, #9
10006cb4:	d00e      	beq.n	10006cd4 <UART_SetConfig+0x10b0>
10006cb6:	687b      	ldr	r3, [r7, #4]
10006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006cba:	2b0a      	cmp	r3, #10
10006cbc:	d008      	beq.n	10006cd0 <UART_SetConfig+0x10ac>
10006cbe:	687b      	ldr	r3, [r7, #4]
10006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10006cc2:	2b0b      	cmp	r3, #11
10006cc4:	d102      	bne.n	10006ccc <UART_SetConfig+0x10a8>
10006cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
10006cca:	e016      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006ccc:	2301      	movs	r3, #1
10006cce:	e014      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006cd0:	2380      	movs	r3, #128	; 0x80
10006cd2:	e012      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006cd4:	2340      	movs	r3, #64	; 0x40
10006cd6:	e010      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006cd8:	2320      	movs	r3, #32
10006cda:	e00e      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006cdc:	2310      	movs	r3, #16
10006cde:	e00c      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006ce0:	230c      	movs	r3, #12
10006ce2:	e00a      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006ce4:	230a      	movs	r3, #10
10006ce6:	e008      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006ce8:	2308      	movs	r3, #8
10006cea:	e006      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006cec:	2306      	movs	r3, #6
10006cee:	e004      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006cf0:	2304      	movs	r3, #4
10006cf2:	e002      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006cf4:	2302      	movs	r3, #2
10006cf6:	e000      	b.n	10006cfa <UART_SetConfig+0x10d6>
10006cf8:	2301      	movs	r3, #1
10006cfa:	4a1c      	ldr	r2, [pc, #112]	; (10006d6c <UART_SetConfig+0x1148>)
10006cfc:	fbb2 f2f3 	udiv	r2, r2, r3
10006d00:	687b      	ldr	r3, [r7, #4]
10006d02:	685b      	ldr	r3, [r3, #4]
10006d04:	085b      	lsrs	r3, r3, #1
10006d06:	441a      	add	r2, r3
10006d08:	687b      	ldr	r3, [r7, #4]
10006d0a:	685b      	ldr	r3, [r3, #4]
10006d0c:	fbb2 f3f3 	udiv	r3, r2, r3
10006d10:	b29b      	uxth	r3, r3
10006d12:	633b      	str	r3, [r7, #48]	; 0x30
        break;
10006d14:	e003      	b.n	10006d1e <UART_SetConfig+0x10fa>
      default:
        ret = HAL_ERROR;
10006d16:	2301      	movs	r3, #1
10006d18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
10006d1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
10006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006d20:	2b0f      	cmp	r3, #15
10006d22:	d908      	bls.n	10006d36 <UART_SetConfig+0x1112>
10006d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10006d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
10006d2a:	d204      	bcs.n	10006d36 <UART_SetConfig+0x1112>
    {
      huart->Instance->BRR = usartdiv;
10006d2c:	687b      	ldr	r3, [r7, #4]
10006d2e:	681b      	ldr	r3, [r3, #0]
10006d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
10006d32:	60da      	str	r2, [r3, #12]
10006d34:	e002      	b.n	10006d3c <UART_SetConfig+0x1118>
    }
    else
    {
      ret = HAL_ERROR;
10006d36:	2301      	movs	r3, #1
10006d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
10006d3c:	687b      	ldr	r3, [r7, #4]
10006d3e:	2201      	movs	r2, #1
10006d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
10006d44:	687b      	ldr	r3, [r7, #4]
10006d46:	2201      	movs	r2, #1
10006d48:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
10006d4c:	687b      	ldr	r3, [r7, #4]
10006d4e:	2200      	movs	r2, #0
10006d50:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
10006d52:	687b      	ldr	r3, [r7, #4]
10006d54:	2200      	movs	r2, #0
10006d56:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
10006d58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
10006d5c:	4618      	mov	r0, r3
10006d5e:	3738      	adds	r7, #56	; 0x38
10006d60:	46bd      	mov	sp, r7
10006d62:	bd80      	pop	{r7, pc}
10006d64:	03d09000 	.word	0x03d09000
10006d68:	003d0900 	.word	0x003d0900
10006d6c:	016e3600 	.word	0x016e3600

10006d70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
10006d70:	b480      	push	{r7}
10006d72:	b083      	sub	sp, #12
10006d74:	af00      	add	r7, sp, #0
10006d76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
10006d78:	687b      	ldr	r3, [r7, #4]
10006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006d7c:	f003 0301 	and.w	r3, r3, #1
10006d80:	2b00      	cmp	r3, #0
10006d82:	d00a      	beq.n	10006d9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
10006d84:	687b      	ldr	r3, [r7, #4]
10006d86:	681b      	ldr	r3, [r3, #0]
10006d88:	685b      	ldr	r3, [r3, #4]
10006d8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
10006d8e:	687b      	ldr	r3, [r7, #4]
10006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10006d92:	687b      	ldr	r3, [r7, #4]
10006d94:	681b      	ldr	r3, [r3, #0]
10006d96:	430a      	orrs	r2, r1
10006d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
10006d9a:	687b      	ldr	r3, [r7, #4]
10006d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006d9e:	f003 0302 	and.w	r3, r3, #2
10006da2:	2b00      	cmp	r3, #0
10006da4:	d00a      	beq.n	10006dbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
10006da6:	687b      	ldr	r3, [r7, #4]
10006da8:	681b      	ldr	r3, [r3, #0]
10006daa:	685b      	ldr	r3, [r3, #4]
10006dac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
10006db0:	687b      	ldr	r3, [r7, #4]
10006db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
10006db4:	687b      	ldr	r3, [r7, #4]
10006db6:	681b      	ldr	r3, [r3, #0]
10006db8:	430a      	orrs	r2, r1
10006dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
10006dbc:	687b      	ldr	r3, [r7, #4]
10006dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006dc0:	f003 0304 	and.w	r3, r3, #4
10006dc4:	2b00      	cmp	r3, #0
10006dc6:	d00a      	beq.n	10006dde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
10006dc8:	687b      	ldr	r3, [r7, #4]
10006dca:	681b      	ldr	r3, [r3, #0]
10006dcc:	685b      	ldr	r3, [r3, #4]
10006dce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
10006dd2:	687b      	ldr	r3, [r7, #4]
10006dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
10006dd6:	687b      	ldr	r3, [r7, #4]
10006dd8:	681b      	ldr	r3, [r3, #0]
10006dda:	430a      	orrs	r2, r1
10006ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
10006dde:	687b      	ldr	r3, [r7, #4]
10006de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006de2:	f003 0308 	and.w	r3, r3, #8
10006de6:	2b00      	cmp	r3, #0
10006de8:	d00a      	beq.n	10006e00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
10006dea:	687b      	ldr	r3, [r7, #4]
10006dec:	681b      	ldr	r3, [r3, #0]
10006dee:	685b      	ldr	r3, [r3, #4]
10006df0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
10006df4:	687b      	ldr	r3, [r7, #4]
10006df6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
10006df8:	687b      	ldr	r3, [r7, #4]
10006dfa:	681b      	ldr	r3, [r3, #0]
10006dfc:	430a      	orrs	r2, r1
10006dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
10006e00:	687b      	ldr	r3, [r7, #4]
10006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006e04:	f003 0310 	and.w	r3, r3, #16
10006e08:	2b00      	cmp	r3, #0
10006e0a:	d00a      	beq.n	10006e22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
10006e0c:	687b      	ldr	r3, [r7, #4]
10006e0e:	681b      	ldr	r3, [r3, #0]
10006e10:	689b      	ldr	r3, [r3, #8]
10006e12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
10006e16:	687b      	ldr	r3, [r7, #4]
10006e18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
10006e1a:	687b      	ldr	r3, [r7, #4]
10006e1c:	681b      	ldr	r3, [r3, #0]
10006e1e:	430a      	orrs	r2, r1
10006e20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
10006e22:	687b      	ldr	r3, [r7, #4]
10006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006e26:	f003 0320 	and.w	r3, r3, #32
10006e2a:	2b00      	cmp	r3, #0
10006e2c:	d00a      	beq.n	10006e44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
10006e2e:	687b      	ldr	r3, [r7, #4]
10006e30:	681b      	ldr	r3, [r3, #0]
10006e32:	689b      	ldr	r3, [r3, #8]
10006e34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
10006e38:	687b      	ldr	r3, [r7, #4]
10006e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
10006e3c:	687b      	ldr	r3, [r7, #4]
10006e3e:	681b      	ldr	r3, [r3, #0]
10006e40:	430a      	orrs	r2, r1
10006e42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
10006e44:	687b      	ldr	r3, [r7, #4]
10006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
10006e4c:	2b00      	cmp	r3, #0
10006e4e:	d01a      	beq.n	10006e86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
10006e50:	687b      	ldr	r3, [r7, #4]
10006e52:	681b      	ldr	r3, [r3, #0]
10006e54:	685b      	ldr	r3, [r3, #4]
10006e56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
10006e5a:	687b      	ldr	r3, [r7, #4]
10006e5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
10006e5e:	687b      	ldr	r3, [r7, #4]
10006e60:	681b      	ldr	r3, [r3, #0]
10006e62:	430a      	orrs	r2, r1
10006e64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
10006e66:	687b      	ldr	r3, [r7, #4]
10006e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10006e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
10006e6e:	d10a      	bne.n	10006e86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
10006e70:	687b      	ldr	r3, [r7, #4]
10006e72:	681b      	ldr	r3, [r3, #0]
10006e74:	685b      	ldr	r3, [r3, #4]
10006e76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
10006e7a:	687b      	ldr	r3, [r7, #4]
10006e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
10006e7e:	687b      	ldr	r3, [r7, #4]
10006e80:	681b      	ldr	r3, [r3, #0]
10006e82:	430a      	orrs	r2, r1
10006e84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
10006e86:	687b      	ldr	r3, [r7, #4]
10006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10006e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
10006e8e:	2b00      	cmp	r3, #0
10006e90:	d00a      	beq.n	10006ea8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
10006e92:	687b      	ldr	r3, [r7, #4]
10006e94:	681b      	ldr	r3, [r3, #0]
10006e96:	685b      	ldr	r3, [r3, #4]
10006e98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
10006e9c:	687b      	ldr	r3, [r7, #4]
10006e9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
10006ea0:	687b      	ldr	r3, [r7, #4]
10006ea2:	681b      	ldr	r3, [r3, #0]
10006ea4:	430a      	orrs	r2, r1
10006ea6:	605a      	str	r2, [r3, #4]
  }
}
10006ea8:	bf00      	nop
10006eaa:	370c      	adds	r7, #12
10006eac:	46bd      	mov	sp, r7
10006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
10006eb2:	4770      	bx	lr

10006eb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
10006eb4:	b580      	push	{r7, lr}
10006eb6:	b086      	sub	sp, #24
10006eb8:	af02      	add	r7, sp, #8
10006eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
10006ebc:	687b      	ldr	r3, [r7, #4]
10006ebe:	2200      	movs	r2, #0
10006ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
10006ec4:	f7fa fb1c 	bl	10001500 <HAL_GetTick>
10006ec8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
10006eca:	687b      	ldr	r3, [r7, #4]
10006ecc:	681b      	ldr	r3, [r3, #0]
10006ece:	681b      	ldr	r3, [r3, #0]
10006ed0:	f003 0308 	and.w	r3, r3, #8
10006ed4:	2b08      	cmp	r3, #8
10006ed6:	d10e      	bne.n	10006ef6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10006ed8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
10006edc:	9300      	str	r3, [sp, #0]
10006ede:	68fb      	ldr	r3, [r7, #12]
10006ee0:	2200      	movs	r2, #0
10006ee2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
10006ee6:	6878      	ldr	r0, [r7, #4]
10006ee8:	f000 f82c 	bl	10006f44 <UART_WaitOnFlagUntilTimeout>
10006eec:	4603      	mov	r3, r0
10006eee:	2b00      	cmp	r3, #0
10006ef0:	d001      	beq.n	10006ef6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10006ef2:	2303      	movs	r3, #3
10006ef4:	e022      	b.n	10006f3c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
10006ef6:	687b      	ldr	r3, [r7, #4]
10006ef8:	681b      	ldr	r3, [r3, #0]
10006efa:	681b      	ldr	r3, [r3, #0]
10006efc:	f003 0304 	and.w	r3, r3, #4
10006f00:	2b04      	cmp	r3, #4
10006f02:	d10e      	bne.n	10006f22 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
10006f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
10006f08:	9300      	str	r3, [sp, #0]
10006f0a:	68fb      	ldr	r3, [r7, #12]
10006f0c:	2200      	movs	r2, #0
10006f0e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
10006f12:	6878      	ldr	r0, [r7, #4]
10006f14:	f000 f816 	bl	10006f44 <UART_WaitOnFlagUntilTimeout>
10006f18:	4603      	mov	r3, r0
10006f1a:	2b00      	cmp	r3, #0
10006f1c:	d001      	beq.n	10006f22 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
10006f1e:	2303      	movs	r3, #3
10006f20:	e00c      	b.n	10006f3c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
10006f22:	687b      	ldr	r3, [r7, #4]
10006f24:	2220      	movs	r2, #32
10006f26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
10006f2a:	687b      	ldr	r3, [r7, #4]
10006f2c:	2220      	movs	r2, #32
10006f2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  __HAL_UNLOCK(huart);
10006f32:	687b      	ldr	r3, [r7, #4]
10006f34:	2200      	movs	r2, #0
10006f36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
10006f3a:	2300      	movs	r3, #0
}
10006f3c:	4618      	mov	r0, r3
10006f3e:	3710      	adds	r7, #16
10006f40:	46bd      	mov	sp, r7
10006f42:	bd80      	pop	{r7, pc}

10006f44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
10006f44:	b580      	push	{r7, lr}
10006f46:	b084      	sub	sp, #16
10006f48:	af00      	add	r7, sp, #0
10006f4a:	60f8      	str	r0, [r7, #12]
10006f4c:	60b9      	str	r1, [r7, #8]
10006f4e:	603b      	str	r3, [r7, #0]
10006f50:	4613      	mov	r3, r2
10006f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
10006f54:	e062      	b.n	1000701c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
10006f56:	69bb      	ldr	r3, [r7, #24]
10006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
10006f5c:	d05e      	beq.n	1000701c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
10006f5e:	f7fa facf 	bl	10001500 <HAL_GetTick>
10006f62:	4602      	mov	r2, r0
10006f64:	683b      	ldr	r3, [r7, #0]
10006f66:	1ad3      	subs	r3, r2, r3
10006f68:	69ba      	ldr	r2, [r7, #24]
10006f6a:	429a      	cmp	r2, r3
10006f6c:	d302      	bcc.n	10006f74 <UART_WaitOnFlagUntilTimeout+0x30>
10006f6e:	69bb      	ldr	r3, [r7, #24]
10006f70:	2b00      	cmp	r3, #0
10006f72:	d11d      	bne.n	10006fb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
10006f74:	68fb      	ldr	r3, [r7, #12]
10006f76:	681b      	ldr	r3, [r3, #0]
10006f78:	681a      	ldr	r2, [r3, #0]
10006f7a:	68fb      	ldr	r3, [r7, #12]
10006f7c:	681b      	ldr	r3, [r3, #0]
10006f7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
10006f82:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10006f84:	68fb      	ldr	r3, [r7, #12]
10006f86:	681b      	ldr	r3, [r3, #0]
10006f88:	689a      	ldr	r2, [r3, #8]
10006f8a:	68fb      	ldr	r3, [r7, #12]
10006f8c:	681b      	ldr	r3, [r3, #0]
10006f8e:	f022 0201 	bic.w	r2, r2, #1
10006f92:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
10006f94:	68fb      	ldr	r3, [r7, #12]
10006f96:	2220      	movs	r2, #32
10006f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
10006f9c:	68fb      	ldr	r3, [r7, #12]
10006f9e:	2220      	movs	r2, #32
10006fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
10006fa4:	68fb      	ldr	r3, [r7, #12]
10006fa6:	2200      	movs	r2, #0
10006fa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
10006fac:	2303      	movs	r3, #3
10006fae:	e045      	b.n	1000703c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
10006fb0:	68fb      	ldr	r3, [r7, #12]
10006fb2:	681b      	ldr	r3, [r3, #0]
10006fb4:	681b      	ldr	r3, [r3, #0]
10006fb6:	f003 0304 	and.w	r3, r3, #4
10006fba:	2b00      	cmp	r3, #0
10006fbc:	d02e      	beq.n	1000701c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
10006fbe:	68fb      	ldr	r3, [r7, #12]
10006fc0:	681b      	ldr	r3, [r3, #0]
10006fc2:	69db      	ldr	r3, [r3, #28]
10006fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
10006fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
10006fcc:	d126      	bne.n	1000701c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
10006fce:	68fb      	ldr	r3, [r7, #12]
10006fd0:	681b      	ldr	r3, [r3, #0]
10006fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
10006fd6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
10006fd8:	68fb      	ldr	r3, [r7, #12]
10006fda:	681b      	ldr	r3, [r3, #0]
10006fdc:	681a      	ldr	r2, [r3, #0]
10006fde:	68fb      	ldr	r3, [r7, #12]
10006fe0:	681b      	ldr	r3, [r3, #0]
10006fe2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
10006fe6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
10006fe8:	68fb      	ldr	r3, [r7, #12]
10006fea:	681b      	ldr	r3, [r3, #0]
10006fec:	689a      	ldr	r2, [r3, #8]
10006fee:	68fb      	ldr	r3, [r7, #12]
10006ff0:	681b      	ldr	r3, [r3, #0]
10006ff2:	f022 0201 	bic.w	r2, r2, #1
10006ff6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
10006ff8:	68fb      	ldr	r3, [r7, #12]
10006ffa:	2220      	movs	r2, #32
10006ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
10007000:	68fb      	ldr	r3, [r7, #12]
10007002:	2220      	movs	r2, #32
10007004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
10007008:	68fb      	ldr	r3, [r7, #12]
1000700a:	2220      	movs	r2, #32
1000700c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
10007010:	68fb      	ldr	r3, [r7, #12]
10007012:	2200      	movs	r2, #0
10007014:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
          
          return HAL_TIMEOUT;
10007018:	2303      	movs	r3, #3
1000701a:	e00f      	b.n	1000703c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
1000701c:	68fb      	ldr	r3, [r7, #12]
1000701e:	681b      	ldr	r3, [r3, #0]
10007020:	69da      	ldr	r2, [r3, #28]
10007022:	68bb      	ldr	r3, [r7, #8]
10007024:	4013      	ands	r3, r2
10007026:	68ba      	ldr	r2, [r7, #8]
10007028:	429a      	cmp	r2, r3
1000702a:	bf0c      	ite	eq
1000702c:	2301      	moveq	r3, #1
1000702e:	2300      	movne	r3, #0
10007030:	b2db      	uxtb	r3, r3
10007032:	461a      	mov	r2, r3
10007034:	79fb      	ldrb	r3, [r7, #7]
10007036:	429a      	cmp	r2, r3
10007038:	d08d      	beq.n	10006f56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
1000703a:	2300      	movs	r3, #0
}
1000703c:	4618      	mov	r0, r3
1000703e:	3710      	adds	r7, #16
10007040:	46bd      	mov	sp, r7
10007042:	bd80      	pop	{r7, pc}

10007044 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
10007044:	b480      	push	{r7}
10007046:	b085      	sub	sp, #20
10007048:	af00      	add	r7, sp, #0
1000704a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
1000704c:	687b      	ldr	r3, [r7, #4]
1000704e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10007052:	2b01      	cmp	r3, #1
10007054:	d101      	bne.n	1000705a <HAL_UARTEx_DisableFifoMode+0x16>
10007056:	2302      	movs	r3, #2
10007058:	e027      	b.n	100070aa <HAL_UARTEx_DisableFifoMode+0x66>
1000705a:	687b      	ldr	r3, [r7, #4]
1000705c:	2201      	movs	r2, #1
1000705e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10007062:	687b      	ldr	r3, [r7, #4]
10007064:	2224      	movs	r2, #36	; 0x24
10007066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000706a:	687b      	ldr	r3, [r7, #4]
1000706c:	681b      	ldr	r3, [r3, #0]
1000706e:	681b      	ldr	r3, [r3, #0]
10007070:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10007072:	687b      	ldr	r3, [r7, #4]
10007074:	681b      	ldr	r3, [r3, #0]
10007076:	681a      	ldr	r2, [r3, #0]
10007078:	687b      	ldr	r3, [r7, #4]
1000707a:	681b      	ldr	r3, [r3, #0]
1000707c:	f022 0201 	bic.w	r2, r2, #1
10007080:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
10007082:	68fb      	ldr	r3, [r7, #12]
10007084:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
10007088:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
1000708a:	687b      	ldr	r3, [r7, #4]
1000708c:	2200      	movs	r2, #0
1000708e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10007090:	687b      	ldr	r3, [r7, #4]
10007092:	681b      	ldr	r3, [r3, #0]
10007094:	68fa      	ldr	r2, [r7, #12]
10007096:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10007098:	687b      	ldr	r3, [r7, #4]
1000709a:	2220      	movs	r2, #32
1000709c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
100070a0:	687b      	ldr	r3, [r7, #4]
100070a2:	2200      	movs	r2, #0
100070a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
100070a8:	2300      	movs	r3, #0
}
100070aa:	4618      	mov	r0, r3
100070ac:	3714      	adds	r7, #20
100070ae:	46bd      	mov	sp, r7
100070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
100070b4:	4770      	bx	lr

100070b6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
100070b6:	b580      	push	{r7, lr}
100070b8:	b084      	sub	sp, #16
100070ba:	af00      	add	r7, sp, #0
100070bc:	6078      	str	r0, [r7, #4]
100070be:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
100070c0:	687b      	ldr	r3, [r7, #4]
100070c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
100070c6:	2b01      	cmp	r3, #1
100070c8:	d101      	bne.n	100070ce <HAL_UARTEx_SetTxFifoThreshold+0x18>
100070ca:	2302      	movs	r3, #2
100070cc:	e02d      	b.n	1000712a <HAL_UARTEx_SetTxFifoThreshold+0x74>
100070ce:	687b      	ldr	r3, [r7, #4]
100070d0:	2201      	movs	r2, #1
100070d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
100070d6:	687b      	ldr	r3, [r7, #4]
100070d8:	2224      	movs	r2, #36	; 0x24
100070da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
100070de:	687b      	ldr	r3, [r7, #4]
100070e0:	681b      	ldr	r3, [r3, #0]
100070e2:	681b      	ldr	r3, [r3, #0]
100070e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
100070e6:	687b      	ldr	r3, [r7, #4]
100070e8:	681b      	ldr	r3, [r3, #0]
100070ea:	681a      	ldr	r2, [r3, #0]
100070ec:	687b      	ldr	r3, [r7, #4]
100070ee:	681b      	ldr	r3, [r3, #0]
100070f0:	f022 0201 	bic.w	r2, r2, #1
100070f4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
100070f6:	687b      	ldr	r3, [r7, #4]
100070f8:	681b      	ldr	r3, [r3, #0]
100070fa:	689b      	ldr	r3, [r3, #8]
100070fc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
10007100:	687b      	ldr	r3, [r7, #4]
10007102:	681b      	ldr	r3, [r3, #0]
10007104:	683a      	ldr	r2, [r7, #0]
10007106:	430a      	orrs	r2, r1
10007108:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
1000710a:	6878      	ldr	r0, [r7, #4]
1000710c:	f000 f850 	bl	100071b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
10007110:	687b      	ldr	r3, [r7, #4]
10007112:	681b      	ldr	r3, [r3, #0]
10007114:	68fa      	ldr	r2, [r7, #12]
10007116:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10007118:	687b      	ldr	r3, [r7, #4]
1000711a:	2220      	movs	r2, #32
1000711c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
10007120:	687b      	ldr	r3, [r7, #4]
10007122:	2200      	movs	r2, #0
10007124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
10007128:	2300      	movs	r3, #0
}
1000712a:	4618      	mov	r0, r3
1000712c:	3710      	adds	r7, #16
1000712e:	46bd      	mov	sp, r7
10007130:	bd80      	pop	{r7, pc}

10007132 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
10007132:	b580      	push	{r7, lr}
10007134:	b084      	sub	sp, #16
10007136:	af00      	add	r7, sp, #0
10007138:	6078      	str	r0, [r7, #4]
1000713a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
1000713c:	687b      	ldr	r3, [r7, #4]
1000713e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
10007142:	2b01      	cmp	r3, #1
10007144:	d101      	bne.n	1000714a <HAL_UARTEx_SetRxFifoThreshold+0x18>
10007146:	2302      	movs	r3, #2
10007148:	e02d      	b.n	100071a6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
1000714a:	687b      	ldr	r3, [r7, #4]
1000714c:	2201      	movs	r2, #1
1000714e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
10007152:	687b      	ldr	r3, [r7, #4]
10007154:	2224      	movs	r2, #36	; 0x24
10007156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
1000715a:	687b      	ldr	r3, [r7, #4]
1000715c:	681b      	ldr	r3, [r3, #0]
1000715e:	681b      	ldr	r3, [r3, #0]
10007160:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
10007162:	687b      	ldr	r3, [r7, #4]
10007164:	681b      	ldr	r3, [r3, #0]
10007166:	681a      	ldr	r2, [r3, #0]
10007168:	687b      	ldr	r3, [r7, #4]
1000716a:	681b      	ldr	r3, [r3, #0]
1000716c:	f022 0201 	bic.w	r2, r2, #1
10007170:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
10007172:	687b      	ldr	r3, [r7, #4]
10007174:	681b      	ldr	r3, [r3, #0]
10007176:	689b      	ldr	r3, [r3, #8]
10007178:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
1000717c:	687b      	ldr	r3, [r7, #4]
1000717e:	681b      	ldr	r3, [r3, #0]
10007180:	683a      	ldr	r2, [r7, #0]
10007182:	430a      	orrs	r2, r1
10007184:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
10007186:	6878      	ldr	r0, [r7, #4]
10007188:	f000 f812 	bl	100071b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
1000718c:	687b      	ldr	r3, [r7, #4]
1000718e:	681b      	ldr	r3, [r3, #0]
10007190:	68fa      	ldr	r2, [r7, #12]
10007192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
10007194:	687b      	ldr	r3, [r7, #4]
10007196:	2220      	movs	r2, #32
10007198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
1000719c:	687b      	ldr	r3, [r7, #4]
1000719e:	2200      	movs	r2, #0
100071a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
100071a4:	2300      	movs	r3, #0
}
100071a6:	4618      	mov	r0, r3
100071a8:	3710      	adds	r7, #16
100071aa:	46bd      	mov	sp, r7
100071ac:	bd80      	pop	{r7, pc}
	...

100071b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
100071b0:	b480      	push	{r7}
100071b2:	b089      	sub	sp, #36	; 0x24
100071b4:	af00      	add	r7, sp, #0
100071b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
100071b8:	4a2d      	ldr	r2, [pc, #180]	; (10007270 <UARTEx_SetNbDataToProcess+0xc0>)
100071ba:	f107 0314 	add.w	r3, r7, #20
100071be:	e892 0003 	ldmia.w	r2, {r0, r1}
100071c2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
100071c6:	4a2b      	ldr	r2, [pc, #172]	; (10007274 <UARTEx_SetNbDataToProcess+0xc4>)
100071c8:	f107 030c 	add.w	r3, r7, #12
100071cc:	e892 0003 	ldmia.w	r2, {r0, r1}
100071d0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
100071d4:	687b      	ldr	r3, [r7, #4]
100071d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
100071d8:	2b00      	cmp	r3, #0
100071da:	d108      	bne.n	100071ee <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
100071dc:	687b      	ldr	r3, [r7, #4]
100071de:	2201      	movs	r2, #1
100071e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
100071e4:	687b      	ldr	r3, [r7, #4]
100071e6:	2201      	movs	r2, #1
100071e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
100071ec:	e039      	b.n	10007262 <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
100071ee:	2308      	movs	r3, #8
100071f0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
100071f2:	2308      	movs	r3, #8
100071f4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
100071f6:	687b      	ldr	r3, [r7, #4]
100071f8:	681b      	ldr	r3, [r3, #0]
100071fa:	689b      	ldr	r3, [r3, #8]
100071fc:	0e5b      	lsrs	r3, r3, #25
100071fe:	b2db      	uxtb	r3, r3
10007200:	f003 0307 	and.w	r3, r3, #7
10007204:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
10007206:	687b      	ldr	r3, [r7, #4]
10007208:	681b      	ldr	r3, [r3, #0]
1000720a:	689b      	ldr	r3, [r3, #8]
1000720c:	0f5b      	lsrs	r3, r3, #29
1000720e:	b2db      	uxtb	r3, r3
10007210:	f003 0307 	and.w	r3, r3, #7
10007214:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
10007216:	7fbb      	ldrb	r3, [r7, #30]
10007218:	7f3a      	ldrb	r2, [r7, #28]
1000721a:	3220      	adds	r2, #32
1000721c:	443a      	add	r2, r7
1000721e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
10007222:	fb02 f303 	mul.w	r3, r2, r3
10007226:	7f3a      	ldrb	r2, [r7, #28]
10007228:	3220      	adds	r2, #32
1000722a:	443a      	add	r2, r7
1000722c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
10007230:	fb93 f3f2 	sdiv	r3, r3, r2
10007234:	b29a      	uxth	r2, r3
10007236:	687b      	ldr	r3, [r7, #4]
10007238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
1000723c:	7ffb      	ldrb	r3, [r7, #31]
1000723e:	7f7a      	ldrb	r2, [r7, #29]
10007240:	3220      	adds	r2, #32
10007242:	443a      	add	r2, r7
10007244:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
10007248:	fb02 f303 	mul.w	r3, r2, r3
1000724c:	7f7a      	ldrb	r2, [r7, #29]
1000724e:	3220      	adds	r2, #32
10007250:	443a      	add	r2, r7
10007252:	f812 2c14 	ldrb.w	r2, [r2, #-20]
10007256:	fb93 f3f2 	sdiv	r3, r3, r2
1000725a:	b29a      	uxth	r2, r3
1000725c:	687b      	ldr	r3, [r7, #4]
1000725e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
10007262:	bf00      	nop
10007264:	3724      	adds	r7, #36	; 0x24
10007266:	46bd      	mov	sp, r7
10007268:	f85d 7b04 	ldr.w	r7, [sp], #4
1000726c:	4770      	bx	lr
1000726e:	bf00      	nop
10007270:	1000bbac 	.word	0x1000bbac
10007274:	1000bbb4 	.word	0x1000bbb4

10007278 <__cvt>:
10007278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1000727c:	ec55 4b10 	vmov	r4, r5, d0
10007280:	2d00      	cmp	r5, #0
10007282:	460e      	mov	r6, r1
10007284:	4619      	mov	r1, r3
10007286:	462b      	mov	r3, r5
10007288:	bfbb      	ittet	lt
1000728a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
1000728e:	461d      	movlt	r5, r3
10007290:	2300      	movge	r3, #0
10007292:	232d      	movlt	r3, #45	; 0x2d
10007294:	700b      	strb	r3, [r1, #0]
10007296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10007298:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
1000729c:	4691      	mov	r9, r2
1000729e:	f023 0820 	bic.w	r8, r3, #32
100072a2:	bfbc      	itt	lt
100072a4:	4622      	movlt	r2, r4
100072a6:	4614      	movlt	r4, r2
100072a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
100072ac:	d005      	beq.n	100072ba <__cvt+0x42>
100072ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
100072b2:	d100      	bne.n	100072b6 <__cvt+0x3e>
100072b4:	3601      	adds	r6, #1
100072b6:	2102      	movs	r1, #2
100072b8:	e000      	b.n	100072bc <__cvt+0x44>
100072ba:	2103      	movs	r1, #3
100072bc:	ab03      	add	r3, sp, #12
100072be:	9301      	str	r3, [sp, #4]
100072c0:	ab02      	add	r3, sp, #8
100072c2:	9300      	str	r3, [sp, #0]
100072c4:	ec45 4b10 	vmov	d0, r4, r5
100072c8:	4653      	mov	r3, sl
100072ca:	4632      	mov	r2, r6
100072cc:	f001 f890 	bl	100083f0 <_dtoa_r>
100072d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
100072d4:	4607      	mov	r7, r0
100072d6:	d102      	bne.n	100072de <__cvt+0x66>
100072d8:	f019 0f01 	tst.w	r9, #1
100072dc:	d022      	beq.n	10007324 <__cvt+0xac>
100072de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
100072e2:	eb07 0906 	add.w	r9, r7, r6
100072e6:	d110      	bne.n	1000730a <__cvt+0x92>
100072e8:	783b      	ldrb	r3, [r7, #0]
100072ea:	2b30      	cmp	r3, #48	; 0x30
100072ec:	d10a      	bne.n	10007304 <__cvt+0x8c>
100072ee:	2200      	movs	r2, #0
100072f0:	2300      	movs	r3, #0
100072f2:	4620      	mov	r0, r4
100072f4:	4629      	mov	r1, r5
100072f6:	f7f9 fb1f 	bl	10000938 <__aeabi_dcmpeq>
100072fa:	b918      	cbnz	r0, 10007304 <__cvt+0x8c>
100072fc:	f1c6 0601 	rsb	r6, r6, #1
10007300:	f8ca 6000 	str.w	r6, [sl]
10007304:	f8da 3000 	ldr.w	r3, [sl]
10007308:	4499      	add	r9, r3
1000730a:	2200      	movs	r2, #0
1000730c:	2300      	movs	r3, #0
1000730e:	4620      	mov	r0, r4
10007310:	4629      	mov	r1, r5
10007312:	f7f9 fb11 	bl	10000938 <__aeabi_dcmpeq>
10007316:	b108      	cbz	r0, 1000731c <__cvt+0xa4>
10007318:	f8cd 900c 	str.w	r9, [sp, #12]
1000731c:	2230      	movs	r2, #48	; 0x30
1000731e:	9b03      	ldr	r3, [sp, #12]
10007320:	454b      	cmp	r3, r9
10007322:	d307      	bcc.n	10007334 <__cvt+0xbc>
10007324:	9b03      	ldr	r3, [sp, #12]
10007326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10007328:	1bdb      	subs	r3, r3, r7
1000732a:	4638      	mov	r0, r7
1000732c:	6013      	str	r3, [r2, #0]
1000732e:	b004      	add	sp, #16
10007330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10007334:	1c59      	adds	r1, r3, #1
10007336:	9103      	str	r1, [sp, #12]
10007338:	701a      	strb	r2, [r3, #0]
1000733a:	e7f0      	b.n	1000731e <__cvt+0xa6>

1000733c <__exponent>:
1000733c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000733e:	4603      	mov	r3, r0
10007340:	2900      	cmp	r1, #0
10007342:	bfb8      	it	lt
10007344:	4249      	neglt	r1, r1
10007346:	f803 2b02 	strb.w	r2, [r3], #2
1000734a:	bfb4      	ite	lt
1000734c:	222d      	movlt	r2, #45	; 0x2d
1000734e:	222b      	movge	r2, #43	; 0x2b
10007350:	2909      	cmp	r1, #9
10007352:	7042      	strb	r2, [r0, #1]
10007354:	dd2a      	ble.n	100073ac <__exponent+0x70>
10007356:	f10d 0207 	add.w	r2, sp, #7
1000735a:	4617      	mov	r7, r2
1000735c:	260a      	movs	r6, #10
1000735e:	4694      	mov	ip, r2
10007360:	fb91 f5f6 	sdiv	r5, r1, r6
10007364:	fb06 1415 	mls	r4, r6, r5, r1
10007368:	3430      	adds	r4, #48	; 0x30
1000736a:	f80c 4c01 	strb.w	r4, [ip, #-1]
1000736e:	460c      	mov	r4, r1
10007370:	2c63      	cmp	r4, #99	; 0x63
10007372:	f102 32ff 	add.w	r2, r2, #4294967295
10007376:	4629      	mov	r1, r5
10007378:	dcf1      	bgt.n	1000735e <__exponent+0x22>
1000737a:	3130      	adds	r1, #48	; 0x30
1000737c:	f1ac 0402 	sub.w	r4, ip, #2
10007380:	f802 1c01 	strb.w	r1, [r2, #-1]
10007384:	1c41      	adds	r1, r0, #1
10007386:	4622      	mov	r2, r4
10007388:	42ba      	cmp	r2, r7
1000738a:	d30a      	bcc.n	100073a2 <__exponent+0x66>
1000738c:	f10d 0209 	add.w	r2, sp, #9
10007390:	eba2 020c 	sub.w	r2, r2, ip
10007394:	42bc      	cmp	r4, r7
10007396:	bf88      	it	hi
10007398:	2200      	movhi	r2, #0
1000739a:	4413      	add	r3, r2
1000739c:	1a18      	subs	r0, r3, r0
1000739e:	b003      	add	sp, #12
100073a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100073a2:	f812 5b01 	ldrb.w	r5, [r2], #1
100073a6:	f801 5f01 	strb.w	r5, [r1, #1]!
100073aa:	e7ed      	b.n	10007388 <__exponent+0x4c>
100073ac:	2330      	movs	r3, #48	; 0x30
100073ae:	3130      	adds	r1, #48	; 0x30
100073b0:	7083      	strb	r3, [r0, #2]
100073b2:	70c1      	strb	r1, [r0, #3]
100073b4:	1d03      	adds	r3, r0, #4
100073b6:	e7f1      	b.n	1000739c <__exponent+0x60>

100073b8 <_printf_float>:
100073b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100073bc:	ed2d 8b02 	vpush	{d8}
100073c0:	b08d      	sub	sp, #52	; 0x34
100073c2:	460c      	mov	r4, r1
100073c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
100073c8:	4616      	mov	r6, r2
100073ca:	461f      	mov	r7, r3
100073cc:	4605      	mov	r5, r0
100073ce:	f000 ff09 	bl	100081e4 <_localeconv_r>
100073d2:	f8d0 a000 	ldr.w	sl, [r0]
100073d6:	4650      	mov	r0, sl
100073d8:	f7f8 fe82 	bl	100000e0 <strlen>
100073dc:	2300      	movs	r3, #0
100073de:	930a      	str	r3, [sp, #40]	; 0x28
100073e0:	6823      	ldr	r3, [r4, #0]
100073e2:	9305      	str	r3, [sp, #20]
100073e4:	f8d8 3000 	ldr.w	r3, [r8]
100073e8:	f894 b018 	ldrb.w	fp, [r4, #24]
100073ec:	3307      	adds	r3, #7
100073ee:	f023 0307 	bic.w	r3, r3, #7
100073f2:	f103 0208 	add.w	r2, r3, #8
100073f6:	f8c8 2000 	str.w	r2, [r8]
100073fa:	e9d3 8900 	ldrd	r8, r9, [r3]
100073fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
10007402:	9307      	str	r3, [sp, #28]
10007404:	f8cd 8018 	str.w	r8, [sp, #24]
10007408:	ee08 0a10 	vmov	s16, r0
1000740c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
10007410:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
10007414:	4b9e      	ldr	r3, [pc, #632]	; (10007690 <_printf_float+0x2d8>)
10007416:	f04f 32ff 	mov.w	r2, #4294967295
1000741a:	f7f9 fabf 	bl	1000099c <__aeabi_dcmpun>
1000741e:	bb88      	cbnz	r0, 10007484 <_printf_float+0xcc>
10007420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
10007424:	4b9a      	ldr	r3, [pc, #616]	; (10007690 <_printf_float+0x2d8>)
10007426:	f04f 32ff 	mov.w	r2, #4294967295
1000742a:	f7f9 fa99 	bl	10000960 <__aeabi_dcmple>
1000742e:	bb48      	cbnz	r0, 10007484 <_printf_float+0xcc>
10007430:	2200      	movs	r2, #0
10007432:	2300      	movs	r3, #0
10007434:	4640      	mov	r0, r8
10007436:	4649      	mov	r1, r9
10007438:	f7f9 fa88 	bl	1000094c <__aeabi_dcmplt>
1000743c:	b110      	cbz	r0, 10007444 <_printf_float+0x8c>
1000743e:	232d      	movs	r3, #45	; 0x2d
10007440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
10007444:	4a93      	ldr	r2, [pc, #588]	; (10007694 <_printf_float+0x2dc>)
10007446:	4b94      	ldr	r3, [pc, #592]	; (10007698 <_printf_float+0x2e0>)
10007448:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
1000744c:	bf94      	ite	ls
1000744e:	4690      	movls	r8, r2
10007450:	4698      	movhi	r8, r3
10007452:	2303      	movs	r3, #3
10007454:	6123      	str	r3, [r4, #16]
10007456:	9b05      	ldr	r3, [sp, #20]
10007458:	f023 0304 	bic.w	r3, r3, #4
1000745c:	6023      	str	r3, [r4, #0]
1000745e:	f04f 0900 	mov.w	r9, #0
10007462:	9700      	str	r7, [sp, #0]
10007464:	4633      	mov	r3, r6
10007466:	aa0b      	add	r2, sp, #44	; 0x2c
10007468:	4621      	mov	r1, r4
1000746a:	4628      	mov	r0, r5
1000746c:	f000 f9da 	bl	10007824 <_printf_common>
10007470:	3001      	adds	r0, #1
10007472:	f040 8090 	bne.w	10007596 <_printf_float+0x1de>
10007476:	f04f 30ff 	mov.w	r0, #4294967295
1000747a:	b00d      	add	sp, #52	; 0x34
1000747c:	ecbd 8b02 	vpop	{d8}
10007480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10007484:	4642      	mov	r2, r8
10007486:	464b      	mov	r3, r9
10007488:	4640      	mov	r0, r8
1000748a:	4649      	mov	r1, r9
1000748c:	f7f9 fa86 	bl	1000099c <__aeabi_dcmpun>
10007490:	b140      	cbz	r0, 100074a4 <_printf_float+0xec>
10007492:	464b      	mov	r3, r9
10007494:	2b00      	cmp	r3, #0
10007496:	bfbc      	itt	lt
10007498:	232d      	movlt	r3, #45	; 0x2d
1000749a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
1000749e:	4a7f      	ldr	r2, [pc, #508]	; (1000769c <_printf_float+0x2e4>)
100074a0:	4b7f      	ldr	r3, [pc, #508]	; (100076a0 <_printf_float+0x2e8>)
100074a2:	e7d1      	b.n	10007448 <_printf_float+0x90>
100074a4:	6863      	ldr	r3, [r4, #4]
100074a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
100074aa:	9206      	str	r2, [sp, #24]
100074ac:	1c5a      	adds	r2, r3, #1
100074ae:	d13f      	bne.n	10007530 <_printf_float+0x178>
100074b0:	2306      	movs	r3, #6
100074b2:	6063      	str	r3, [r4, #4]
100074b4:	9b05      	ldr	r3, [sp, #20]
100074b6:	6861      	ldr	r1, [r4, #4]
100074b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
100074bc:	2300      	movs	r3, #0
100074be:	9303      	str	r3, [sp, #12]
100074c0:	ab0a      	add	r3, sp, #40	; 0x28
100074c2:	e9cd b301 	strd	fp, r3, [sp, #4]
100074c6:	ab09      	add	r3, sp, #36	; 0x24
100074c8:	ec49 8b10 	vmov	d0, r8, r9
100074cc:	9300      	str	r3, [sp, #0]
100074ce:	6022      	str	r2, [r4, #0]
100074d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
100074d4:	4628      	mov	r0, r5
100074d6:	f7ff fecf 	bl	10007278 <__cvt>
100074da:	9b06      	ldr	r3, [sp, #24]
100074dc:	9909      	ldr	r1, [sp, #36]	; 0x24
100074de:	2b47      	cmp	r3, #71	; 0x47
100074e0:	4680      	mov	r8, r0
100074e2:	d108      	bne.n	100074f6 <_printf_float+0x13e>
100074e4:	1cc8      	adds	r0, r1, #3
100074e6:	db02      	blt.n	100074ee <_printf_float+0x136>
100074e8:	6863      	ldr	r3, [r4, #4]
100074ea:	4299      	cmp	r1, r3
100074ec:	dd41      	ble.n	10007572 <_printf_float+0x1ba>
100074ee:	f1ab 0302 	sub.w	r3, fp, #2
100074f2:	fa5f fb83 	uxtb.w	fp, r3
100074f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
100074fa:	d820      	bhi.n	1000753e <_printf_float+0x186>
100074fc:	3901      	subs	r1, #1
100074fe:	465a      	mov	r2, fp
10007500:	f104 0050 	add.w	r0, r4, #80	; 0x50
10007504:	9109      	str	r1, [sp, #36]	; 0x24
10007506:	f7ff ff19 	bl	1000733c <__exponent>
1000750a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000750c:	1813      	adds	r3, r2, r0
1000750e:	2a01      	cmp	r2, #1
10007510:	4681      	mov	r9, r0
10007512:	6123      	str	r3, [r4, #16]
10007514:	dc02      	bgt.n	1000751c <_printf_float+0x164>
10007516:	6822      	ldr	r2, [r4, #0]
10007518:	07d2      	lsls	r2, r2, #31
1000751a:	d501      	bpl.n	10007520 <_printf_float+0x168>
1000751c:	3301      	adds	r3, #1
1000751e:	6123      	str	r3, [r4, #16]
10007520:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
10007524:	2b00      	cmp	r3, #0
10007526:	d09c      	beq.n	10007462 <_printf_float+0xaa>
10007528:	232d      	movs	r3, #45	; 0x2d
1000752a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1000752e:	e798      	b.n	10007462 <_printf_float+0xaa>
10007530:	9a06      	ldr	r2, [sp, #24]
10007532:	2a47      	cmp	r2, #71	; 0x47
10007534:	d1be      	bne.n	100074b4 <_printf_float+0xfc>
10007536:	2b00      	cmp	r3, #0
10007538:	d1bc      	bne.n	100074b4 <_printf_float+0xfc>
1000753a:	2301      	movs	r3, #1
1000753c:	e7b9      	b.n	100074b2 <_printf_float+0xfa>
1000753e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
10007542:	d118      	bne.n	10007576 <_printf_float+0x1be>
10007544:	2900      	cmp	r1, #0
10007546:	6863      	ldr	r3, [r4, #4]
10007548:	dd0b      	ble.n	10007562 <_printf_float+0x1aa>
1000754a:	6121      	str	r1, [r4, #16]
1000754c:	b913      	cbnz	r3, 10007554 <_printf_float+0x19c>
1000754e:	6822      	ldr	r2, [r4, #0]
10007550:	07d0      	lsls	r0, r2, #31
10007552:	d502      	bpl.n	1000755a <_printf_float+0x1a2>
10007554:	3301      	adds	r3, #1
10007556:	440b      	add	r3, r1
10007558:	6123      	str	r3, [r4, #16]
1000755a:	65a1      	str	r1, [r4, #88]	; 0x58
1000755c:	f04f 0900 	mov.w	r9, #0
10007560:	e7de      	b.n	10007520 <_printf_float+0x168>
10007562:	b913      	cbnz	r3, 1000756a <_printf_float+0x1b2>
10007564:	6822      	ldr	r2, [r4, #0]
10007566:	07d2      	lsls	r2, r2, #31
10007568:	d501      	bpl.n	1000756e <_printf_float+0x1b6>
1000756a:	3302      	adds	r3, #2
1000756c:	e7f4      	b.n	10007558 <_printf_float+0x1a0>
1000756e:	2301      	movs	r3, #1
10007570:	e7f2      	b.n	10007558 <_printf_float+0x1a0>
10007572:	f04f 0b67 	mov.w	fp, #103	; 0x67
10007576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10007578:	4299      	cmp	r1, r3
1000757a:	db05      	blt.n	10007588 <_printf_float+0x1d0>
1000757c:	6823      	ldr	r3, [r4, #0]
1000757e:	6121      	str	r1, [r4, #16]
10007580:	07d8      	lsls	r0, r3, #31
10007582:	d5ea      	bpl.n	1000755a <_printf_float+0x1a2>
10007584:	1c4b      	adds	r3, r1, #1
10007586:	e7e7      	b.n	10007558 <_printf_float+0x1a0>
10007588:	2900      	cmp	r1, #0
1000758a:	bfd4      	ite	le
1000758c:	f1c1 0202 	rsble	r2, r1, #2
10007590:	2201      	movgt	r2, #1
10007592:	4413      	add	r3, r2
10007594:	e7e0      	b.n	10007558 <_printf_float+0x1a0>
10007596:	6823      	ldr	r3, [r4, #0]
10007598:	055a      	lsls	r2, r3, #21
1000759a:	d407      	bmi.n	100075ac <_printf_float+0x1f4>
1000759c:	6923      	ldr	r3, [r4, #16]
1000759e:	4642      	mov	r2, r8
100075a0:	4631      	mov	r1, r6
100075a2:	4628      	mov	r0, r5
100075a4:	47b8      	blx	r7
100075a6:	3001      	adds	r0, #1
100075a8:	d12c      	bne.n	10007604 <_printf_float+0x24c>
100075aa:	e764      	b.n	10007476 <_printf_float+0xbe>
100075ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
100075b0:	f240 80e0 	bls.w	10007774 <_printf_float+0x3bc>
100075b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
100075b8:	2200      	movs	r2, #0
100075ba:	2300      	movs	r3, #0
100075bc:	f7f9 f9bc 	bl	10000938 <__aeabi_dcmpeq>
100075c0:	2800      	cmp	r0, #0
100075c2:	d034      	beq.n	1000762e <_printf_float+0x276>
100075c4:	4a37      	ldr	r2, [pc, #220]	; (100076a4 <_printf_float+0x2ec>)
100075c6:	2301      	movs	r3, #1
100075c8:	4631      	mov	r1, r6
100075ca:	4628      	mov	r0, r5
100075cc:	47b8      	blx	r7
100075ce:	3001      	adds	r0, #1
100075d0:	f43f af51 	beq.w	10007476 <_printf_float+0xbe>
100075d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
100075d8:	429a      	cmp	r2, r3
100075da:	db02      	blt.n	100075e2 <_printf_float+0x22a>
100075dc:	6823      	ldr	r3, [r4, #0]
100075de:	07d8      	lsls	r0, r3, #31
100075e0:	d510      	bpl.n	10007604 <_printf_float+0x24c>
100075e2:	ee18 3a10 	vmov	r3, s16
100075e6:	4652      	mov	r2, sl
100075e8:	4631      	mov	r1, r6
100075ea:	4628      	mov	r0, r5
100075ec:	47b8      	blx	r7
100075ee:	3001      	adds	r0, #1
100075f0:	f43f af41 	beq.w	10007476 <_printf_float+0xbe>
100075f4:	f04f 0800 	mov.w	r8, #0
100075f8:	f104 091a 	add.w	r9, r4, #26
100075fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100075fe:	3b01      	subs	r3, #1
10007600:	4543      	cmp	r3, r8
10007602:	dc09      	bgt.n	10007618 <_printf_float+0x260>
10007604:	6823      	ldr	r3, [r4, #0]
10007606:	079b      	lsls	r3, r3, #30
10007608:	f100 8107 	bmi.w	1000781a <_printf_float+0x462>
1000760c:	68e0      	ldr	r0, [r4, #12]
1000760e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10007610:	4298      	cmp	r0, r3
10007612:	bfb8      	it	lt
10007614:	4618      	movlt	r0, r3
10007616:	e730      	b.n	1000747a <_printf_float+0xc2>
10007618:	2301      	movs	r3, #1
1000761a:	464a      	mov	r2, r9
1000761c:	4631      	mov	r1, r6
1000761e:	4628      	mov	r0, r5
10007620:	47b8      	blx	r7
10007622:	3001      	adds	r0, #1
10007624:	f43f af27 	beq.w	10007476 <_printf_float+0xbe>
10007628:	f108 0801 	add.w	r8, r8, #1
1000762c:	e7e6      	b.n	100075fc <_printf_float+0x244>
1000762e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10007630:	2b00      	cmp	r3, #0
10007632:	dc39      	bgt.n	100076a8 <_printf_float+0x2f0>
10007634:	4a1b      	ldr	r2, [pc, #108]	; (100076a4 <_printf_float+0x2ec>)
10007636:	2301      	movs	r3, #1
10007638:	4631      	mov	r1, r6
1000763a:	4628      	mov	r0, r5
1000763c:	47b8      	blx	r7
1000763e:	3001      	adds	r0, #1
10007640:	f43f af19 	beq.w	10007476 <_printf_float+0xbe>
10007644:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
10007648:	4313      	orrs	r3, r2
1000764a:	d102      	bne.n	10007652 <_printf_float+0x29a>
1000764c:	6823      	ldr	r3, [r4, #0]
1000764e:	07d9      	lsls	r1, r3, #31
10007650:	d5d8      	bpl.n	10007604 <_printf_float+0x24c>
10007652:	ee18 3a10 	vmov	r3, s16
10007656:	4652      	mov	r2, sl
10007658:	4631      	mov	r1, r6
1000765a:	4628      	mov	r0, r5
1000765c:	47b8      	blx	r7
1000765e:	3001      	adds	r0, #1
10007660:	f43f af09 	beq.w	10007476 <_printf_float+0xbe>
10007664:	f04f 0900 	mov.w	r9, #0
10007668:	f104 0a1a 	add.w	sl, r4, #26
1000766c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000766e:	425b      	negs	r3, r3
10007670:	454b      	cmp	r3, r9
10007672:	dc01      	bgt.n	10007678 <_printf_float+0x2c0>
10007674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10007676:	e792      	b.n	1000759e <_printf_float+0x1e6>
10007678:	2301      	movs	r3, #1
1000767a:	4652      	mov	r2, sl
1000767c:	4631      	mov	r1, r6
1000767e:	4628      	mov	r0, r5
10007680:	47b8      	blx	r7
10007682:	3001      	adds	r0, #1
10007684:	f43f aef7 	beq.w	10007476 <_printf_float+0xbe>
10007688:	f109 0901 	add.w	r9, r9, #1
1000768c:	e7ee      	b.n	1000766c <_printf_float+0x2b4>
1000768e:	bf00      	nop
10007690:	7fefffff 	.word	0x7fefffff
10007694:	1000bbbc 	.word	0x1000bbbc
10007698:	1000bbc0 	.word	0x1000bbc0
1000769c:	1000bbc4 	.word	0x1000bbc4
100076a0:	1000bbc8 	.word	0x1000bbc8
100076a4:	1000bbcc 	.word	0x1000bbcc
100076a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
100076aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
100076ac:	429a      	cmp	r2, r3
100076ae:	bfa8      	it	ge
100076b0:	461a      	movge	r2, r3
100076b2:	2a00      	cmp	r2, #0
100076b4:	4691      	mov	r9, r2
100076b6:	dc37      	bgt.n	10007728 <_printf_float+0x370>
100076b8:	f04f 0b00 	mov.w	fp, #0
100076bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
100076c0:	f104 021a 	add.w	r2, r4, #26
100076c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
100076c6:	9305      	str	r3, [sp, #20]
100076c8:	eba3 0309 	sub.w	r3, r3, r9
100076cc:	455b      	cmp	r3, fp
100076ce:	dc33      	bgt.n	10007738 <_printf_float+0x380>
100076d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
100076d4:	429a      	cmp	r2, r3
100076d6:	db3b      	blt.n	10007750 <_printf_float+0x398>
100076d8:	6823      	ldr	r3, [r4, #0]
100076da:	07da      	lsls	r2, r3, #31
100076dc:	d438      	bmi.n	10007750 <_printf_float+0x398>
100076de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
100076e2:	eba2 0903 	sub.w	r9, r2, r3
100076e6:	9b05      	ldr	r3, [sp, #20]
100076e8:	1ad2      	subs	r2, r2, r3
100076ea:	4591      	cmp	r9, r2
100076ec:	bfa8      	it	ge
100076ee:	4691      	movge	r9, r2
100076f0:	f1b9 0f00 	cmp.w	r9, #0
100076f4:	dc35      	bgt.n	10007762 <_printf_float+0x3aa>
100076f6:	f04f 0800 	mov.w	r8, #0
100076fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
100076fe:	f104 0a1a 	add.w	sl, r4, #26
10007702:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
10007706:	1a9b      	subs	r3, r3, r2
10007708:	eba3 0309 	sub.w	r3, r3, r9
1000770c:	4543      	cmp	r3, r8
1000770e:	f77f af79 	ble.w	10007604 <_printf_float+0x24c>
10007712:	2301      	movs	r3, #1
10007714:	4652      	mov	r2, sl
10007716:	4631      	mov	r1, r6
10007718:	4628      	mov	r0, r5
1000771a:	47b8      	blx	r7
1000771c:	3001      	adds	r0, #1
1000771e:	f43f aeaa 	beq.w	10007476 <_printf_float+0xbe>
10007722:	f108 0801 	add.w	r8, r8, #1
10007726:	e7ec      	b.n	10007702 <_printf_float+0x34a>
10007728:	4613      	mov	r3, r2
1000772a:	4631      	mov	r1, r6
1000772c:	4642      	mov	r2, r8
1000772e:	4628      	mov	r0, r5
10007730:	47b8      	blx	r7
10007732:	3001      	adds	r0, #1
10007734:	d1c0      	bne.n	100076b8 <_printf_float+0x300>
10007736:	e69e      	b.n	10007476 <_printf_float+0xbe>
10007738:	2301      	movs	r3, #1
1000773a:	4631      	mov	r1, r6
1000773c:	4628      	mov	r0, r5
1000773e:	9205      	str	r2, [sp, #20]
10007740:	47b8      	blx	r7
10007742:	3001      	adds	r0, #1
10007744:	f43f ae97 	beq.w	10007476 <_printf_float+0xbe>
10007748:	9a05      	ldr	r2, [sp, #20]
1000774a:	f10b 0b01 	add.w	fp, fp, #1
1000774e:	e7b9      	b.n	100076c4 <_printf_float+0x30c>
10007750:	ee18 3a10 	vmov	r3, s16
10007754:	4652      	mov	r2, sl
10007756:	4631      	mov	r1, r6
10007758:	4628      	mov	r0, r5
1000775a:	47b8      	blx	r7
1000775c:	3001      	adds	r0, #1
1000775e:	d1be      	bne.n	100076de <_printf_float+0x326>
10007760:	e689      	b.n	10007476 <_printf_float+0xbe>
10007762:	9a05      	ldr	r2, [sp, #20]
10007764:	464b      	mov	r3, r9
10007766:	4442      	add	r2, r8
10007768:	4631      	mov	r1, r6
1000776a:	4628      	mov	r0, r5
1000776c:	47b8      	blx	r7
1000776e:	3001      	adds	r0, #1
10007770:	d1c1      	bne.n	100076f6 <_printf_float+0x33e>
10007772:	e680      	b.n	10007476 <_printf_float+0xbe>
10007774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10007776:	2a01      	cmp	r2, #1
10007778:	dc01      	bgt.n	1000777e <_printf_float+0x3c6>
1000777a:	07db      	lsls	r3, r3, #31
1000777c:	d53a      	bpl.n	100077f4 <_printf_float+0x43c>
1000777e:	2301      	movs	r3, #1
10007780:	4642      	mov	r2, r8
10007782:	4631      	mov	r1, r6
10007784:	4628      	mov	r0, r5
10007786:	47b8      	blx	r7
10007788:	3001      	adds	r0, #1
1000778a:	f43f ae74 	beq.w	10007476 <_printf_float+0xbe>
1000778e:	ee18 3a10 	vmov	r3, s16
10007792:	4652      	mov	r2, sl
10007794:	4631      	mov	r1, r6
10007796:	4628      	mov	r0, r5
10007798:	47b8      	blx	r7
1000779a:	3001      	adds	r0, #1
1000779c:	f43f ae6b 	beq.w	10007476 <_printf_float+0xbe>
100077a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
100077a4:	2200      	movs	r2, #0
100077a6:	2300      	movs	r3, #0
100077a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
100077ac:	f7f9 f8c4 	bl	10000938 <__aeabi_dcmpeq>
100077b0:	b9d8      	cbnz	r0, 100077ea <_printf_float+0x432>
100077b2:	f10a 33ff 	add.w	r3, sl, #4294967295
100077b6:	f108 0201 	add.w	r2, r8, #1
100077ba:	4631      	mov	r1, r6
100077bc:	4628      	mov	r0, r5
100077be:	47b8      	blx	r7
100077c0:	3001      	adds	r0, #1
100077c2:	d10e      	bne.n	100077e2 <_printf_float+0x42a>
100077c4:	e657      	b.n	10007476 <_printf_float+0xbe>
100077c6:	2301      	movs	r3, #1
100077c8:	4652      	mov	r2, sl
100077ca:	4631      	mov	r1, r6
100077cc:	4628      	mov	r0, r5
100077ce:	47b8      	blx	r7
100077d0:	3001      	adds	r0, #1
100077d2:	f43f ae50 	beq.w	10007476 <_printf_float+0xbe>
100077d6:	f108 0801 	add.w	r8, r8, #1
100077da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
100077dc:	3b01      	subs	r3, #1
100077de:	4543      	cmp	r3, r8
100077e0:	dcf1      	bgt.n	100077c6 <_printf_float+0x40e>
100077e2:	464b      	mov	r3, r9
100077e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
100077e8:	e6da      	b.n	100075a0 <_printf_float+0x1e8>
100077ea:	f04f 0800 	mov.w	r8, #0
100077ee:	f104 0a1a 	add.w	sl, r4, #26
100077f2:	e7f2      	b.n	100077da <_printf_float+0x422>
100077f4:	2301      	movs	r3, #1
100077f6:	4642      	mov	r2, r8
100077f8:	e7df      	b.n	100077ba <_printf_float+0x402>
100077fa:	2301      	movs	r3, #1
100077fc:	464a      	mov	r2, r9
100077fe:	4631      	mov	r1, r6
10007800:	4628      	mov	r0, r5
10007802:	47b8      	blx	r7
10007804:	3001      	adds	r0, #1
10007806:	f43f ae36 	beq.w	10007476 <_printf_float+0xbe>
1000780a:	f108 0801 	add.w	r8, r8, #1
1000780e:	68e3      	ldr	r3, [r4, #12]
10007810:	990b      	ldr	r1, [sp, #44]	; 0x2c
10007812:	1a5b      	subs	r3, r3, r1
10007814:	4543      	cmp	r3, r8
10007816:	dcf0      	bgt.n	100077fa <_printf_float+0x442>
10007818:	e6f8      	b.n	1000760c <_printf_float+0x254>
1000781a:	f04f 0800 	mov.w	r8, #0
1000781e:	f104 0919 	add.w	r9, r4, #25
10007822:	e7f4      	b.n	1000780e <_printf_float+0x456>

10007824 <_printf_common>:
10007824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
10007828:	4616      	mov	r6, r2
1000782a:	4699      	mov	r9, r3
1000782c:	688a      	ldr	r2, [r1, #8]
1000782e:	690b      	ldr	r3, [r1, #16]
10007830:	f8dd 8020 	ldr.w	r8, [sp, #32]
10007834:	4293      	cmp	r3, r2
10007836:	bfb8      	it	lt
10007838:	4613      	movlt	r3, r2
1000783a:	6033      	str	r3, [r6, #0]
1000783c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
10007840:	4607      	mov	r7, r0
10007842:	460c      	mov	r4, r1
10007844:	b10a      	cbz	r2, 1000784a <_printf_common+0x26>
10007846:	3301      	adds	r3, #1
10007848:	6033      	str	r3, [r6, #0]
1000784a:	6823      	ldr	r3, [r4, #0]
1000784c:	0699      	lsls	r1, r3, #26
1000784e:	bf42      	ittt	mi
10007850:	6833      	ldrmi	r3, [r6, #0]
10007852:	3302      	addmi	r3, #2
10007854:	6033      	strmi	r3, [r6, #0]
10007856:	6825      	ldr	r5, [r4, #0]
10007858:	f015 0506 	ands.w	r5, r5, #6
1000785c:	d106      	bne.n	1000786c <_printf_common+0x48>
1000785e:	f104 0a19 	add.w	sl, r4, #25
10007862:	68e3      	ldr	r3, [r4, #12]
10007864:	6832      	ldr	r2, [r6, #0]
10007866:	1a9b      	subs	r3, r3, r2
10007868:	42ab      	cmp	r3, r5
1000786a:	dc26      	bgt.n	100078ba <_printf_common+0x96>
1000786c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
10007870:	1e13      	subs	r3, r2, #0
10007872:	6822      	ldr	r2, [r4, #0]
10007874:	bf18      	it	ne
10007876:	2301      	movne	r3, #1
10007878:	0692      	lsls	r2, r2, #26
1000787a:	d42b      	bmi.n	100078d4 <_printf_common+0xb0>
1000787c:	f104 0243 	add.w	r2, r4, #67	; 0x43
10007880:	4649      	mov	r1, r9
10007882:	4638      	mov	r0, r7
10007884:	47c0      	blx	r8
10007886:	3001      	adds	r0, #1
10007888:	d01e      	beq.n	100078c8 <_printf_common+0xa4>
1000788a:	6823      	ldr	r3, [r4, #0]
1000788c:	6922      	ldr	r2, [r4, #16]
1000788e:	f003 0306 	and.w	r3, r3, #6
10007892:	2b04      	cmp	r3, #4
10007894:	bf02      	ittt	eq
10007896:	68e5      	ldreq	r5, [r4, #12]
10007898:	6833      	ldreq	r3, [r6, #0]
1000789a:	1aed      	subeq	r5, r5, r3
1000789c:	68a3      	ldr	r3, [r4, #8]
1000789e:	bf0c      	ite	eq
100078a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
100078a4:	2500      	movne	r5, #0
100078a6:	4293      	cmp	r3, r2
100078a8:	bfc4      	itt	gt
100078aa:	1a9b      	subgt	r3, r3, r2
100078ac:	18ed      	addgt	r5, r5, r3
100078ae:	2600      	movs	r6, #0
100078b0:	341a      	adds	r4, #26
100078b2:	42b5      	cmp	r5, r6
100078b4:	d11a      	bne.n	100078ec <_printf_common+0xc8>
100078b6:	2000      	movs	r0, #0
100078b8:	e008      	b.n	100078cc <_printf_common+0xa8>
100078ba:	2301      	movs	r3, #1
100078bc:	4652      	mov	r2, sl
100078be:	4649      	mov	r1, r9
100078c0:	4638      	mov	r0, r7
100078c2:	47c0      	blx	r8
100078c4:	3001      	adds	r0, #1
100078c6:	d103      	bne.n	100078d0 <_printf_common+0xac>
100078c8:	f04f 30ff 	mov.w	r0, #4294967295
100078cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
100078d0:	3501      	adds	r5, #1
100078d2:	e7c6      	b.n	10007862 <_printf_common+0x3e>
100078d4:	18e1      	adds	r1, r4, r3
100078d6:	1c5a      	adds	r2, r3, #1
100078d8:	2030      	movs	r0, #48	; 0x30
100078da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
100078de:	4422      	add	r2, r4
100078e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
100078e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
100078e8:	3302      	adds	r3, #2
100078ea:	e7c7      	b.n	1000787c <_printf_common+0x58>
100078ec:	2301      	movs	r3, #1
100078ee:	4622      	mov	r2, r4
100078f0:	4649      	mov	r1, r9
100078f2:	4638      	mov	r0, r7
100078f4:	47c0      	blx	r8
100078f6:	3001      	adds	r0, #1
100078f8:	d0e6      	beq.n	100078c8 <_printf_common+0xa4>
100078fa:	3601      	adds	r6, #1
100078fc:	e7d9      	b.n	100078b2 <_printf_common+0x8e>
	...

10007900 <_printf_i>:
10007900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
10007904:	7e0f      	ldrb	r7, [r1, #24]
10007906:	9d0c      	ldr	r5, [sp, #48]	; 0x30
10007908:	2f78      	cmp	r7, #120	; 0x78
1000790a:	4691      	mov	r9, r2
1000790c:	4680      	mov	r8, r0
1000790e:	460c      	mov	r4, r1
10007910:	469a      	mov	sl, r3
10007912:	f101 0243 	add.w	r2, r1, #67	; 0x43
10007916:	d807      	bhi.n	10007928 <_printf_i+0x28>
10007918:	2f62      	cmp	r7, #98	; 0x62
1000791a:	d80a      	bhi.n	10007932 <_printf_i+0x32>
1000791c:	2f00      	cmp	r7, #0
1000791e:	f000 80d4 	beq.w	10007aca <_printf_i+0x1ca>
10007922:	2f58      	cmp	r7, #88	; 0x58
10007924:	f000 80c0 	beq.w	10007aa8 <_printf_i+0x1a8>
10007928:	f104 0542 	add.w	r5, r4, #66	; 0x42
1000792c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
10007930:	e03a      	b.n	100079a8 <_printf_i+0xa8>
10007932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
10007936:	2b15      	cmp	r3, #21
10007938:	d8f6      	bhi.n	10007928 <_printf_i+0x28>
1000793a:	a101      	add	r1, pc, #4	; (adr r1, 10007940 <_printf_i+0x40>)
1000793c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
10007940:	10007999 	.word	0x10007999
10007944:	100079ad 	.word	0x100079ad
10007948:	10007929 	.word	0x10007929
1000794c:	10007929 	.word	0x10007929
10007950:	10007929 	.word	0x10007929
10007954:	10007929 	.word	0x10007929
10007958:	100079ad 	.word	0x100079ad
1000795c:	10007929 	.word	0x10007929
10007960:	10007929 	.word	0x10007929
10007964:	10007929 	.word	0x10007929
10007968:	10007929 	.word	0x10007929
1000796c:	10007ab1 	.word	0x10007ab1
10007970:	100079d9 	.word	0x100079d9
10007974:	10007a6b 	.word	0x10007a6b
10007978:	10007929 	.word	0x10007929
1000797c:	10007929 	.word	0x10007929
10007980:	10007ad3 	.word	0x10007ad3
10007984:	10007929 	.word	0x10007929
10007988:	100079d9 	.word	0x100079d9
1000798c:	10007929 	.word	0x10007929
10007990:	10007929 	.word	0x10007929
10007994:	10007a73 	.word	0x10007a73
10007998:	682b      	ldr	r3, [r5, #0]
1000799a:	1d1a      	adds	r2, r3, #4
1000799c:	681b      	ldr	r3, [r3, #0]
1000799e:	602a      	str	r2, [r5, #0]
100079a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
100079a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
100079a8:	2301      	movs	r3, #1
100079aa:	e09f      	b.n	10007aec <_printf_i+0x1ec>
100079ac:	6820      	ldr	r0, [r4, #0]
100079ae:	682b      	ldr	r3, [r5, #0]
100079b0:	0607      	lsls	r7, r0, #24
100079b2:	f103 0104 	add.w	r1, r3, #4
100079b6:	6029      	str	r1, [r5, #0]
100079b8:	d501      	bpl.n	100079be <_printf_i+0xbe>
100079ba:	681e      	ldr	r6, [r3, #0]
100079bc:	e003      	b.n	100079c6 <_printf_i+0xc6>
100079be:	0646      	lsls	r6, r0, #25
100079c0:	d5fb      	bpl.n	100079ba <_printf_i+0xba>
100079c2:	f9b3 6000 	ldrsh.w	r6, [r3]
100079c6:	2e00      	cmp	r6, #0
100079c8:	da03      	bge.n	100079d2 <_printf_i+0xd2>
100079ca:	232d      	movs	r3, #45	; 0x2d
100079cc:	4276      	negs	r6, r6
100079ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
100079d2:	485a      	ldr	r0, [pc, #360]	; (10007b3c <_printf_i+0x23c>)
100079d4:	230a      	movs	r3, #10
100079d6:	e012      	b.n	100079fe <_printf_i+0xfe>
100079d8:	682b      	ldr	r3, [r5, #0]
100079da:	6820      	ldr	r0, [r4, #0]
100079dc:	1d19      	adds	r1, r3, #4
100079de:	6029      	str	r1, [r5, #0]
100079e0:	0605      	lsls	r5, r0, #24
100079e2:	d501      	bpl.n	100079e8 <_printf_i+0xe8>
100079e4:	681e      	ldr	r6, [r3, #0]
100079e6:	e002      	b.n	100079ee <_printf_i+0xee>
100079e8:	0641      	lsls	r1, r0, #25
100079ea:	d5fb      	bpl.n	100079e4 <_printf_i+0xe4>
100079ec:	881e      	ldrh	r6, [r3, #0]
100079ee:	4853      	ldr	r0, [pc, #332]	; (10007b3c <_printf_i+0x23c>)
100079f0:	2f6f      	cmp	r7, #111	; 0x6f
100079f2:	bf0c      	ite	eq
100079f4:	2308      	moveq	r3, #8
100079f6:	230a      	movne	r3, #10
100079f8:	2100      	movs	r1, #0
100079fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
100079fe:	6865      	ldr	r5, [r4, #4]
10007a00:	60a5      	str	r5, [r4, #8]
10007a02:	2d00      	cmp	r5, #0
10007a04:	bfa2      	ittt	ge
10007a06:	6821      	ldrge	r1, [r4, #0]
10007a08:	f021 0104 	bicge.w	r1, r1, #4
10007a0c:	6021      	strge	r1, [r4, #0]
10007a0e:	b90e      	cbnz	r6, 10007a14 <_printf_i+0x114>
10007a10:	2d00      	cmp	r5, #0
10007a12:	d04b      	beq.n	10007aac <_printf_i+0x1ac>
10007a14:	4615      	mov	r5, r2
10007a16:	fbb6 f1f3 	udiv	r1, r6, r3
10007a1a:	fb03 6711 	mls	r7, r3, r1, r6
10007a1e:	5dc7      	ldrb	r7, [r0, r7]
10007a20:	f805 7d01 	strb.w	r7, [r5, #-1]!
10007a24:	4637      	mov	r7, r6
10007a26:	42bb      	cmp	r3, r7
10007a28:	460e      	mov	r6, r1
10007a2a:	d9f4      	bls.n	10007a16 <_printf_i+0x116>
10007a2c:	2b08      	cmp	r3, #8
10007a2e:	d10b      	bne.n	10007a48 <_printf_i+0x148>
10007a30:	6823      	ldr	r3, [r4, #0]
10007a32:	07de      	lsls	r6, r3, #31
10007a34:	d508      	bpl.n	10007a48 <_printf_i+0x148>
10007a36:	6923      	ldr	r3, [r4, #16]
10007a38:	6861      	ldr	r1, [r4, #4]
10007a3a:	4299      	cmp	r1, r3
10007a3c:	bfde      	ittt	le
10007a3e:	2330      	movle	r3, #48	; 0x30
10007a40:	f805 3c01 	strble.w	r3, [r5, #-1]
10007a44:	f105 35ff 	addle.w	r5, r5, #4294967295
10007a48:	1b52      	subs	r2, r2, r5
10007a4a:	6122      	str	r2, [r4, #16]
10007a4c:	f8cd a000 	str.w	sl, [sp]
10007a50:	464b      	mov	r3, r9
10007a52:	aa03      	add	r2, sp, #12
10007a54:	4621      	mov	r1, r4
10007a56:	4640      	mov	r0, r8
10007a58:	f7ff fee4 	bl	10007824 <_printf_common>
10007a5c:	3001      	adds	r0, #1
10007a5e:	d14a      	bne.n	10007af6 <_printf_i+0x1f6>
10007a60:	f04f 30ff 	mov.w	r0, #4294967295
10007a64:	b004      	add	sp, #16
10007a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
10007a6a:	6823      	ldr	r3, [r4, #0]
10007a6c:	f043 0320 	orr.w	r3, r3, #32
10007a70:	6023      	str	r3, [r4, #0]
10007a72:	4833      	ldr	r0, [pc, #204]	; (10007b40 <_printf_i+0x240>)
10007a74:	2778      	movs	r7, #120	; 0x78
10007a76:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
10007a7a:	6823      	ldr	r3, [r4, #0]
10007a7c:	6829      	ldr	r1, [r5, #0]
10007a7e:	061f      	lsls	r7, r3, #24
10007a80:	f851 6b04 	ldr.w	r6, [r1], #4
10007a84:	d402      	bmi.n	10007a8c <_printf_i+0x18c>
10007a86:	065f      	lsls	r7, r3, #25
10007a88:	bf48      	it	mi
10007a8a:	b2b6      	uxthmi	r6, r6
10007a8c:	07df      	lsls	r7, r3, #31
10007a8e:	bf48      	it	mi
10007a90:	f043 0320 	orrmi.w	r3, r3, #32
10007a94:	6029      	str	r1, [r5, #0]
10007a96:	bf48      	it	mi
10007a98:	6023      	strmi	r3, [r4, #0]
10007a9a:	b91e      	cbnz	r6, 10007aa4 <_printf_i+0x1a4>
10007a9c:	6823      	ldr	r3, [r4, #0]
10007a9e:	f023 0320 	bic.w	r3, r3, #32
10007aa2:	6023      	str	r3, [r4, #0]
10007aa4:	2310      	movs	r3, #16
10007aa6:	e7a7      	b.n	100079f8 <_printf_i+0xf8>
10007aa8:	4824      	ldr	r0, [pc, #144]	; (10007b3c <_printf_i+0x23c>)
10007aaa:	e7e4      	b.n	10007a76 <_printf_i+0x176>
10007aac:	4615      	mov	r5, r2
10007aae:	e7bd      	b.n	10007a2c <_printf_i+0x12c>
10007ab0:	682b      	ldr	r3, [r5, #0]
10007ab2:	6826      	ldr	r6, [r4, #0]
10007ab4:	6961      	ldr	r1, [r4, #20]
10007ab6:	1d18      	adds	r0, r3, #4
10007ab8:	6028      	str	r0, [r5, #0]
10007aba:	0635      	lsls	r5, r6, #24
10007abc:	681b      	ldr	r3, [r3, #0]
10007abe:	d501      	bpl.n	10007ac4 <_printf_i+0x1c4>
10007ac0:	6019      	str	r1, [r3, #0]
10007ac2:	e002      	b.n	10007aca <_printf_i+0x1ca>
10007ac4:	0670      	lsls	r0, r6, #25
10007ac6:	d5fb      	bpl.n	10007ac0 <_printf_i+0x1c0>
10007ac8:	8019      	strh	r1, [r3, #0]
10007aca:	2300      	movs	r3, #0
10007acc:	6123      	str	r3, [r4, #16]
10007ace:	4615      	mov	r5, r2
10007ad0:	e7bc      	b.n	10007a4c <_printf_i+0x14c>
10007ad2:	682b      	ldr	r3, [r5, #0]
10007ad4:	1d1a      	adds	r2, r3, #4
10007ad6:	602a      	str	r2, [r5, #0]
10007ad8:	681d      	ldr	r5, [r3, #0]
10007ada:	6862      	ldr	r2, [r4, #4]
10007adc:	2100      	movs	r1, #0
10007ade:	4628      	mov	r0, r5
10007ae0:	f7f8 faae 	bl	10000040 <memchr>
10007ae4:	b108      	cbz	r0, 10007aea <_printf_i+0x1ea>
10007ae6:	1b40      	subs	r0, r0, r5
10007ae8:	6060      	str	r0, [r4, #4]
10007aea:	6863      	ldr	r3, [r4, #4]
10007aec:	6123      	str	r3, [r4, #16]
10007aee:	2300      	movs	r3, #0
10007af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
10007af4:	e7aa      	b.n	10007a4c <_printf_i+0x14c>
10007af6:	6923      	ldr	r3, [r4, #16]
10007af8:	462a      	mov	r2, r5
10007afa:	4649      	mov	r1, r9
10007afc:	4640      	mov	r0, r8
10007afe:	47d0      	blx	sl
10007b00:	3001      	adds	r0, #1
10007b02:	d0ad      	beq.n	10007a60 <_printf_i+0x160>
10007b04:	6823      	ldr	r3, [r4, #0]
10007b06:	079b      	lsls	r3, r3, #30
10007b08:	d413      	bmi.n	10007b32 <_printf_i+0x232>
10007b0a:	68e0      	ldr	r0, [r4, #12]
10007b0c:	9b03      	ldr	r3, [sp, #12]
10007b0e:	4298      	cmp	r0, r3
10007b10:	bfb8      	it	lt
10007b12:	4618      	movlt	r0, r3
10007b14:	e7a6      	b.n	10007a64 <_printf_i+0x164>
10007b16:	2301      	movs	r3, #1
10007b18:	4632      	mov	r2, r6
10007b1a:	4649      	mov	r1, r9
10007b1c:	4640      	mov	r0, r8
10007b1e:	47d0      	blx	sl
10007b20:	3001      	adds	r0, #1
10007b22:	d09d      	beq.n	10007a60 <_printf_i+0x160>
10007b24:	3501      	adds	r5, #1
10007b26:	68e3      	ldr	r3, [r4, #12]
10007b28:	9903      	ldr	r1, [sp, #12]
10007b2a:	1a5b      	subs	r3, r3, r1
10007b2c:	42ab      	cmp	r3, r5
10007b2e:	dcf2      	bgt.n	10007b16 <_printf_i+0x216>
10007b30:	e7eb      	b.n	10007b0a <_printf_i+0x20a>
10007b32:	2500      	movs	r5, #0
10007b34:	f104 0619 	add.w	r6, r4, #25
10007b38:	e7f5      	b.n	10007b26 <_printf_i+0x226>
10007b3a:	bf00      	nop
10007b3c:	1000bbce 	.word	0x1000bbce
10007b40:	1000bbdf 	.word	0x1000bbdf

10007b44 <_scanf_float>:
10007b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10007b48:	b087      	sub	sp, #28
10007b4a:	4617      	mov	r7, r2
10007b4c:	9303      	str	r3, [sp, #12]
10007b4e:	688b      	ldr	r3, [r1, #8]
10007b50:	1e5a      	subs	r2, r3, #1
10007b52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
10007b56:	bf83      	ittte	hi
10007b58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
10007b5c:	195b      	addhi	r3, r3, r5
10007b5e:	9302      	strhi	r3, [sp, #8]
10007b60:	2300      	movls	r3, #0
10007b62:	bf86      	itte	hi
10007b64:	f240 135d 	movwhi	r3, #349	; 0x15d
10007b68:	608b      	strhi	r3, [r1, #8]
10007b6a:	9302      	strls	r3, [sp, #8]
10007b6c:	680b      	ldr	r3, [r1, #0]
10007b6e:	468b      	mov	fp, r1
10007b70:	2500      	movs	r5, #0
10007b72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
10007b76:	f84b 3b1c 	str.w	r3, [fp], #28
10007b7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
10007b7e:	4680      	mov	r8, r0
10007b80:	460c      	mov	r4, r1
10007b82:	465e      	mov	r6, fp
10007b84:	46aa      	mov	sl, r5
10007b86:	46a9      	mov	r9, r5
10007b88:	9501      	str	r5, [sp, #4]
10007b8a:	68a2      	ldr	r2, [r4, #8]
10007b8c:	b152      	cbz	r2, 10007ba4 <_scanf_float+0x60>
10007b8e:	683b      	ldr	r3, [r7, #0]
10007b90:	781b      	ldrb	r3, [r3, #0]
10007b92:	2b4e      	cmp	r3, #78	; 0x4e
10007b94:	d864      	bhi.n	10007c60 <_scanf_float+0x11c>
10007b96:	2b40      	cmp	r3, #64	; 0x40
10007b98:	d83c      	bhi.n	10007c14 <_scanf_float+0xd0>
10007b9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
10007b9e:	b2c8      	uxtb	r0, r1
10007ba0:	280e      	cmp	r0, #14
10007ba2:	d93a      	bls.n	10007c1a <_scanf_float+0xd6>
10007ba4:	f1b9 0f00 	cmp.w	r9, #0
10007ba8:	d003      	beq.n	10007bb2 <_scanf_float+0x6e>
10007baa:	6823      	ldr	r3, [r4, #0]
10007bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
10007bb0:	6023      	str	r3, [r4, #0]
10007bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
10007bb6:	f1ba 0f01 	cmp.w	sl, #1
10007bba:	f200 8113 	bhi.w	10007de4 <_scanf_float+0x2a0>
10007bbe:	455e      	cmp	r6, fp
10007bc0:	f200 8105 	bhi.w	10007dce <_scanf_float+0x28a>
10007bc4:	2501      	movs	r5, #1
10007bc6:	4628      	mov	r0, r5
10007bc8:	b007      	add	sp, #28
10007bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10007bce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
10007bd2:	2a0d      	cmp	r2, #13
10007bd4:	d8e6      	bhi.n	10007ba4 <_scanf_float+0x60>
10007bd6:	a101      	add	r1, pc, #4	; (adr r1, 10007bdc <_scanf_float+0x98>)
10007bd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
10007bdc:	10007d1b 	.word	0x10007d1b
10007be0:	10007ba5 	.word	0x10007ba5
10007be4:	10007ba5 	.word	0x10007ba5
10007be8:	10007ba5 	.word	0x10007ba5
10007bec:	10007d7b 	.word	0x10007d7b
10007bf0:	10007d53 	.word	0x10007d53
10007bf4:	10007ba5 	.word	0x10007ba5
10007bf8:	10007ba5 	.word	0x10007ba5
10007bfc:	10007d29 	.word	0x10007d29
10007c00:	10007ba5 	.word	0x10007ba5
10007c04:	10007ba5 	.word	0x10007ba5
10007c08:	10007ba5 	.word	0x10007ba5
10007c0c:	10007ba5 	.word	0x10007ba5
10007c10:	10007ce1 	.word	0x10007ce1
10007c14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
10007c18:	e7db      	b.n	10007bd2 <_scanf_float+0x8e>
10007c1a:	290e      	cmp	r1, #14
10007c1c:	d8c2      	bhi.n	10007ba4 <_scanf_float+0x60>
10007c1e:	a001      	add	r0, pc, #4	; (adr r0, 10007c24 <_scanf_float+0xe0>)
10007c20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
10007c24:	10007cd3 	.word	0x10007cd3
10007c28:	10007ba5 	.word	0x10007ba5
10007c2c:	10007cd3 	.word	0x10007cd3
10007c30:	10007d67 	.word	0x10007d67
10007c34:	10007ba5 	.word	0x10007ba5
10007c38:	10007c81 	.word	0x10007c81
10007c3c:	10007cbd 	.word	0x10007cbd
10007c40:	10007cbd 	.word	0x10007cbd
10007c44:	10007cbd 	.word	0x10007cbd
10007c48:	10007cbd 	.word	0x10007cbd
10007c4c:	10007cbd 	.word	0x10007cbd
10007c50:	10007cbd 	.word	0x10007cbd
10007c54:	10007cbd 	.word	0x10007cbd
10007c58:	10007cbd 	.word	0x10007cbd
10007c5c:	10007cbd 	.word	0x10007cbd
10007c60:	2b6e      	cmp	r3, #110	; 0x6e
10007c62:	d809      	bhi.n	10007c78 <_scanf_float+0x134>
10007c64:	2b60      	cmp	r3, #96	; 0x60
10007c66:	d8b2      	bhi.n	10007bce <_scanf_float+0x8a>
10007c68:	2b54      	cmp	r3, #84	; 0x54
10007c6a:	d077      	beq.n	10007d5c <_scanf_float+0x218>
10007c6c:	2b59      	cmp	r3, #89	; 0x59
10007c6e:	d199      	bne.n	10007ba4 <_scanf_float+0x60>
10007c70:	2d07      	cmp	r5, #7
10007c72:	d197      	bne.n	10007ba4 <_scanf_float+0x60>
10007c74:	2508      	movs	r5, #8
10007c76:	e029      	b.n	10007ccc <_scanf_float+0x188>
10007c78:	2b74      	cmp	r3, #116	; 0x74
10007c7a:	d06f      	beq.n	10007d5c <_scanf_float+0x218>
10007c7c:	2b79      	cmp	r3, #121	; 0x79
10007c7e:	e7f6      	b.n	10007c6e <_scanf_float+0x12a>
10007c80:	6821      	ldr	r1, [r4, #0]
10007c82:	05c8      	lsls	r0, r1, #23
10007c84:	d51a      	bpl.n	10007cbc <_scanf_float+0x178>
10007c86:	9b02      	ldr	r3, [sp, #8]
10007c88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
10007c8c:	6021      	str	r1, [r4, #0]
10007c8e:	f109 0901 	add.w	r9, r9, #1
10007c92:	b11b      	cbz	r3, 10007c9c <_scanf_float+0x158>
10007c94:	3b01      	subs	r3, #1
10007c96:	3201      	adds	r2, #1
10007c98:	9302      	str	r3, [sp, #8]
10007c9a:	60a2      	str	r2, [r4, #8]
10007c9c:	68a3      	ldr	r3, [r4, #8]
10007c9e:	3b01      	subs	r3, #1
10007ca0:	60a3      	str	r3, [r4, #8]
10007ca2:	6923      	ldr	r3, [r4, #16]
10007ca4:	3301      	adds	r3, #1
10007ca6:	6123      	str	r3, [r4, #16]
10007ca8:	687b      	ldr	r3, [r7, #4]
10007caa:	3b01      	subs	r3, #1
10007cac:	2b00      	cmp	r3, #0
10007cae:	607b      	str	r3, [r7, #4]
10007cb0:	f340 8084 	ble.w	10007dbc <_scanf_float+0x278>
10007cb4:	683b      	ldr	r3, [r7, #0]
10007cb6:	3301      	adds	r3, #1
10007cb8:	603b      	str	r3, [r7, #0]
10007cba:	e766      	b.n	10007b8a <_scanf_float+0x46>
10007cbc:	eb1a 0f05 	cmn.w	sl, r5
10007cc0:	f47f af70 	bne.w	10007ba4 <_scanf_float+0x60>
10007cc4:	6822      	ldr	r2, [r4, #0]
10007cc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
10007cca:	6022      	str	r2, [r4, #0]
10007ccc:	f806 3b01 	strb.w	r3, [r6], #1
10007cd0:	e7e4      	b.n	10007c9c <_scanf_float+0x158>
10007cd2:	6822      	ldr	r2, [r4, #0]
10007cd4:	0610      	lsls	r0, r2, #24
10007cd6:	f57f af65 	bpl.w	10007ba4 <_scanf_float+0x60>
10007cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
10007cde:	e7f4      	b.n	10007cca <_scanf_float+0x186>
10007ce0:	f1ba 0f00 	cmp.w	sl, #0
10007ce4:	d10e      	bne.n	10007d04 <_scanf_float+0x1c0>
10007ce6:	f1b9 0f00 	cmp.w	r9, #0
10007cea:	d10e      	bne.n	10007d0a <_scanf_float+0x1c6>
10007cec:	6822      	ldr	r2, [r4, #0]
10007cee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
10007cf2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
10007cf6:	d108      	bne.n	10007d0a <_scanf_float+0x1c6>
10007cf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
10007cfc:	6022      	str	r2, [r4, #0]
10007cfe:	f04f 0a01 	mov.w	sl, #1
10007d02:	e7e3      	b.n	10007ccc <_scanf_float+0x188>
10007d04:	f1ba 0f02 	cmp.w	sl, #2
10007d08:	d055      	beq.n	10007db6 <_scanf_float+0x272>
10007d0a:	2d01      	cmp	r5, #1
10007d0c:	d002      	beq.n	10007d14 <_scanf_float+0x1d0>
10007d0e:	2d04      	cmp	r5, #4
10007d10:	f47f af48 	bne.w	10007ba4 <_scanf_float+0x60>
10007d14:	3501      	adds	r5, #1
10007d16:	b2ed      	uxtb	r5, r5
10007d18:	e7d8      	b.n	10007ccc <_scanf_float+0x188>
10007d1a:	f1ba 0f01 	cmp.w	sl, #1
10007d1e:	f47f af41 	bne.w	10007ba4 <_scanf_float+0x60>
10007d22:	f04f 0a02 	mov.w	sl, #2
10007d26:	e7d1      	b.n	10007ccc <_scanf_float+0x188>
10007d28:	b97d      	cbnz	r5, 10007d4a <_scanf_float+0x206>
10007d2a:	f1b9 0f00 	cmp.w	r9, #0
10007d2e:	f47f af3c 	bne.w	10007baa <_scanf_float+0x66>
10007d32:	6822      	ldr	r2, [r4, #0]
10007d34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
10007d38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
10007d3c:	f47f af39 	bne.w	10007bb2 <_scanf_float+0x6e>
10007d40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
10007d44:	6022      	str	r2, [r4, #0]
10007d46:	2501      	movs	r5, #1
10007d48:	e7c0      	b.n	10007ccc <_scanf_float+0x188>
10007d4a:	2d03      	cmp	r5, #3
10007d4c:	d0e2      	beq.n	10007d14 <_scanf_float+0x1d0>
10007d4e:	2d05      	cmp	r5, #5
10007d50:	e7de      	b.n	10007d10 <_scanf_float+0x1cc>
10007d52:	2d02      	cmp	r5, #2
10007d54:	f47f af26 	bne.w	10007ba4 <_scanf_float+0x60>
10007d58:	2503      	movs	r5, #3
10007d5a:	e7b7      	b.n	10007ccc <_scanf_float+0x188>
10007d5c:	2d06      	cmp	r5, #6
10007d5e:	f47f af21 	bne.w	10007ba4 <_scanf_float+0x60>
10007d62:	2507      	movs	r5, #7
10007d64:	e7b2      	b.n	10007ccc <_scanf_float+0x188>
10007d66:	6822      	ldr	r2, [r4, #0]
10007d68:	0591      	lsls	r1, r2, #22
10007d6a:	f57f af1b 	bpl.w	10007ba4 <_scanf_float+0x60>
10007d6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
10007d72:	6022      	str	r2, [r4, #0]
10007d74:	f8cd 9004 	str.w	r9, [sp, #4]
10007d78:	e7a8      	b.n	10007ccc <_scanf_float+0x188>
10007d7a:	6822      	ldr	r2, [r4, #0]
10007d7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
10007d80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
10007d84:	d006      	beq.n	10007d94 <_scanf_float+0x250>
10007d86:	0550      	lsls	r0, r2, #21
10007d88:	f57f af0c 	bpl.w	10007ba4 <_scanf_float+0x60>
10007d8c:	f1b9 0f00 	cmp.w	r9, #0
10007d90:	f43f af0f 	beq.w	10007bb2 <_scanf_float+0x6e>
10007d94:	0591      	lsls	r1, r2, #22
10007d96:	bf58      	it	pl
10007d98:	9901      	ldrpl	r1, [sp, #4]
10007d9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
10007d9e:	bf58      	it	pl
10007da0:	eba9 0101 	subpl.w	r1, r9, r1
10007da4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
10007da8:	bf58      	it	pl
10007daa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
10007dae:	6022      	str	r2, [r4, #0]
10007db0:	f04f 0900 	mov.w	r9, #0
10007db4:	e78a      	b.n	10007ccc <_scanf_float+0x188>
10007db6:	f04f 0a03 	mov.w	sl, #3
10007dba:	e787      	b.n	10007ccc <_scanf_float+0x188>
10007dbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
10007dc0:	4639      	mov	r1, r7
10007dc2:	4640      	mov	r0, r8
10007dc4:	4798      	blx	r3
10007dc6:	2800      	cmp	r0, #0
10007dc8:	f43f aedf 	beq.w	10007b8a <_scanf_float+0x46>
10007dcc:	e6ea      	b.n	10007ba4 <_scanf_float+0x60>
10007dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
10007dd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
10007dd6:	463a      	mov	r2, r7
10007dd8:	4640      	mov	r0, r8
10007dda:	4798      	blx	r3
10007ddc:	6923      	ldr	r3, [r4, #16]
10007dde:	3b01      	subs	r3, #1
10007de0:	6123      	str	r3, [r4, #16]
10007de2:	e6ec      	b.n	10007bbe <_scanf_float+0x7a>
10007de4:	1e6b      	subs	r3, r5, #1
10007de6:	2b06      	cmp	r3, #6
10007de8:	d825      	bhi.n	10007e36 <_scanf_float+0x2f2>
10007dea:	2d02      	cmp	r5, #2
10007dec:	d836      	bhi.n	10007e5c <_scanf_float+0x318>
10007dee:	455e      	cmp	r6, fp
10007df0:	f67f aee8 	bls.w	10007bc4 <_scanf_float+0x80>
10007df4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
10007df8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
10007dfc:	463a      	mov	r2, r7
10007dfe:	4640      	mov	r0, r8
10007e00:	4798      	blx	r3
10007e02:	6923      	ldr	r3, [r4, #16]
10007e04:	3b01      	subs	r3, #1
10007e06:	6123      	str	r3, [r4, #16]
10007e08:	e7f1      	b.n	10007dee <_scanf_float+0x2aa>
10007e0a:	9802      	ldr	r0, [sp, #8]
10007e0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
10007e10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
10007e14:	9002      	str	r0, [sp, #8]
10007e16:	463a      	mov	r2, r7
10007e18:	4640      	mov	r0, r8
10007e1a:	4798      	blx	r3
10007e1c:	6923      	ldr	r3, [r4, #16]
10007e1e:	3b01      	subs	r3, #1
10007e20:	6123      	str	r3, [r4, #16]
10007e22:	f10a 3aff 	add.w	sl, sl, #4294967295
10007e26:	fa5f fa8a 	uxtb.w	sl, sl
10007e2a:	f1ba 0f02 	cmp.w	sl, #2
10007e2e:	d1ec      	bne.n	10007e0a <_scanf_float+0x2c6>
10007e30:	3d03      	subs	r5, #3
10007e32:	b2ed      	uxtb	r5, r5
10007e34:	1b76      	subs	r6, r6, r5
10007e36:	6823      	ldr	r3, [r4, #0]
10007e38:	05da      	lsls	r2, r3, #23
10007e3a:	d52f      	bpl.n	10007e9c <_scanf_float+0x358>
10007e3c:	055b      	lsls	r3, r3, #21
10007e3e:	d510      	bpl.n	10007e62 <_scanf_float+0x31e>
10007e40:	455e      	cmp	r6, fp
10007e42:	f67f aebf 	bls.w	10007bc4 <_scanf_float+0x80>
10007e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
10007e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
10007e4e:	463a      	mov	r2, r7
10007e50:	4640      	mov	r0, r8
10007e52:	4798      	blx	r3
10007e54:	6923      	ldr	r3, [r4, #16]
10007e56:	3b01      	subs	r3, #1
10007e58:	6123      	str	r3, [r4, #16]
10007e5a:	e7f1      	b.n	10007e40 <_scanf_float+0x2fc>
10007e5c:	46aa      	mov	sl, r5
10007e5e:	9602      	str	r6, [sp, #8]
10007e60:	e7df      	b.n	10007e22 <_scanf_float+0x2de>
10007e62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
10007e66:	6923      	ldr	r3, [r4, #16]
10007e68:	2965      	cmp	r1, #101	; 0x65
10007e6a:	f103 33ff 	add.w	r3, r3, #4294967295
10007e6e:	f106 35ff 	add.w	r5, r6, #4294967295
10007e72:	6123      	str	r3, [r4, #16]
10007e74:	d00c      	beq.n	10007e90 <_scanf_float+0x34c>
10007e76:	2945      	cmp	r1, #69	; 0x45
10007e78:	d00a      	beq.n	10007e90 <_scanf_float+0x34c>
10007e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
10007e7e:	463a      	mov	r2, r7
10007e80:	4640      	mov	r0, r8
10007e82:	4798      	blx	r3
10007e84:	6923      	ldr	r3, [r4, #16]
10007e86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
10007e8a:	3b01      	subs	r3, #1
10007e8c:	1eb5      	subs	r5, r6, #2
10007e8e:	6123      	str	r3, [r4, #16]
10007e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
10007e94:	463a      	mov	r2, r7
10007e96:	4640      	mov	r0, r8
10007e98:	4798      	blx	r3
10007e9a:	462e      	mov	r6, r5
10007e9c:	6825      	ldr	r5, [r4, #0]
10007e9e:	f015 0510 	ands.w	r5, r5, #16
10007ea2:	d158      	bne.n	10007f56 <_scanf_float+0x412>
10007ea4:	7035      	strb	r5, [r6, #0]
10007ea6:	6823      	ldr	r3, [r4, #0]
10007ea8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
10007eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
10007eb0:	d11c      	bne.n	10007eec <_scanf_float+0x3a8>
10007eb2:	9b01      	ldr	r3, [sp, #4]
10007eb4:	454b      	cmp	r3, r9
10007eb6:	eba3 0209 	sub.w	r2, r3, r9
10007eba:	d124      	bne.n	10007f06 <_scanf_float+0x3c2>
10007ebc:	2200      	movs	r2, #0
10007ebe:	4659      	mov	r1, fp
10007ec0:	4640      	mov	r0, r8
10007ec2:	f002 fc41 	bl	1000a748 <_strtod_r>
10007ec6:	9b03      	ldr	r3, [sp, #12]
10007ec8:	6821      	ldr	r1, [r4, #0]
10007eca:	681b      	ldr	r3, [r3, #0]
10007ecc:	f011 0f02 	tst.w	r1, #2
10007ed0:	ec57 6b10 	vmov	r6, r7, d0
10007ed4:	f103 0204 	add.w	r2, r3, #4
10007ed8:	d020      	beq.n	10007f1c <_scanf_float+0x3d8>
10007eda:	9903      	ldr	r1, [sp, #12]
10007edc:	600a      	str	r2, [r1, #0]
10007ede:	681b      	ldr	r3, [r3, #0]
10007ee0:	e9c3 6700 	strd	r6, r7, [r3]
10007ee4:	68e3      	ldr	r3, [r4, #12]
10007ee6:	3301      	adds	r3, #1
10007ee8:	60e3      	str	r3, [r4, #12]
10007eea:	e66c      	b.n	10007bc6 <_scanf_float+0x82>
10007eec:	9b04      	ldr	r3, [sp, #16]
10007eee:	2b00      	cmp	r3, #0
10007ef0:	d0e4      	beq.n	10007ebc <_scanf_float+0x378>
10007ef2:	9905      	ldr	r1, [sp, #20]
10007ef4:	230a      	movs	r3, #10
10007ef6:	462a      	mov	r2, r5
10007ef8:	3101      	adds	r1, #1
10007efa:	4640      	mov	r0, r8
10007efc:	f002 fcac 	bl	1000a858 <_strtol_r>
10007f00:	9b04      	ldr	r3, [sp, #16]
10007f02:	9e05      	ldr	r6, [sp, #20]
10007f04:	1ac2      	subs	r2, r0, r3
10007f06:	f204 136f 	addw	r3, r4, #367	; 0x16f
10007f0a:	429e      	cmp	r6, r3
10007f0c:	bf28      	it	cs
10007f0e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
10007f12:	4912      	ldr	r1, [pc, #72]	; (10007f5c <_scanf_float+0x418>)
10007f14:	4630      	mov	r0, r6
10007f16:	f000 f8f9 	bl	1000810c <siprintf>
10007f1a:	e7cf      	b.n	10007ebc <_scanf_float+0x378>
10007f1c:	f011 0f04 	tst.w	r1, #4
10007f20:	9903      	ldr	r1, [sp, #12]
10007f22:	600a      	str	r2, [r1, #0]
10007f24:	d1db      	bne.n	10007ede <_scanf_float+0x39a>
10007f26:	f8d3 8000 	ldr.w	r8, [r3]
10007f2a:	ee10 2a10 	vmov	r2, s0
10007f2e:	ee10 0a10 	vmov	r0, s0
10007f32:	463b      	mov	r3, r7
10007f34:	4639      	mov	r1, r7
10007f36:	f7f8 fd31 	bl	1000099c <__aeabi_dcmpun>
10007f3a:	b128      	cbz	r0, 10007f48 <_scanf_float+0x404>
10007f3c:	4808      	ldr	r0, [pc, #32]	; (10007f60 <_scanf_float+0x41c>)
10007f3e:	f000 f9c9 	bl	100082d4 <nanf>
10007f42:	ed88 0a00 	vstr	s0, [r8]
10007f46:	e7cd      	b.n	10007ee4 <_scanf_float+0x3a0>
10007f48:	4630      	mov	r0, r6
10007f4a:	4639      	mov	r1, r7
10007f4c:	f7f8 fd84 	bl	10000a58 <__aeabi_d2f>
10007f50:	f8c8 0000 	str.w	r0, [r8]
10007f54:	e7c6      	b.n	10007ee4 <_scanf_float+0x3a0>
10007f56:	2500      	movs	r5, #0
10007f58:	e635      	b.n	10007bc6 <_scanf_float+0x82>
10007f5a:	bf00      	nop
10007f5c:	1000bbf0 	.word	0x1000bbf0
10007f60:	1000bf85 	.word	0x1000bf85

10007f64 <std>:
10007f64:	2300      	movs	r3, #0
10007f66:	b510      	push	{r4, lr}
10007f68:	4604      	mov	r4, r0
10007f6a:	e9c0 3300 	strd	r3, r3, [r0]
10007f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
10007f72:	6083      	str	r3, [r0, #8]
10007f74:	8181      	strh	r1, [r0, #12]
10007f76:	6643      	str	r3, [r0, #100]	; 0x64
10007f78:	81c2      	strh	r2, [r0, #14]
10007f7a:	6183      	str	r3, [r0, #24]
10007f7c:	4619      	mov	r1, r3
10007f7e:	2208      	movs	r2, #8
10007f80:	305c      	adds	r0, #92	; 0x5c
10007f82:	f000 f926 	bl	100081d2 <memset>
10007f86:	4b0d      	ldr	r3, [pc, #52]	; (10007fbc <std+0x58>)
10007f88:	6263      	str	r3, [r4, #36]	; 0x24
10007f8a:	4b0d      	ldr	r3, [pc, #52]	; (10007fc0 <std+0x5c>)
10007f8c:	62a3      	str	r3, [r4, #40]	; 0x28
10007f8e:	4b0d      	ldr	r3, [pc, #52]	; (10007fc4 <std+0x60>)
10007f90:	62e3      	str	r3, [r4, #44]	; 0x2c
10007f92:	4b0d      	ldr	r3, [pc, #52]	; (10007fc8 <std+0x64>)
10007f94:	6323      	str	r3, [r4, #48]	; 0x30
10007f96:	4b0d      	ldr	r3, [pc, #52]	; (10007fcc <std+0x68>)
10007f98:	6224      	str	r4, [r4, #32]
10007f9a:	429c      	cmp	r4, r3
10007f9c:	d006      	beq.n	10007fac <std+0x48>
10007f9e:	f103 0268 	add.w	r2, r3, #104	; 0x68
10007fa2:	4294      	cmp	r4, r2
10007fa4:	d002      	beq.n	10007fac <std+0x48>
10007fa6:	33d0      	adds	r3, #208	; 0xd0
10007fa8:	429c      	cmp	r4, r3
10007faa:	d105      	bne.n	10007fb8 <std+0x54>
10007fac:	f104 0058 	add.w	r0, r4, #88	; 0x58
10007fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10007fb4:	f000 b98a 	b.w	100082cc <__retarget_lock_init_recursive>
10007fb8:	bd10      	pop	{r4, pc}
10007fba:	bf00      	nop
10007fbc:	1000814d 	.word	0x1000814d
10007fc0:	1000816f 	.word	0x1000816f
10007fc4:	100081a7 	.word	0x100081a7
10007fc8:	100081cb 	.word	0x100081cb
10007fcc:	10020294 	.word	0x10020294

10007fd0 <stdio_exit_handler>:
10007fd0:	4a02      	ldr	r2, [pc, #8]	; (10007fdc <stdio_exit_handler+0xc>)
10007fd2:	4903      	ldr	r1, [pc, #12]	; (10007fe0 <stdio_exit_handler+0x10>)
10007fd4:	4803      	ldr	r0, [pc, #12]	; (10007fe4 <stdio_exit_handler+0x14>)
10007fd6:	f000 b869 	b.w	100080ac <_fwalk_sglue>
10007fda:	bf00      	nop
10007fdc:	1002000c 	.word	0x1002000c
10007fe0:	1000aea1 	.word	0x1000aea1
10007fe4:	10020018 	.word	0x10020018

10007fe8 <cleanup_stdio>:
10007fe8:	6841      	ldr	r1, [r0, #4]
10007fea:	4b0c      	ldr	r3, [pc, #48]	; (1000801c <cleanup_stdio+0x34>)
10007fec:	4299      	cmp	r1, r3
10007fee:	b510      	push	{r4, lr}
10007ff0:	4604      	mov	r4, r0
10007ff2:	d001      	beq.n	10007ff8 <cleanup_stdio+0x10>
10007ff4:	f002 ff54 	bl	1000aea0 <_fflush_r>
10007ff8:	68a1      	ldr	r1, [r4, #8]
10007ffa:	4b09      	ldr	r3, [pc, #36]	; (10008020 <cleanup_stdio+0x38>)
10007ffc:	4299      	cmp	r1, r3
10007ffe:	d002      	beq.n	10008006 <cleanup_stdio+0x1e>
10008000:	4620      	mov	r0, r4
10008002:	f002 ff4d 	bl	1000aea0 <_fflush_r>
10008006:	68e1      	ldr	r1, [r4, #12]
10008008:	4b06      	ldr	r3, [pc, #24]	; (10008024 <cleanup_stdio+0x3c>)
1000800a:	4299      	cmp	r1, r3
1000800c:	d004      	beq.n	10008018 <cleanup_stdio+0x30>
1000800e:	4620      	mov	r0, r4
10008010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10008014:	f002 bf44 	b.w	1000aea0 <_fflush_r>
10008018:	bd10      	pop	{r4, pc}
1000801a:	bf00      	nop
1000801c:	10020294 	.word	0x10020294
10008020:	100202fc 	.word	0x100202fc
10008024:	10020364 	.word	0x10020364

10008028 <global_stdio_init.part.0>:
10008028:	b510      	push	{r4, lr}
1000802a:	4b0b      	ldr	r3, [pc, #44]	; (10008058 <global_stdio_init.part.0+0x30>)
1000802c:	4c0b      	ldr	r4, [pc, #44]	; (1000805c <global_stdio_init.part.0+0x34>)
1000802e:	4a0c      	ldr	r2, [pc, #48]	; (10008060 <global_stdio_init.part.0+0x38>)
10008030:	601a      	str	r2, [r3, #0]
10008032:	4620      	mov	r0, r4
10008034:	2200      	movs	r2, #0
10008036:	2104      	movs	r1, #4
10008038:	f7ff ff94 	bl	10007f64 <std>
1000803c:	f104 0068 	add.w	r0, r4, #104	; 0x68
10008040:	2201      	movs	r2, #1
10008042:	2109      	movs	r1, #9
10008044:	f7ff ff8e 	bl	10007f64 <std>
10008048:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
1000804c:	2202      	movs	r2, #2
1000804e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
10008052:	2112      	movs	r1, #18
10008054:	f7ff bf86 	b.w	10007f64 <std>
10008058:	100203cc 	.word	0x100203cc
1000805c:	10020294 	.word	0x10020294
10008060:	10007fd1 	.word	0x10007fd1

10008064 <__sfp_lock_acquire>:
10008064:	4801      	ldr	r0, [pc, #4]	; (1000806c <__sfp_lock_acquire+0x8>)
10008066:	f000 b932 	b.w	100082ce <__retarget_lock_acquire_recursive>
1000806a:	bf00      	nop
1000806c:	100203d5 	.word	0x100203d5

10008070 <__sfp_lock_release>:
10008070:	4801      	ldr	r0, [pc, #4]	; (10008078 <__sfp_lock_release+0x8>)
10008072:	f000 b92d 	b.w	100082d0 <__retarget_lock_release_recursive>
10008076:	bf00      	nop
10008078:	100203d5 	.word	0x100203d5

1000807c <__sinit>:
1000807c:	b510      	push	{r4, lr}
1000807e:	4604      	mov	r4, r0
10008080:	f7ff fff0 	bl	10008064 <__sfp_lock_acquire>
10008084:	6a23      	ldr	r3, [r4, #32]
10008086:	b11b      	cbz	r3, 10008090 <__sinit+0x14>
10008088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1000808c:	f7ff bff0 	b.w	10008070 <__sfp_lock_release>
10008090:	4b04      	ldr	r3, [pc, #16]	; (100080a4 <__sinit+0x28>)
10008092:	6223      	str	r3, [r4, #32]
10008094:	4b04      	ldr	r3, [pc, #16]	; (100080a8 <__sinit+0x2c>)
10008096:	681b      	ldr	r3, [r3, #0]
10008098:	2b00      	cmp	r3, #0
1000809a:	d1f5      	bne.n	10008088 <__sinit+0xc>
1000809c:	f7ff ffc4 	bl	10008028 <global_stdio_init.part.0>
100080a0:	e7f2      	b.n	10008088 <__sinit+0xc>
100080a2:	bf00      	nop
100080a4:	10007fe9 	.word	0x10007fe9
100080a8:	100203cc 	.word	0x100203cc

100080ac <_fwalk_sglue>:
100080ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100080b0:	4607      	mov	r7, r0
100080b2:	4688      	mov	r8, r1
100080b4:	4614      	mov	r4, r2
100080b6:	2600      	movs	r6, #0
100080b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
100080bc:	f1b9 0901 	subs.w	r9, r9, #1
100080c0:	d505      	bpl.n	100080ce <_fwalk_sglue+0x22>
100080c2:	6824      	ldr	r4, [r4, #0]
100080c4:	2c00      	cmp	r4, #0
100080c6:	d1f7      	bne.n	100080b8 <_fwalk_sglue+0xc>
100080c8:	4630      	mov	r0, r6
100080ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
100080ce:	89ab      	ldrh	r3, [r5, #12]
100080d0:	2b01      	cmp	r3, #1
100080d2:	d907      	bls.n	100080e4 <_fwalk_sglue+0x38>
100080d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
100080d8:	3301      	adds	r3, #1
100080da:	d003      	beq.n	100080e4 <_fwalk_sglue+0x38>
100080dc:	4629      	mov	r1, r5
100080de:	4638      	mov	r0, r7
100080e0:	47c0      	blx	r8
100080e2:	4306      	orrs	r6, r0
100080e4:	3568      	adds	r5, #104	; 0x68
100080e6:	e7e9      	b.n	100080bc <_fwalk_sglue+0x10>

100080e8 <iprintf>:
100080e8:	b40f      	push	{r0, r1, r2, r3}
100080ea:	b507      	push	{r0, r1, r2, lr}
100080ec:	4906      	ldr	r1, [pc, #24]	; (10008108 <iprintf+0x20>)
100080ee:	ab04      	add	r3, sp, #16
100080f0:	6808      	ldr	r0, [r1, #0]
100080f2:	f853 2b04 	ldr.w	r2, [r3], #4
100080f6:	6881      	ldr	r1, [r0, #8]
100080f8:	9301      	str	r3, [sp, #4]
100080fa:	f002 fd31 	bl	1000ab60 <_vfiprintf_r>
100080fe:	b003      	add	sp, #12
10008100:	f85d eb04 	ldr.w	lr, [sp], #4
10008104:	b004      	add	sp, #16
10008106:	4770      	bx	lr
10008108:	10020064 	.word	0x10020064

1000810c <siprintf>:
1000810c:	b40e      	push	{r1, r2, r3}
1000810e:	b500      	push	{lr}
10008110:	b09c      	sub	sp, #112	; 0x70
10008112:	ab1d      	add	r3, sp, #116	; 0x74
10008114:	9002      	str	r0, [sp, #8]
10008116:	9006      	str	r0, [sp, #24]
10008118:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1000811c:	4809      	ldr	r0, [pc, #36]	; (10008144 <siprintf+0x38>)
1000811e:	9107      	str	r1, [sp, #28]
10008120:	9104      	str	r1, [sp, #16]
10008122:	4909      	ldr	r1, [pc, #36]	; (10008148 <siprintf+0x3c>)
10008124:	f853 2b04 	ldr.w	r2, [r3], #4
10008128:	9105      	str	r1, [sp, #20]
1000812a:	6800      	ldr	r0, [r0, #0]
1000812c:	9301      	str	r3, [sp, #4]
1000812e:	a902      	add	r1, sp, #8
10008130:	f002 fbee 	bl	1000a910 <_svfiprintf_r>
10008134:	9b02      	ldr	r3, [sp, #8]
10008136:	2200      	movs	r2, #0
10008138:	701a      	strb	r2, [r3, #0]
1000813a:	b01c      	add	sp, #112	; 0x70
1000813c:	f85d eb04 	ldr.w	lr, [sp], #4
10008140:	b003      	add	sp, #12
10008142:	4770      	bx	lr
10008144:	10020064 	.word	0x10020064
10008148:	ffff0208 	.word	0xffff0208

1000814c <__sread>:
1000814c:	b510      	push	{r4, lr}
1000814e:	460c      	mov	r4, r1
10008150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10008154:	f000 f86c 	bl	10008230 <_read_r>
10008158:	2800      	cmp	r0, #0
1000815a:	bfab      	itete	ge
1000815c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1000815e:	89a3      	ldrhlt	r3, [r4, #12]
10008160:	181b      	addge	r3, r3, r0
10008162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
10008166:	bfac      	ite	ge
10008168:	6563      	strge	r3, [r4, #84]	; 0x54
1000816a:	81a3      	strhlt	r3, [r4, #12]
1000816c:	bd10      	pop	{r4, pc}

1000816e <__swrite>:
1000816e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
10008172:	461f      	mov	r7, r3
10008174:	898b      	ldrh	r3, [r1, #12]
10008176:	05db      	lsls	r3, r3, #23
10008178:	4605      	mov	r5, r0
1000817a:	460c      	mov	r4, r1
1000817c:	4616      	mov	r6, r2
1000817e:	d505      	bpl.n	1000818c <__swrite+0x1e>
10008180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
10008184:	2302      	movs	r3, #2
10008186:	2200      	movs	r2, #0
10008188:	f000 f840 	bl	1000820c <_lseek_r>
1000818c:	89a3      	ldrh	r3, [r4, #12]
1000818e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
10008192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
10008196:	81a3      	strh	r3, [r4, #12]
10008198:	4632      	mov	r2, r6
1000819a:	463b      	mov	r3, r7
1000819c:	4628      	mov	r0, r5
1000819e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
100081a2:	f000 b857 	b.w	10008254 <_write_r>

100081a6 <__sseek>:
100081a6:	b510      	push	{r4, lr}
100081a8:	460c      	mov	r4, r1
100081aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100081ae:	f000 f82d 	bl	1000820c <_lseek_r>
100081b2:	1c43      	adds	r3, r0, #1
100081b4:	89a3      	ldrh	r3, [r4, #12]
100081b6:	bf15      	itete	ne
100081b8:	6560      	strne	r0, [r4, #84]	; 0x54
100081ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
100081be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
100081c2:	81a3      	strheq	r3, [r4, #12]
100081c4:	bf18      	it	ne
100081c6:	81a3      	strhne	r3, [r4, #12]
100081c8:	bd10      	pop	{r4, pc}

100081ca <__sclose>:
100081ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
100081ce:	f000 b80d 	b.w	100081ec <_close_r>

100081d2 <memset>:
100081d2:	4402      	add	r2, r0
100081d4:	4603      	mov	r3, r0
100081d6:	4293      	cmp	r3, r2
100081d8:	d100      	bne.n	100081dc <memset+0xa>
100081da:	4770      	bx	lr
100081dc:	f803 1b01 	strb.w	r1, [r3], #1
100081e0:	e7f9      	b.n	100081d6 <memset+0x4>
	...

100081e4 <_localeconv_r>:
100081e4:	4800      	ldr	r0, [pc, #0]	; (100081e8 <_localeconv_r+0x4>)
100081e6:	4770      	bx	lr
100081e8:	10020158 	.word	0x10020158

100081ec <_close_r>:
100081ec:	b538      	push	{r3, r4, r5, lr}
100081ee:	4d06      	ldr	r5, [pc, #24]	; (10008208 <_close_r+0x1c>)
100081f0:	2300      	movs	r3, #0
100081f2:	4604      	mov	r4, r0
100081f4:	4608      	mov	r0, r1
100081f6:	602b      	str	r3, [r5, #0]
100081f8:	f7f8 ff5e 	bl	100010b8 <_close>
100081fc:	1c43      	adds	r3, r0, #1
100081fe:	d102      	bne.n	10008206 <_close_r+0x1a>
10008200:	682b      	ldr	r3, [r5, #0]
10008202:	b103      	cbz	r3, 10008206 <_close_r+0x1a>
10008204:	6023      	str	r3, [r4, #0]
10008206:	bd38      	pop	{r3, r4, r5, pc}
10008208:	100203d0 	.word	0x100203d0

1000820c <_lseek_r>:
1000820c:	b538      	push	{r3, r4, r5, lr}
1000820e:	4d07      	ldr	r5, [pc, #28]	; (1000822c <_lseek_r+0x20>)
10008210:	4604      	mov	r4, r0
10008212:	4608      	mov	r0, r1
10008214:	4611      	mov	r1, r2
10008216:	2200      	movs	r2, #0
10008218:	602a      	str	r2, [r5, #0]
1000821a:	461a      	mov	r2, r3
1000821c:	f7f8 ff73 	bl	10001106 <_lseek>
10008220:	1c43      	adds	r3, r0, #1
10008222:	d102      	bne.n	1000822a <_lseek_r+0x1e>
10008224:	682b      	ldr	r3, [r5, #0]
10008226:	b103      	cbz	r3, 1000822a <_lseek_r+0x1e>
10008228:	6023      	str	r3, [r4, #0]
1000822a:	bd38      	pop	{r3, r4, r5, pc}
1000822c:	100203d0 	.word	0x100203d0

10008230 <_read_r>:
10008230:	b538      	push	{r3, r4, r5, lr}
10008232:	4d07      	ldr	r5, [pc, #28]	; (10008250 <_read_r+0x20>)
10008234:	4604      	mov	r4, r0
10008236:	4608      	mov	r0, r1
10008238:	4611      	mov	r1, r2
1000823a:	2200      	movs	r2, #0
1000823c:	602a      	str	r2, [r5, #0]
1000823e:	461a      	mov	r2, r3
10008240:	f7f8 ff01 	bl	10001046 <_read>
10008244:	1c43      	adds	r3, r0, #1
10008246:	d102      	bne.n	1000824e <_read_r+0x1e>
10008248:	682b      	ldr	r3, [r5, #0]
1000824a:	b103      	cbz	r3, 1000824e <_read_r+0x1e>
1000824c:	6023      	str	r3, [r4, #0]
1000824e:	bd38      	pop	{r3, r4, r5, pc}
10008250:	100203d0 	.word	0x100203d0

10008254 <_write_r>:
10008254:	b538      	push	{r3, r4, r5, lr}
10008256:	4d07      	ldr	r5, [pc, #28]	; (10008274 <_write_r+0x20>)
10008258:	4604      	mov	r4, r0
1000825a:	4608      	mov	r0, r1
1000825c:	4611      	mov	r1, r2
1000825e:	2200      	movs	r2, #0
10008260:	602a      	str	r2, [r5, #0]
10008262:	461a      	mov	r2, r3
10008264:	f7f8 ff0c 	bl	10001080 <_write>
10008268:	1c43      	adds	r3, r0, #1
1000826a:	d102      	bne.n	10008272 <_write_r+0x1e>
1000826c:	682b      	ldr	r3, [r5, #0]
1000826e:	b103      	cbz	r3, 10008272 <_write_r+0x1e>
10008270:	6023      	str	r3, [r4, #0]
10008272:	bd38      	pop	{r3, r4, r5, pc}
10008274:	100203d0 	.word	0x100203d0

10008278 <__errno>:
10008278:	4b01      	ldr	r3, [pc, #4]	; (10008280 <__errno+0x8>)
1000827a:	6818      	ldr	r0, [r3, #0]
1000827c:	4770      	bx	lr
1000827e:	bf00      	nop
10008280:	10020064 	.word	0x10020064

10008284 <__libc_init_array>:
10008284:	b570      	push	{r4, r5, r6, lr}
10008286:	4d0d      	ldr	r5, [pc, #52]	; (100082bc <__libc_init_array+0x38>)
10008288:	4c0d      	ldr	r4, [pc, #52]	; (100082c0 <__libc_init_array+0x3c>)
1000828a:	1b64      	subs	r4, r4, r5
1000828c:	10a4      	asrs	r4, r4, #2
1000828e:	2600      	movs	r6, #0
10008290:	42a6      	cmp	r6, r4
10008292:	d109      	bne.n	100082a8 <__libc_init_array+0x24>
10008294:	4d0b      	ldr	r5, [pc, #44]	; (100082c4 <__libc_init_array+0x40>)
10008296:	4c0c      	ldr	r4, [pc, #48]	; (100082c8 <__libc_init_array+0x44>)
10008298:	f003 fbd6 	bl	1000ba48 <_init>
1000829c:	1b64      	subs	r4, r4, r5
1000829e:	10a4      	asrs	r4, r4, #2
100082a0:	2600      	movs	r6, #0
100082a2:	42a6      	cmp	r6, r4
100082a4:	d105      	bne.n	100082b2 <__libc_init_array+0x2e>
100082a6:	bd70      	pop	{r4, r5, r6, pc}
100082a8:	f855 3b04 	ldr.w	r3, [r5], #4
100082ac:	4798      	blx	r3
100082ae:	3601      	adds	r6, #1
100082b0:	e7ee      	b.n	10008290 <__libc_init_array+0xc>
100082b2:	f855 3b04 	ldr.w	r3, [r5], #4
100082b6:	4798      	blx	r3
100082b8:	3601      	adds	r6, #1
100082ba:	e7f2      	b.n	100082a2 <__libc_init_array+0x1e>
100082bc:	1000bfe8 	.word	0x1000bfe8
100082c0:	1000bfe8 	.word	0x1000bfe8
100082c4:	1000bfe8 	.word	0x1000bfe8
100082c8:	1000bfec 	.word	0x1000bfec

100082cc <__retarget_lock_init_recursive>:
100082cc:	4770      	bx	lr

100082ce <__retarget_lock_acquire_recursive>:
100082ce:	4770      	bx	lr

100082d0 <__retarget_lock_release_recursive>:
100082d0:	4770      	bx	lr
	...

100082d4 <nanf>:
100082d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 100082dc <nanf+0x8>
100082d8:	4770      	bx	lr
100082da:	bf00      	nop
100082dc:	7fc00000 	.word	0x7fc00000

100082e0 <quorem>:
100082e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
100082e4:	6903      	ldr	r3, [r0, #16]
100082e6:	690c      	ldr	r4, [r1, #16]
100082e8:	42a3      	cmp	r3, r4
100082ea:	4607      	mov	r7, r0
100082ec:	db7e      	blt.n	100083ec <quorem+0x10c>
100082ee:	3c01      	subs	r4, #1
100082f0:	f101 0814 	add.w	r8, r1, #20
100082f4:	f100 0514 	add.w	r5, r0, #20
100082f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
100082fc:	9301      	str	r3, [sp, #4]
100082fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
10008302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
10008306:	3301      	adds	r3, #1
10008308:	429a      	cmp	r2, r3
1000830a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
1000830e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
10008312:	fbb2 f6f3 	udiv	r6, r2, r3
10008316:	d331      	bcc.n	1000837c <quorem+0x9c>
10008318:	f04f 0e00 	mov.w	lr, #0
1000831c:	4640      	mov	r0, r8
1000831e:	46ac      	mov	ip, r5
10008320:	46f2      	mov	sl, lr
10008322:	f850 2b04 	ldr.w	r2, [r0], #4
10008326:	b293      	uxth	r3, r2
10008328:	fb06 e303 	mla	r3, r6, r3, lr
1000832c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
10008330:	0c1a      	lsrs	r2, r3, #16
10008332:	b29b      	uxth	r3, r3
10008334:	ebaa 0303 	sub.w	r3, sl, r3
10008338:	f8dc a000 	ldr.w	sl, [ip]
1000833c:	fa13 f38a 	uxtah	r3, r3, sl
10008340:	fb06 220e 	mla	r2, r6, lr, r2
10008344:	9300      	str	r3, [sp, #0]
10008346:	9b00      	ldr	r3, [sp, #0]
10008348:	ea4f 4e12 	mov.w	lr, r2, lsr #16
1000834c:	b292      	uxth	r2, r2
1000834e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
10008352:	eb02 4223 	add.w	r2, r2, r3, asr #16
10008356:	f8bd 3000 	ldrh.w	r3, [sp]
1000835a:	4581      	cmp	r9, r0
1000835c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
10008360:	f84c 3b04 	str.w	r3, [ip], #4
10008364:	ea4f 4a22 	mov.w	sl, r2, asr #16
10008368:	d2db      	bcs.n	10008322 <quorem+0x42>
1000836a:	f855 300b 	ldr.w	r3, [r5, fp]
1000836e:	b92b      	cbnz	r3, 1000837c <quorem+0x9c>
10008370:	9b01      	ldr	r3, [sp, #4]
10008372:	3b04      	subs	r3, #4
10008374:	429d      	cmp	r5, r3
10008376:	461a      	mov	r2, r3
10008378:	d32c      	bcc.n	100083d4 <quorem+0xf4>
1000837a:	613c      	str	r4, [r7, #16]
1000837c:	4638      	mov	r0, r7
1000837e:	f001 f9ef 	bl	10009760 <__mcmp>
10008382:	2800      	cmp	r0, #0
10008384:	db22      	blt.n	100083cc <quorem+0xec>
10008386:	3601      	adds	r6, #1
10008388:	4629      	mov	r1, r5
1000838a:	2000      	movs	r0, #0
1000838c:	f858 2b04 	ldr.w	r2, [r8], #4
10008390:	f8d1 c000 	ldr.w	ip, [r1]
10008394:	b293      	uxth	r3, r2
10008396:	1ac3      	subs	r3, r0, r3
10008398:	0c12      	lsrs	r2, r2, #16
1000839a:	fa13 f38c 	uxtah	r3, r3, ip
1000839e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
100083a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
100083a6:	b29b      	uxth	r3, r3
100083a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
100083ac:	45c1      	cmp	r9, r8
100083ae:	f841 3b04 	str.w	r3, [r1], #4
100083b2:	ea4f 4022 	mov.w	r0, r2, asr #16
100083b6:	d2e9      	bcs.n	1000838c <quorem+0xac>
100083b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
100083bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
100083c0:	b922      	cbnz	r2, 100083cc <quorem+0xec>
100083c2:	3b04      	subs	r3, #4
100083c4:	429d      	cmp	r5, r3
100083c6:	461a      	mov	r2, r3
100083c8:	d30a      	bcc.n	100083e0 <quorem+0x100>
100083ca:	613c      	str	r4, [r7, #16]
100083cc:	4630      	mov	r0, r6
100083ce:	b003      	add	sp, #12
100083d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100083d4:	6812      	ldr	r2, [r2, #0]
100083d6:	3b04      	subs	r3, #4
100083d8:	2a00      	cmp	r2, #0
100083da:	d1ce      	bne.n	1000837a <quorem+0x9a>
100083dc:	3c01      	subs	r4, #1
100083de:	e7c9      	b.n	10008374 <quorem+0x94>
100083e0:	6812      	ldr	r2, [r2, #0]
100083e2:	3b04      	subs	r3, #4
100083e4:	2a00      	cmp	r2, #0
100083e6:	d1f0      	bne.n	100083ca <quorem+0xea>
100083e8:	3c01      	subs	r4, #1
100083ea:	e7eb      	b.n	100083c4 <quorem+0xe4>
100083ec:	2000      	movs	r0, #0
100083ee:	e7ee      	b.n	100083ce <quorem+0xee>

100083f0 <_dtoa_r>:
100083f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
100083f4:	ed2d 8b04 	vpush	{d8-d9}
100083f8:	69c5      	ldr	r5, [r0, #28]
100083fa:	b093      	sub	sp, #76	; 0x4c
100083fc:	ed8d 0b02 	vstr	d0, [sp, #8]
10008400:	ec57 6b10 	vmov	r6, r7, d0
10008404:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
10008408:	9107      	str	r1, [sp, #28]
1000840a:	4604      	mov	r4, r0
1000840c:	920a      	str	r2, [sp, #40]	; 0x28
1000840e:	930d      	str	r3, [sp, #52]	; 0x34
10008410:	b975      	cbnz	r5, 10008430 <_dtoa_r+0x40>
10008412:	2010      	movs	r0, #16
10008414:	f000 fe2a 	bl	1000906c <malloc>
10008418:	4602      	mov	r2, r0
1000841a:	61e0      	str	r0, [r4, #28]
1000841c:	b920      	cbnz	r0, 10008428 <_dtoa_r+0x38>
1000841e:	4bae      	ldr	r3, [pc, #696]	; (100086d8 <_dtoa_r+0x2e8>)
10008420:	21ef      	movs	r1, #239	; 0xef
10008422:	48ae      	ldr	r0, [pc, #696]	; (100086dc <_dtoa_r+0x2ec>)
10008424:	f002 fe4c 	bl	1000b0c0 <__assert_func>
10008428:	e9c0 5501 	strd	r5, r5, [r0, #4]
1000842c:	6005      	str	r5, [r0, #0]
1000842e:	60c5      	str	r5, [r0, #12]
10008430:	69e3      	ldr	r3, [r4, #28]
10008432:	6819      	ldr	r1, [r3, #0]
10008434:	b151      	cbz	r1, 1000844c <_dtoa_r+0x5c>
10008436:	685a      	ldr	r2, [r3, #4]
10008438:	604a      	str	r2, [r1, #4]
1000843a:	2301      	movs	r3, #1
1000843c:	4093      	lsls	r3, r2
1000843e:	608b      	str	r3, [r1, #8]
10008440:	4620      	mov	r0, r4
10008442:	f000 ff07 	bl	10009254 <_Bfree>
10008446:	69e3      	ldr	r3, [r4, #28]
10008448:	2200      	movs	r2, #0
1000844a:	601a      	str	r2, [r3, #0]
1000844c:	1e3b      	subs	r3, r7, #0
1000844e:	bfbb      	ittet	lt
10008450:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
10008454:	9303      	strlt	r3, [sp, #12]
10008456:	2300      	movge	r3, #0
10008458:	2201      	movlt	r2, #1
1000845a:	bfac      	ite	ge
1000845c:	f8c8 3000 	strge.w	r3, [r8]
10008460:	f8c8 2000 	strlt.w	r2, [r8]
10008464:	4b9e      	ldr	r3, [pc, #632]	; (100086e0 <_dtoa_r+0x2f0>)
10008466:	f8dd 800c 	ldr.w	r8, [sp, #12]
1000846a:	ea33 0308 	bics.w	r3, r3, r8
1000846e:	d11b      	bne.n	100084a8 <_dtoa_r+0xb8>
10008470:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10008472:	f242 730f 	movw	r3, #9999	; 0x270f
10008476:	6013      	str	r3, [r2, #0]
10008478:	f3c8 0313 	ubfx	r3, r8, #0, #20
1000847c:	4333      	orrs	r3, r6
1000847e:	f000 8593 	beq.w	10008fa8 <_dtoa_r+0xbb8>
10008482:	9b21      	ldr	r3, [sp, #132]	; 0x84
10008484:	b963      	cbnz	r3, 100084a0 <_dtoa_r+0xb0>
10008486:	4b97      	ldr	r3, [pc, #604]	; (100086e4 <_dtoa_r+0x2f4>)
10008488:	e027      	b.n	100084da <_dtoa_r+0xea>
1000848a:	4b97      	ldr	r3, [pc, #604]	; (100086e8 <_dtoa_r+0x2f8>)
1000848c:	9300      	str	r3, [sp, #0]
1000848e:	3308      	adds	r3, #8
10008490:	9a21      	ldr	r2, [sp, #132]	; 0x84
10008492:	6013      	str	r3, [r2, #0]
10008494:	9800      	ldr	r0, [sp, #0]
10008496:	b013      	add	sp, #76	; 0x4c
10008498:	ecbd 8b04 	vpop	{d8-d9}
1000849c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
100084a0:	4b90      	ldr	r3, [pc, #576]	; (100086e4 <_dtoa_r+0x2f4>)
100084a2:	9300      	str	r3, [sp, #0]
100084a4:	3303      	adds	r3, #3
100084a6:	e7f3      	b.n	10008490 <_dtoa_r+0xa0>
100084a8:	ed9d 7b02 	vldr	d7, [sp, #8]
100084ac:	2200      	movs	r2, #0
100084ae:	ec51 0b17 	vmov	r0, r1, d7
100084b2:	eeb0 8a47 	vmov.f32	s16, s14
100084b6:	eef0 8a67 	vmov.f32	s17, s15
100084ba:	2300      	movs	r3, #0
100084bc:	f7f8 fa3c 	bl	10000938 <__aeabi_dcmpeq>
100084c0:	4681      	mov	r9, r0
100084c2:	b160      	cbz	r0, 100084de <_dtoa_r+0xee>
100084c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
100084c6:	2301      	movs	r3, #1
100084c8:	6013      	str	r3, [r2, #0]
100084ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
100084cc:	2b00      	cmp	r3, #0
100084ce:	f000 8568 	beq.w	10008fa2 <_dtoa_r+0xbb2>
100084d2:	4b86      	ldr	r3, [pc, #536]	; (100086ec <_dtoa_r+0x2fc>)
100084d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
100084d6:	6013      	str	r3, [r2, #0]
100084d8:	3b01      	subs	r3, #1
100084da:	9300      	str	r3, [sp, #0]
100084dc:	e7da      	b.n	10008494 <_dtoa_r+0xa4>
100084de:	aa10      	add	r2, sp, #64	; 0x40
100084e0:	a911      	add	r1, sp, #68	; 0x44
100084e2:	4620      	mov	r0, r4
100084e4:	eeb0 0a48 	vmov.f32	s0, s16
100084e8:	eef0 0a68 	vmov.f32	s1, s17
100084ec:	f001 fa4e 	bl	1000998c <__d2b>
100084f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
100084f4:	4682      	mov	sl, r0
100084f6:	2d00      	cmp	r5, #0
100084f8:	d07f      	beq.n	100085fa <_dtoa_r+0x20a>
100084fa:	ee18 3a90 	vmov	r3, s17
100084fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
10008502:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
10008506:	ec51 0b18 	vmov	r0, r1, d8
1000850a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
1000850e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
10008512:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
10008516:	4619      	mov	r1, r3
10008518:	2200      	movs	r2, #0
1000851a:	4b75      	ldr	r3, [pc, #468]	; (100086f0 <_dtoa_r+0x300>)
1000851c:	f7f7 fdec 	bl	100000f8 <__aeabi_dsub>
10008520:	a367      	add	r3, pc, #412	; (adr r3, 100086c0 <_dtoa_r+0x2d0>)
10008522:	e9d3 2300 	ldrd	r2, r3, [r3]
10008526:	f7f7 ff9f 	bl	10000468 <__aeabi_dmul>
1000852a:	a367      	add	r3, pc, #412	; (adr r3, 100086c8 <_dtoa_r+0x2d8>)
1000852c:	e9d3 2300 	ldrd	r2, r3, [r3]
10008530:	f7f7 fde4 	bl	100000fc <__adddf3>
10008534:	4606      	mov	r6, r0
10008536:	4628      	mov	r0, r5
10008538:	460f      	mov	r7, r1
1000853a:	f7f7 ff2b 	bl	10000394 <__aeabi_i2d>
1000853e:	a364      	add	r3, pc, #400	; (adr r3, 100086d0 <_dtoa_r+0x2e0>)
10008540:	e9d3 2300 	ldrd	r2, r3, [r3]
10008544:	f7f7 ff90 	bl	10000468 <__aeabi_dmul>
10008548:	4602      	mov	r2, r0
1000854a:	460b      	mov	r3, r1
1000854c:	4630      	mov	r0, r6
1000854e:	4639      	mov	r1, r7
10008550:	f7f7 fdd4 	bl	100000fc <__adddf3>
10008554:	4606      	mov	r6, r0
10008556:	460f      	mov	r7, r1
10008558:	f7f8 fa36 	bl	100009c8 <__aeabi_d2iz>
1000855c:	2200      	movs	r2, #0
1000855e:	4683      	mov	fp, r0
10008560:	2300      	movs	r3, #0
10008562:	4630      	mov	r0, r6
10008564:	4639      	mov	r1, r7
10008566:	f7f8 f9f1 	bl	1000094c <__aeabi_dcmplt>
1000856a:	b148      	cbz	r0, 10008580 <_dtoa_r+0x190>
1000856c:	4658      	mov	r0, fp
1000856e:	f7f7 ff11 	bl	10000394 <__aeabi_i2d>
10008572:	4632      	mov	r2, r6
10008574:	463b      	mov	r3, r7
10008576:	f7f8 f9df 	bl	10000938 <__aeabi_dcmpeq>
1000857a:	b908      	cbnz	r0, 10008580 <_dtoa_r+0x190>
1000857c:	f10b 3bff 	add.w	fp, fp, #4294967295
10008580:	f1bb 0f16 	cmp.w	fp, #22
10008584:	d857      	bhi.n	10008636 <_dtoa_r+0x246>
10008586:	4b5b      	ldr	r3, [pc, #364]	; (100086f4 <_dtoa_r+0x304>)
10008588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
1000858c:	e9d3 2300 	ldrd	r2, r3, [r3]
10008590:	ec51 0b18 	vmov	r0, r1, d8
10008594:	f7f8 f9da 	bl	1000094c <__aeabi_dcmplt>
10008598:	2800      	cmp	r0, #0
1000859a:	d04e      	beq.n	1000863a <_dtoa_r+0x24a>
1000859c:	f10b 3bff 	add.w	fp, fp, #4294967295
100085a0:	2300      	movs	r3, #0
100085a2:	930c      	str	r3, [sp, #48]	; 0x30
100085a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
100085a6:	1b5b      	subs	r3, r3, r5
100085a8:	1e5a      	subs	r2, r3, #1
100085aa:	bf45      	ittet	mi
100085ac:	f1c3 0301 	rsbmi	r3, r3, #1
100085b0:	9305      	strmi	r3, [sp, #20]
100085b2:	2300      	movpl	r3, #0
100085b4:	2300      	movmi	r3, #0
100085b6:	9206      	str	r2, [sp, #24]
100085b8:	bf54      	ite	pl
100085ba:	9305      	strpl	r3, [sp, #20]
100085bc:	9306      	strmi	r3, [sp, #24]
100085be:	f1bb 0f00 	cmp.w	fp, #0
100085c2:	db3c      	blt.n	1000863e <_dtoa_r+0x24e>
100085c4:	9b06      	ldr	r3, [sp, #24]
100085c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
100085ca:	445b      	add	r3, fp
100085cc:	9306      	str	r3, [sp, #24]
100085ce:	2300      	movs	r3, #0
100085d0:	9308      	str	r3, [sp, #32]
100085d2:	9b07      	ldr	r3, [sp, #28]
100085d4:	2b09      	cmp	r3, #9
100085d6:	d868      	bhi.n	100086aa <_dtoa_r+0x2ba>
100085d8:	2b05      	cmp	r3, #5
100085da:	bfc4      	itt	gt
100085dc:	3b04      	subgt	r3, #4
100085de:	9307      	strgt	r3, [sp, #28]
100085e0:	9b07      	ldr	r3, [sp, #28]
100085e2:	f1a3 0302 	sub.w	r3, r3, #2
100085e6:	bfcc      	ite	gt
100085e8:	2500      	movgt	r5, #0
100085ea:	2501      	movle	r5, #1
100085ec:	2b03      	cmp	r3, #3
100085ee:	f200 8085 	bhi.w	100086fc <_dtoa_r+0x30c>
100085f2:	e8df f003 	tbb	[pc, r3]
100085f6:	3b2e      	.short	0x3b2e
100085f8:	5839      	.short	0x5839
100085fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
100085fe:	441d      	add	r5, r3
10008600:	f205 4332 	addw	r3, r5, #1074	; 0x432
10008604:	2b20      	cmp	r3, #32
10008606:	bfc1      	itttt	gt
10008608:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
1000860c:	fa08 f803 	lslgt.w	r8, r8, r3
10008610:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
10008614:	fa26 f303 	lsrgt.w	r3, r6, r3
10008618:	bfd6      	itet	le
1000861a:	f1c3 0320 	rsble	r3, r3, #32
1000861e:	ea48 0003 	orrgt.w	r0, r8, r3
10008622:	fa06 f003 	lslle.w	r0, r6, r3
10008626:	f7f7 fea5 	bl	10000374 <__aeabi_ui2d>
1000862a:	2201      	movs	r2, #1
1000862c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
10008630:	3d01      	subs	r5, #1
10008632:	920e      	str	r2, [sp, #56]	; 0x38
10008634:	e76f      	b.n	10008516 <_dtoa_r+0x126>
10008636:	2301      	movs	r3, #1
10008638:	e7b3      	b.n	100085a2 <_dtoa_r+0x1b2>
1000863a:	900c      	str	r0, [sp, #48]	; 0x30
1000863c:	e7b2      	b.n	100085a4 <_dtoa_r+0x1b4>
1000863e:	9b05      	ldr	r3, [sp, #20]
10008640:	eba3 030b 	sub.w	r3, r3, fp
10008644:	9305      	str	r3, [sp, #20]
10008646:	f1cb 0300 	rsb	r3, fp, #0
1000864a:	9308      	str	r3, [sp, #32]
1000864c:	2300      	movs	r3, #0
1000864e:	930b      	str	r3, [sp, #44]	; 0x2c
10008650:	e7bf      	b.n	100085d2 <_dtoa_r+0x1e2>
10008652:	2300      	movs	r3, #0
10008654:	9309      	str	r3, [sp, #36]	; 0x24
10008656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008658:	2b00      	cmp	r3, #0
1000865a:	dc52      	bgt.n	10008702 <_dtoa_r+0x312>
1000865c:	2301      	movs	r3, #1
1000865e:	9301      	str	r3, [sp, #4]
10008660:	9304      	str	r3, [sp, #16]
10008662:	461a      	mov	r2, r3
10008664:	920a      	str	r2, [sp, #40]	; 0x28
10008666:	e00b      	b.n	10008680 <_dtoa_r+0x290>
10008668:	2301      	movs	r3, #1
1000866a:	e7f3      	b.n	10008654 <_dtoa_r+0x264>
1000866c:	2300      	movs	r3, #0
1000866e:	9309      	str	r3, [sp, #36]	; 0x24
10008670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008672:	445b      	add	r3, fp
10008674:	9301      	str	r3, [sp, #4]
10008676:	3301      	adds	r3, #1
10008678:	2b01      	cmp	r3, #1
1000867a:	9304      	str	r3, [sp, #16]
1000867c:	bfb8      	it	lt
1000867e:	2301      	movlt	r3, #1
10008680:	69e0      	ldr	r0, [r4, #28]
10008682:	2100      	movs	r1, #0
10008684:	2204      	movs	r2, #4
10008686:	f102 0614 	add.w	r6, r2, #20
1000868a:	429e      	cmp	r6, r3
1000868c:	d93d      	bls.n	1000870a <_dtoa_r+0x31a>
1000868e:	6041      	str	r1, [r0, #4]
10008690:	4620      	mov	r0, r4
10008692:	f000 fd9f 	bl	100091d4 <_Balloc>
10008696:	9000      	str	r0, [sp, #0]
10008698:	2800      	cmp	r0, #0
1000869a:	d139      	bne.n	10008710 <_dtoa_r+0x320>
1000869c:	4b16      	ldr	r3, [pc, #88]	; (100086f8 <_dtoa_r+0x308>)
1000869e:	4602      	mov	r2, r0
100086a0:	f240 11af 	movw	r1, #431	; 0x1af
100086a4:	e6bd      	b.n	10008422 <_dtoa_r+0x32>
100086a6:	2301      	movs	r3, #1
100086a8:	e7e1      	b.n	1000866e <_dtoa_r+0x27e>
100086aa:	2501      	movs	r5, #1
100086ac:	2300      	movs	r3, #0
100086ae:	9307      	str	r3, [sp, #28]
100086b0:	9509      	str	r5, [sp, #36]	; 0x24
100086b2:	f04f 33ff 	mov.w	r3, #4294967295
100086b6:	9301      	str	r3, [sp, #4]
100086b8:	9304      	str	r3, [sp, #16]
100086ba:	2200      	movs	r2, #0
100086bc:	2312      	movs	r3, #18
100086be:	e7d1      	b.n	10008664 <_dtoa_r+0x274>
100086c0:	636f4361 	.word	0x636f4361
100086c4:	3fd287a7 	.word	0x3fd287a7
100086c8:	8b60c8b3 	.word	0x8b60c8b3
100086cc:	3fc68a28 	.word	0x3fc68a28
100086d0:	509f79fb 	.word	0x509f79fb
100086d4:	3fd34413 	.word	0x3fd34413
100086d8:	1000bc02 	.word	0x1000bc02
100086dc:	1000bc19 	.word	0x1000bc19
100086e0:	7ff00000 	.word	0x7ff00000
100086e4:	1000bbfe 	.word	0x1000bbfe
100086e8:	1000bbf5 	.word	0x1000bbf5
100086ec:	1000bbcd 	.word	0x1000bbcd
100086f0:	3ff80000 	.word	0x3ff80000
100086f4:	1000bd08 	.word	0x1000bd08
100086f8:	1000bc71 	.word	0x1000bc71
100086fc:	2301      	movs	r3, #1
100086fe:	9309      	str	r3, [sp, #36]	; 0x24
10008700:	e7d7      	b.n	100086b2 <_dtoa_r+0x2c2>
10008702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008704:	9301      	str	r3, [sp, #4]
10008706:	9304      	str	r3, [sp, #16]
10008708:	e7ba      	b.n	10008680 <_dtoa_r+0x290>
1000870a:	3101      	adds	r1, #1
1000870c:	0052      	lsls	r2, r2, #1
1000870e:	e7ba      	b.n	10008686 <_dtoa_r+0x296>
10008710:	69e3      	ldr	r3, [r4, #28]
10008712:	9a00      	ldr	r2, [sp, #0]
10008714:	601a      	str	r2, [r3, #0]
10008716:	9b04      	ldr	r3, [sp, #16]
10008718:	2b0e      	cmp	r3, #14
1000871a:	f200 80a8 	bhi.w	1000886e <_dtoa_r+0x47e>
1000871e:	2d00      	cmp	r5, #0
10008720:	f000 80a5 	beq.w	1000886e <_dtoa_r+0x47e>
10008724:	f1bb 0f00 	cmp.w	fp, #0
10008728:	dd38      	ble.n	1000879c <_dtoa_r+0x3ac>
1000872a:	4bc0      	ldr	r3, [pc, #768]	; (10008a2c <_dtoa_r+0x63c>)
1000872c:	f00b 020f 	and.w	r2, fp, #15
10008730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
10008734:	f41b 7f80 	tst.w	fp, #256	; 0x100
10008738:	e9d3 6700 	ldrd	r6, r7, [r3]
1000873c:	ea4f 182b 	mov.w	r8, fp, asr #4
10008740:	d019      	beq.n	10008776 <_dtoa_r+0x386>
10008742:	4bbb      	ldr	r3, [pc, #748]	; (10008a30 <_dtoa_r+0x640>)
10008744:	ec51 0b18 	vmov	r0, r1, d8
10008748:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1000874c:	f7f7 ffb6 	bl	100006bc <__aeabi_ddiv>
10008750:	e9cd 0102 	strd	r0, r1, [sp, #8]
10008754:	f008 080f 	and.w	r8, r8, #15
10008758:	2503      	movs	r5, #3
1000875a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 10008a30 <_dtoa_r+0x640>
1000875e:	f1b8 0f00 	cmp.w	r8, #0
10008762:	d10a      	bne.n	1000877a <_dtoa_r+0x38a>
10008764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
10008768:	4632      	mov	r2, r6
1000876a:	463b      	mov	r3, r7
1000876c:	f7f7 ffa6 	bl	100006bc <__aeabi_ddiv>
10008770:	e9cd 0102 	strd	r0, r1, [sp, #8]
10008774:	e02b      	b.n	100087ce <_dtoa_r+0x3de>
10008776:	2502      	movs	r5, #2
10008778:	e7ef      	b.n	1000875a <_dtoa_r+0x36a>
1000877a:	f018 0f01 	tst.w	r8, #1
1000877e:	d008      	beq.n	10008792 <_dtoa_r+0x3a2>
10008780:	4630      	mov	r0, r6
10008782:	4639      	mov	r1, r7
10008784:	e9d9 2300 	ldrd	r2, r3, [r9]
10008788:	f7f7 fe6e 	bl	10000468 <__aeabi_dmul>
1000878c:	3501      	adds	r5, #1
1000878e:	4606      	mov	r6, r0
10008790:	460f      	mov	r7, r1
10008792:	ea4f 0868 	mov.w	r8, r8, asr #1
10008796:	f109 0908 	add.w	r9, r9, #8
1000879a:	e7e0      	b.n	1000875e <_dtoa_r+0x36e>
1000879c:	f000 809f 	beq.w	100088de <_dtoa_r+0x4ee>
100087a0:	f1cb 0600 	rsb	r6, fp, #0
100087a4:	4ba1      	ldr	r3, [pc, #644]	; (10008a2c <_dtoa_r+0x63c>)
100087a6:	4fa2      	ldr	r7, [pc, #648]	; (10008a30 <_dtoa_r+0x640>)
100087a8:	f006 020f 	and.w	r2, r6, #15
100087ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
100087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
100087b4:	ec51 0b18 	vmov	r0, r1, d8
100087b8:	f7f7 fe56 	bl	10000468 <__aeabi_dmul>
100087bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
100087c0:	1136      	asrs	r6, r6, #4
100087c2:	2300      	movs	r3, #0
100087c4:	2502      	movs	r5, #2
100087c6:	2e00      	cmp	r6, #0
100087c8:	d17e      	bne.n	100088c8 <_dtoa_r+0x4d8>
100087ca:	2b00      	cmp	r3, #0
100087cc:	d1d0      	bne.n	10008770 <_dtoa_r+0x380>
100087ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100087d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
100087d4:	2b00      	cmp	r3, #0
100087d6:	f000 8084 	beq.w	100088e2 <_dtoa_r+0x4f2>
100087da:	4b96      	ldr	r3, [pc, #600]	; (10008a34 <_dtoa_r+0x644>)
100087dc:	2200      	movs	r2, #0
100087de:	4640      	mov	r0, r8
100087e0:	4649      	mov	r1, r9
100087e2:	f7f8 f8b3 	bl	1000094c <__aeabi_dcmplt>
100087e6:	2800      	cmp	r0, #0
100087e8:	d07b      	beq.n	100088e2 <_dtoa_r+0x4f2>
100087ea:	9b04      	ldr	r3, [sp, #16]
100087ec:	2b00      	cmp	r3, #0
100087ee:	d078      	beq.n	100088e2 <_dtoa_r+0x4f2>
100087f0:	9b01      	ldr	r3, [sp, #4]
100087f2:	2b00      	cmp	r3, #0
100087f4:	dd39      	ble.n	1000886a <_dtoa_r+0x47a>
100087f6:	4b90      	ldr	r3, [pc, #576]	; (10008a38 <_dtoa_r+0x648>)
100087f8:	2200      	movs	r2, #0
100087fa:	4640      	mov	r0, r8
100087fc:	4649      	mov	r1, r9
100087fe:	f7f7 fe33 	bl	10000468 <__aeabi_dmul>
10008802:	e9cd 0102 	strd	r0, r1, [sp, #8]
10008806:	9e01      	ldr	r6, [sp, #4]
10008808:	f10b 37ff 	add.w	r7, fp, #4294967295
1000880c:	3501      	adds	r5, #1
1000880e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
10008812:	4628      	mov	r0, r5
10008814:	f7f7 fdbe 	bl	10000394 <__aeabi_i2d>
10008818:	4642      	mov	r2, r8
1000881a:	464b      	mov	r3, r9
1000881c:	f7f7 fe24 	bl	10000468 <__aeabi_dmul>
10008820:	4b86      	ldr	r3, [pc, #536]	; (10008a3c <_dtoa_r+0x64c>)
10008822:	2200      	movs	r2, #0
10008824:	f7f7 fc6a 	bl	100000fc <__adddf3>
10008828:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
1000882c:	e9cd 0102 	strd	r0, r1, [sp, #8]
10008830:	9303      	str	r3, [sp, #12]
10008832:	2e00      	cmp	r6, #0
10008834:	d158      	bne.n	100088e8 <_dtoa_r+0x4f8>
10008836:	4b82      	ldr	r3, [pc, #520]	; (10008a40 <_dtoa_r+0x650>)
10008838:	2200      	movs	r2, #0
1000883a:	4640      	mov	r0, r8
1000883c:	4649      	mov	r1, r9
1000883e:	f7f7 fc5b 	bl	100000f8 <__aeabi_dsub>
10008842:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
10008846:	4680      	mov	r8, r0
10008848:	4689      	mov	r9, r1
1000884a:	f7f8 f89d 	bl	10000988 <__aeabi_dcmpgt>
1000884e:	2800      	cmp	r0, #0
10008850:	f040 8296 	bne.w	10008d80 <_dtoa_r+0x990>
10008854:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
10008858:	4640      	mov	r0, r8
1000885a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1000885e:	4649      	mov	r1, r9
10008860:	f7f8 f874 	bl	1000094c <__aeabi_dcmplt>
10008864:	2800      	cmp	r0, #0
10008866:	f040 8289 	bne.w	10008d7c <_dtoa_r+0x98c>
1000886a:	ed8d 8b02 	vstr	d8, [sp, #8]
1000886e:	9b11      	ldr	r3, [sp, #68]	; 0x44
10008870:	2b00      	cmp	r3, #0
10008872:	f2c0 814e 	blt.w	10008b12 <_dtoa_r+0x722>
10008876:	f1bb 0f0e 	cmp.w	fp, #14
1000887a:	f300 814a 	bgt.w	10008b12 <_dtoa_r+0x722>
1000887e:	4b6b      	ldr	r3, [pc, #428]	; (10008a2c <_dtoa_r+0x63c>)
10008880:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
10008884:	e9d3 8900 	ldrd	r8, r9, [r3]
10008888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1000888a:	2b00      	cmp	r3, #0
1000888c:	f280 80dc 	bge.w	10008a48 <_dtoa_r+0x658>
10008890:	9b04      	ldr	r3, [sp, #16]
10008892:	2b00      	cmp	r3, #0
10008894:	f300 80d8 	bgt.w	10008a48 <_dtoa_r+0x658>
10008898:	f040 826f 	bne.w	10008d7a <_dtoa_r+0x98a>
1000889c:	4b68      	ldr	r3, [pc, #416]	; (10008a40 <_dtoa_r+0x650>)
1000889e:	2200      	movs	r2, #0
100088a0:	4640      	mov	r0, r8
100088a2:	4649      	mov	r1, r9
100088a4:	f7f7 fde0 	bl	10000468 <__aeabi_dmul>
100088a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
100088ac:	f7f8 f862 	bl	10000974 <__aeabi_dcmpge>
100088b0:	9e04      	ldr	r6, [sp, #16]
100088b2:	4637      	mov	r7, r6
100088b4:	2800      	cmp	r0, #0
100088b6:	f040 8245 	bne.w	10008d44 <_dtoa_r+0x954>
100088ba:	9d00      	ldr	r5, [sp, #0]
100088bc:	2331      	movs	r3, #49	; 0x31
100088be:	f805 3b01 	strb.w	r3, [r5], #1
100088c2:	f10b 0b01 	add.w	fp, fp, #1
100088c6:	e241      	b.n	10008d4c <_dtoa_r+0x95c>
100088c8:	07f2      	lsls	r2, r6, #31
100088ca:	d505      	bpl.n	100088d8 <_dtoa_r+0x4e8>
100088cc:	e9d7 2300 	ldrd	r2, r3, [r7]
100088d0:	f7f7 fdca 	bl	10000468 <__aeabi_dmul>
100088d4:	3501      	adds	r5, #1
100088d6:	2301      	movs	r3, #1
100088d8:	1076      	asrs	r6, r6, #1
100088da:	3708      	adds	r7, #8
100088dc:	e773      	b.n	100087c6 <_dtoa_r+0x3d6>
100088de:	2502      	movs	r5, #2
100088e0:	e775      	b.n	100087ce <_dtoa_r+0x3de>
100088e2:	9e04      	ldr	r6, [sp, #16]
100088e4:	465f      	mov	r7, fp
100088e6:	e792      	b.n	1000880e <_dtoa_r+0x41e>
100088e8:	9900      	ldr	r1, [sp, #0]
100088ea:	4b50      	ldr	r3, [pc, #320]	; (10008a2c <_dtoa_r+0x63c>)
100088ec:	ed9d 7b02 	vldr	d7, [sp, #8]
100088f0:	4431      	add	r1, r6
100088f2:	9102      	str	r1, [sp, #8]
100088f4:	9909      	ldr	r1, [sp, #36]	; 0x24
100088f6:	eeb0 9a47 	vmov.f32	s18, s14
100088fa:	eef0 9a67 	vmov.f32	s19, s15
100088fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
10008902:	e953 2302 	ldrd	r2, r3, [r3, #-8]
10008906:	2900      	cmp	r1, #0
10008908:	d044      	beq.n	10008994 <_dtoa_r+0x5a4>
1000890a:	494e      	ldr	r1, [pc, #312]	; (10008a44 <_dtoa_r+0x654>)
1000890c:	2000      	movs	r0, #0
1000890e:	f7f7 fed5 	bl	100006bc <__aeabi_ddiv>
10008912:	ec53 2b19 	vmov	r2, r3, d9
10008916:	f7f7 fbef 	bl	100000f8 <__aeabi_dsub>
1000891a:	9d00      	ldr	r5, [sp, #0]
1000891c:	ec41 0b19 	vmov	d9, r0, r1
10008920:	4649      	mov	r1, r9
10008922:	4640      	mov	r0, r8
10008924:	f7f8 f850 	bl	100009c8 <__aeabi_d2iz>
10008928:	4606      	mov	r6, r0
1000892a:	f7f7 fd33 	bl	10000394 <__aeabi_i2d>
1000892e:	4602      	mov	r2, r0
10008930:	460b      	mov	r3, r1
10008932:	4640      	mov	r0, r8
10008934:	4649      	mov	r1, r9
10008936:	f7f7 fbdf 	bl	100000f8 <__aeabi_dsub>
1000893a:	3630      	adds	r6, #48	; 0x30
1000893c:	f805 6b01 	strb.w	r6, [r5], #1
10008940:	ec53 2b19 	vmov	r2, r3, d9
10008944:	4680      	mov	r8, r0
10008946:	4689      	mov	r9, r1
10008948:	f7f8 f800 	bl	1000094c <__aeabi_dcmplt>
1000894c:	2800      	cmp	r0, #0
1000894e:	d164      	bne.n	10008a1a <_dtoa_r+0x62a>
10008950:	4642      	mov	r2, r8
10008952:	464b      	mov	r3, r9
10008954:	4937      	ldr	r1, [pc, #220]	; (10008a34 <_dtoa_r+0x644>)
10008956:	2000      	movs	r0, #0
10008958:	f7f7 fbce 	bl	100000f8 <__aeabi_dsub>
1000895c:	ec53 2b19 	vmov	r2, r3, d9
10008960:	f7f7 fff4 	bl	1000094c <__aeabi_dcmplt>
10008964:	2800      	cmp	r0, #0
10008966:	f040 80b6 	bne.w	10008ad6 <_dtoa_r+0x6e6>
1000896a:	9b02      	ldr	r3, [sp, #8]
1000896c:	429d      	cmp	r5, r3
1000896e:	f43f af7c 	beq.w	1000886a <_dtoa_r+0x47a>
10008972:	4b31      	ldr	r3, [pc, #196]	; (10008a38 <_dtoa_r+0x648>)
10008974:	ec51 0b19 	vmov	r0, r1, d9
10008978:	2200      	movs	r2, #0
1000897a:	f7f7 fd75 	bl	10000468 <__aeabi_dmul>
1000897e:	4b2e      	ldr	r3, [pc, #184]	; (10008a38 <_dtoa_r+0x648>)
10008980:	ec41 0b19 	vmov	d9, r0, r1
10008984:	2200      	movs	r2, #0
10008986:	4640      	mov	r0, r8
10008988:	4649      	mov	r1, r9
1000898a:	f7f7 fd6d 	bl	10000468 <__aeabi_dmul>
1000898e:	4680      	mov	r8, r0
10008990:	4689      	mov	r9, r1
10008992:	e7c5      	b.n	10008920 <_dtoa_r+0x530>
10008994:	ec51 0b17 	vmov	r0, r1, d7
10008998:	f7f7 fd66 	bl	10000468 <__aeabi_dmul>
1000899c:	9b02      	ldr	r3, [sp, #8]
1000899e:	9d00      	ldr	r5, [sp, #0]
100089a0:	930f      	str	r3, [sp, #60]	; 0x3c
100089a2:	ec41 0b19 	vmov	d9, r0, r1
100089a6:	4649      	mov	r1, r9
100089a8:	4640      	mov	r0, r8
100089aa:	f7f8 f80d 	bl	100009c8 <__aeabi_d2iz>
100089ae:	4606      	mov	r6, r0
100089b0:	f7f7 fcf0 	bl	10000394 <__aeabi_i2d>
100089b4:	3630      	adds	r6, #48	; 0x30
100089b6:	4602      	mov	r2, r0
100089b8:	460b      	mov	r3, r1
100089ba:	4640      	mov	r0, r8
100089bc:	4649      	mov	r1, r9
100089be:	f7f7 fb9b 	bl	100000f8 <__aeabi_dsub>
100089c2:	f805 6b01 	strb.w	r6, [r5], #1
100089c6:	9b02      	ldr	r3, [sp, #8]
100089c8:	429d      	cmp	r5, r3
100089ca:	4680      	mov	r8, r0
100089cc:	4689      	mov	r9, r1
100089ce:	f04f 0200 	mov.w	r2, #0
100089d2:	d124      	bne.n	10008a1e <_dtoa_r+0x62e>
100089d4:	4b1b      	ldr	r3, [pc, #108]	; (10008a44 <_dtoa_r+0x654>)
100089d6:	ec51 0b19 	vmov	r0, r1, d9
100089da:	f7f7 fb8f 	bl	100000fc <__adddf3>
100089de:	4602      	mov	r2, r0
100089e0:	460b      	mov	r3, r1
100089e2:	4640      	mov	r0, r8
100089e4:	4649      	mov	r1, r9
100089e6:	f7f7 ffcf 	bl	10000988 <__aeabi_dcmpgt>
100089ea:	2800      	cmp	r0, #0
100089ec:	d173      	bne.n	10008ad6 <_dtoa_r+0x6e6>
100089ee:	ec53 2b19 	vmov	r2, r3, d9
100089f2:	4914      	ldr	r1, [pc, #80]	; (10008a44 <_dtoa_r+0x654>)
100089f4:	2000      	movs	r0, #0
100089f6:	f7f7 fb7f 	bl	100000f8 <__aeabi_dsub>
100089fa:	4602      	mov	r2, r0
100089fc:	460b      	mov	r3, r1
100089fe:	4640      	mov	r0, r8
10008a00:	4649      	mov	r1, r9
10008a02:	f7f7 ffa3 	bl	1000094c <__aeabi_dcmplt>
10008a06:	2800      	cmp	r0, #0
10008a08:	f43f af2f 	beq.w	1000886a <_dtoa_r+0x47a>
10008a0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
10008a0e:	1e6b      	subs	r3, r5, #1
10008a10:	930f      	str	r3, [sp, #60]	; 0x3c
10008a12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
10008a16:	2b30      	cmp	r3, #48	; 0x30
10008a18:	d0f8      	beq.n	10008a0c <_dtoa_r+0x61c>
10008a1a:	46bb      	mov	fp, r7
10008a1c:	e04a      	b.n	10008ab4 <_dtoa_r+0x6c4>
10008a1e:	4b06      	ldr	r3, [pc, #24]	; (10008a38 <_dtoa_r+0x648>)
10008a20:	f7f7 fd22 	bl	10000468 <__aeabi_dmul>
10008a24:	4680      	mov	r8, r0
10008a26:	4689      	mov	r9, r1
10008a28:	e7bd      	b.n	100089a6 <_dtoa_r+0x5b6>
10008a2a:	bf00      	nop
10008a2c:	1000bd08 	.word	0x1000bd08
10008a30:	1000bce0 	.word	0x1000bce0
10008a34:	3ff00000 	.word	0x3ff00000
10008a38:	40240000 	.word	0x40240000
10008a3c:	401c0000 	.word	0x401c0000
10008a40:	40140000 	.word	0x40140000
10008a44:	3fe00000 	.word	0x3fe00000
10008a48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
10008a4c:	9d00      	ldr	r5, [sp, #0]
10008a4e:	4642      	mov	r2, r8
10008a50:	464b      	mov	r3, r9
10008a52:	4630      	mov	r0, r6
10008a54:	4639      	mov	r1, r7
10008a56:	f7f7 fe31 	bl	100006bc <__aeabi_ddiv>
10008a5a:	f7f7 ffb5 	bl	100009c8 <__aeabi_d2iz>
10008a5e:	9001      	str	r0, [sp, #4]
10008a60:	f7f7 fc98 	bl	10000394 <__aeabi_i2d>
10008a64:	4642      	mov	r2, r8
10008a66:	464b      	mov	r3, r9
10008a68:	f7f7 fcfe 	bl	10000468 <__aeabi_dmul>
10008a6c:	4602      	mov	r2, r0
10008a6e:	460b      	mov	r3, r1
10008a70:	4630      	mov	r0, r6
10008a72:	4639      	mov	r1, r7
10008a74:	f7f7 fb40 	bl	100000f8 <__aeabi_dsub>
10008a78:	9e01      	ldr	r6, [sp, #4]
10008a7a:	9f04      	ldr	r7, [sp, #16]
10008a7c:	3630      	adds	r6, #48	; 0x30
10008a7e:	f805 6b01 	strb.w	r6, [r5], #1
10008a82:	9e00      	ldr	r6, [sp, #0]
10008a84:	1bae      	subs	r6, r5, r6
10008a86:	42b7      	cmp	r7, r6
10008a88:	4602      	mov	r2, r0
10008a8a:	460b      	mov	r3, r1
10008a8c:	d134      	bne.n	10008af8 <_dtoa_r+0x708>
10008a8e:	f7f7 fb35 	bl	100000fc <__adddf3>
10008a92:	4642      	mov	r2, r8
10008a94:	464b      	mov	r3, r9
10008a96:	4606      	mov	r6, r0
10008a98:	460f      	mov	r7, r1
10008a9a:	f7f7 ff75 	bl	10000988 <__aeabi_dcmpgt>
10008a9e:	b9c8      	cbnz	r0, 10008ad4 <_dtoa_r+0x6e4>
10008aa0:	4642      	mov	r2, r8
10008aa2:	464b      	mov	r3, r9
10008aa4:	4630      	mov	r0, r6
10008aa6:	4639      	mov	r1, r7
10008aa8:	f7f7 ff46 	bl	10000938 <__aeabi_dcmpeq>
10008aac:	b110      	cbz	r0, 10008ab4 <_dtoa_r+0x6c4>
10008aae:	9b01      	ldr	r3, [sp, #4]
10008ab0:	07db      	lsls	r3, r3, #31
10008ab2:	d40f      	bmi.n	10008ad4 <_dtoa_r+0x6e4>
10008ab4:	4651      	mov	r1, sl
10008ab6:	4620      	mov	r0, r4
10008ab8:	f000 fbcc 	bl	10009254 <_Bfree>
10008abc:	2300      	movs	r3, #0
10008abe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
10008ac0:	702b      	strb	r3, [r5, #0]
10008ac2:	f10b 0301 	add.w	r3, fp, #1
10008ac6:	6013      	str	r3, [r2, #0]
10008ac8:	9b21      	ldr	r3, [sp, #132]	; 0x84
10008aca:	2b00      	cmp	r3, #0
10008acc:	f43f ace2 	beq.w	10008494 <_dtoa_r+0xa4>
10008ad0:	601d      	str	r5, [r3, #0]
10008ad2:	e4df      	b.n	10008494 <_dtoa_r+0xa4>
10008ad4:	465f      	mov	r7, fp
10008ad6:	462b      	mov	r3, r5
10008ad8:	461d      	mov	r5, r3
10008ada:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
10008ade:	2a39      	cmp	r2, #57	; 0x39
10008ae0:	d106      	bne.n	10008af0 <_dtoa_r+0x700>
10008ae2:	9a00      	ldr	r2, [sp, #0]
10008ae4:	429a      	cmp	r2, r3
10008ae6:	d1f7      	bne.n	10008ad8 <_dtoa_r+0x6e8>
10008ae8:	9900      	ldr	r1, [sp, #0]
10008aea:	2230      	movs	r2, #48	; 0x30
10008aec:	3701      	adds	r7, #1
10008aee:	700a      	strb	r2, [r1, #0]
10008af0:	781a      	ldrb	r2, [r3, #0]
10008af2:	3201      	adds	r2, #1
10008af4:	701a      	strb	r2, [r3, #0]
10008af6:	e790      	b.n	10008a1a <_dtoa_r+0x62a>
10008af8:	4ba3      	ldr	r3, [pc, #652]	; (10008d88 <_dtoa_r+0x998>)
10008afa:	2200      	movs	r2, #0
10008afc:	f7f7 fcb4 	bl	10000468 <__aeabi_dmul>
10008b00:	2200      	movs	r2, #0
10008b02:	2300      	movs	r3, #0
10008b04:	4606      	mov	r6, r0
10008b06:	460f      	mov	r7, r1
10008b08:	f7f7 ff16 	bl	10000938 <__aeabi_dcmpeq>
10008b0c:	2800      	cmp	r0, #0
10008b0e:	d09e      	beq.n	10008a4e <_dtoa_r+0x65e>
10008b10:	e7d0      	b.n	10008ab4 <_dtoa_r+0x6c4>
10008b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
10008b14:	2a00      	cmp	r2, #0
10008b16:	f000 80ca 	beq.w	10008cae <_dtoa_r+0x8be>
10008b1a:	9a07      	ldr	r2, [sp, #28]
10008b1c:	2a01      	cmp	r2, #1
10008b1e:	f300 80ad 	bgt.w	10008c7c <_dtoa_r+0x88c>
10008b22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10008b24:	2a00      	cmp	r2, #0
10008b26:	f000 80a5 	beq.w	10008c74 <_dtoa_r+0x884>
10008b2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
10008b2e:	9e08      	ldr	r6, [sp, #32]
10008b30:	9d05      	ldr	r5, [sp, #20]
10008b32:	9a05      	ldr	r2, [sp, #20]
10008b34:	441a      	add	r2, r3
10008b36:	9205      	str	r2, [sp, #20]
10008b38:	9a06      	ldr	r2, [sp, #24]
10008b3a:	2101      	movs	r1, #1
10008b3c:	441a      	add	r2, r3
10008b3e:	4620      	mov	r0, r4
10008b40:	9206      	str	r2, [sp, #24]
10008b42:	f000 fc87 	bl	10009454 <__i2b>
10008b46:	4607      	mov	r7, r0
10008b48:	b165      	cbz	r5, 10008b64 <_dtoa_r+0x774>
10008b4a:	9b06      	ldr	r3, [sp, #24]
10008b4c:	2b00      	cmp	r3, #0
10008b4e:	dd09      	ble.n	10008b64 <_dtoa_r+0x774>
10008b50:	42ab      	cmp	r3, r5
10008b52:	9a05      	ldr	r2, [sp, #20]
10008b54:	bfa8      	it	ge
10008b56:	462b      	movge	r3, r5
10008b58:	1ad2      	subs	r2, r2, r3
10008b5a:	9205      	str	r2, [sp, #20]
10008b5c:	9a06      	ldr	r2, [sp, #24]
10008b5e:	1aed      	subs	r5, r5, r3
10008b60:	1ad3      	subs	r3, r2, r3
10008b62:	9306      	str	r3, [sp, #24]
10008b64:	9b08      	ldr	r3, [sp, #32]
10008b66:	b1f3      	cbz	r3, 10008ba6 <_dtoa_r+0x7b6>
10008b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008b6a:	2b00      	cmp	r3, #0
10008b6c:	f000 80a3 	beq.w	10008cb6 <_dtoa_r+0x8c6>
10008b70:	2e00      	cmp	r6, #0
10008b72:	dd10      	ble.n	10008b96 <_dtoa_r+0x7a6>
10008b74:	4639      	mov	r1, r7
10008b76:	4632      	mov	r2, r6
10008b78:	4620      	mov	r0, r4
10008b7a:	f000 fd2b 	bl	100095d4 <__pow5mult>
10008b7e:	4652      	mov	r2, sl
10008b80:	4601      	mov	r1, r0
10008b82:	4607      	mov	r7, r0
10008b84:	4620      	mov	r0, r4
10008b86:	f000 fc7b 	bl	10009480 <__multiply>
10008b8a:	4651      	mov	r1, sl
10008b8c:	4680      	mov	r8, r0
10008b8e:	4620      	mov	r0, r4
10008b90:	f000 fb60 	bl	10009254 <_Bfree>
10008b94:	46c2      	mov	sl, r8
10008b96:	9b08      	ldr	r3, [sp, #32]
10008b98:	1b9a      	subs	r2, r3, r6
10008b9a:	d004      	beq.n	10008ba6 <_dtoa_r+0x7b6>
10008b9c:	4651      	mov	r1, sl
10008b9e:	4620      	mov	r0, r4
10008ba0:	f000 fd18 	bl	100095d4 <__pow5mult>
10008ba4:	4682      	mov	sl, r0
10008ba6:	2101      	movs	r1, #1
10008ba8:	4620      	mov	r0, r4
10008baa:	f000 fc53 	bl	10009454 <__i2b>
10008bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10008bb0:	2b00      	cmp	r3, #0
10008bb2:	4606      	mov	r6, r0
10008bb4:	f340 8081 	ble.w	10008cba <_dtoa_r+0x8ca>
10008bb8:	461a      	mov	r2, r3
10008bba:	4601      	mov	r1, r0
10008bbc:	4620      	mov	r0, r4
10008bbe:	f000 fd09 	bl	100095d4 <__pow5mult>
10008bc2:	9b07      	ldr	r3, [sp, #28]
10008bc4:	2b01      	cmp	r3, #1
10008bc6:	4606      	mov	r6, r0
10008bc8:	dd7a      	ble.n	10008cc0 <_dtoa_r+0x8d0>
10008bca:	f04f 0800 	mov.w	r8, #0
10008bce:	6933      	ldr	r3, [r6, #16]
10008bd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
10008bd4:	6918      	ldr	r0, [r3, #16]
10008bd6:	f000 fbef 	bl	100093b8 <__hi0bits>
10008bda:	f1c0 0020 	rsb	r0, r0, #32
10008bde:	9b06      	ldr	r3, [sp, #24]
10008be0:	4418      	add	r0, r3
10008be2:	f010 001f 	ands.w	r0, r0, #31
10008be6:	f000 8094 	beq.w	10008d12 <_dtoa_r+0x922>
10008bea:	f1c0 0320 	rsb	r3, r0, #32
10008bee:	2b04      	cmp	r3, #4
10008bf0:	f340 8085 	ble.w	10008cfe <_dtoa_r+0x90e>
10008bf4:	9b05      	ldr	r3, [sp, #20]
10008bf6:	f1c0 001c 	rsb	r0, r0, #28
10008bfa:	4403      	add	r3, r0
10008bfc:	9305      	str	r3, [sp, #20]
10008bfe:	9b06      	ldr	r3, [sp, #24]
10008c00:	4403      	add	r3, r0
10008c02:	4405      	add	r5, r0
10008c04:	9306      	str	r3, [sp, #24]
10008c06:	9b05      	ldr	r3, [sp, #20]
10008c08:	2b00      	cmp	r3, #0
10008c0a:	dd05      	ble.n	10008c18 <_dtoa_r+0x828>
10008c0c:	4651      	mov	r1, sl
10008c0e:	461a      	mov	r2, r3
10008c10:	4620      	mov	r0, r4
10008c12:	f000 fd39 	bl	10009688 <__lshift>
10008c16:	4682      	mov	sl, r0
10008c18:	9b06      	ldr	r3, [sp, #24]
10008c1a:	2b00      	cmp	r3, #0
10008c1c:	dd05      	ble.n	10008c2a <_dtoa_r+0x83a>
10008c1e:	4631      	mov	r1, r6
10008c20:	461a      	mov	r2, r3
10008c22:	4620      	mov	r0, r4
10008c24:	f000 fd30 	bl	10009688 <__lshift>
10008c28:	4606      	mov	r6, r0
10008c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
10008c2c:	2b00      	cmp	r3, #0
10008c2e:	d072      	beq.n	10008d16 <_dtoa_r+0x926>
10008c30:	4631      	mov	r1, r6
10008c32:	4650      	mov	r0, sl
10008c34:	f000 fd94 	bl	10009760 <__mcmp>
10008c38:	2800      	cmp	r0, #0
10008c3a:	da6c      	bge.n	10008d16 <_dtoa_r+0x926>
10008c3c:	2300      	movs	r3, #0
10008c3e:	4651      	mov	r1, sl
10008c40:	220a      	movs	r2, #10
10008c42:	4620      	mov	r0, r4
10008c44:	f000 fb28 	bl	10009298 <__multadd>
10008c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008c4a:	f10b 3bff 	add.w	fp, fp, #4294967295
10008c4e:	4682      	mov	sl, r0
10008c50:	2b00      	cmp	r3, #0
10008c52:	f000 81b0 	beq.w	10008fb6 <_dtoa_r+0xbc6>
10008c56:	2300      	movs	r3, #0
10008c58:	4639      	mov	r1, r7
10008c5a:	220a      	movs	r2, #10
10008c5c:	4620      	mov	r0, r4
10008c5e:	f000 fb1b 	bl	10009298 <__multadd>
10008c62:	9b01      	ldr	r3, [sp, #4]
10008c64:	2b00      	cmp	r3, #0
10008c66:	4607      	mov	r7, r0
10008c68:	f300 8096 	bgt.w	10008d98 <_dtoa_r+0x9a8>
10008c6c:	9b07      	ldr	r3, [sp, #28]
10008c6e:	2b02      	cmp	r3, #2
10008c70:	dc59      	bgt.n	10008d26 <_dtoa_r+0x936>
10008c72:	e091      	b.n	10008d98 <_dtoa_r+0x9a8>
10008c74:	9b10      	ldr	r3, [sp, #64]	; 0x40
10008c76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
10008c7a:	e758      	b.n	10008b2e <_dtoa_r+0x73e>
10008c7c:	9b04      	ldr	r3, [sp, #16]
10008c7e:	1e5e      	subs	r6, r3, #1
10008c80:	9b08      	ldr	r3, [sp, #32]
10008c82:	42b3      	cmp	r3, r6
10008c84:	bfbf      	itttt	lt
10008c86:	9b08      	ldrlt	r3, [sp, #32]
10008c88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
10008c8a:	9608      	strlt	r6, [sp, #32]
10008c8c:	1af3      	sublt	r3, r6, r3
10008c8e:	bfb4      	ite	lt
10008c90:	18d2      	addlt	r2, r2, r3
10008c92:	1b9e      	subge	r6, r3, r6
10008c94:	9b04      	ldr	r3, [sp, #16]
10008c96:	bfbc      	itt	lt
10008c98:	920b      	strlt	r2, [sp, #44]	; 0x2c
10008c9a:	2600      	movlt	r6, #0
10008c9c:	2b00      	cmp	r3, #0
10008c9e:	bfb7      	itett	lt
10008ca0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
10008ca4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
10008ca8:	1a9d      	sublt	r5, r3, r2
10008caa:	2300      	movlt	r3, #0
10008cac:	e741      	b.n	10008b32 <_dtoa_r+0x742>
10008cae:	9e08      	ldr	r6, [sp, #32]
10008cb0:	9d05      	ldr	r5, [sp, #20]
10008cb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
10008cb4:	e748      	b.n	10008b48 <_dtoa_r+0x758>
10008cb6:	9a08      	ldr	r2, [sp, #32]
10008cb8:	e770      	b.n	10008b9c <_dtoa_r+0x7ac>
10008cba:	9b07      	ldr	r3, [sp, #28]
10008cbc:	2b01      	cmp	r3, #1
10008cbe:	dc19      	bgt.n	10008cf4 <_dtoa_r+0x904>
10008cc0:	9b02      	ldr	r3, [sp, #8]
10008cc2:	b9bb      	cbnz	r3, 10008cf4 <_dtoa_r+0x904>
10008cc4:	9b03      	ldr	r3, [sp, #12]
10008cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
10008cca:	b99b      	cbnz	r3, 10008cf4 <_dtoa_r+0x904>
10008ccc:	9b03      	ldr	r3, [sp, #12]
10008cce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
10008cd2:	0d1b      	lsrs	r3, r3, #20
10008cd4:	051b      	lsls	r3, r3, #20
10008cd6:	b183      	cbz	r3, 10008cfa <_dtoa_r+0x90a>
10008cd8:	9b05      	ldr	r3, [sp, #20]
10008cda:	3301      	adds	r3, #1
10008cdc:	9305      	str	r3, [sp, #20]
10008cde:	9b06      	ldr	r3, [sp, #24]
10008ce0:	3301      	adds	r3, #1
10008ce2:	9306      	str	r3, [sp, #24]
10008ce4:	f04f 0801 	mov.w	r8, #1
10008ce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10008cea:	2b00      	cmp	r3, #0
10008cec:	f47f af6f 	bne.w	10008bce <_dtoa_r+0x7de>
10008cf0:	2001      	movs	r0, #1
10008cf2:	e774      	b.n	10008bde <_dtoa_r+0x7ee>
10008cf4:	f04f 0800 	mov.w	r8, #0
10008cf8:	e7f6      	b.n	10008ce8 <_dtoa_r+0x8f8>
10008cfa:	4698      	mov	r8, r3
10008cfc:	e7f4      	b.n	10008ce8 <_dtoa_r+0x8f8>
10008cfe:	d082      	beq.n	10008c06 <_dtoa_r+0x816>
10008d00:	9a05      	ldr	r2, [sp, #20]
10008d02:	331c      	adds	r3, #28
10008d04:	441a      	add	r2, r3
10008d06:	9205      	str	r2, [sp, #20]
10008d08:	9a06      	ldr	r2, [sp, #24]
10008d0a:	441a      	add	r2, r3
10008d0c:	441d      	add	r5, r3
10008d0e:	9206      	str	r2, [sp, #24]
10008d10:	e779      	b.n	10008c06 <_dtoa_r+0x816>
10008d12:	4603      	mov	r3, r0
10008d14:	e7f4      	b.n	10008d00 <_dtoa_r+0x910>
10008d16:	9b04      	ldr	r3, [sp, #16]
10008d18:	2b00      	cmp	r3, #0
10008d1a:	dc37      	bgt.n	10008d8c <_dtoa_r+0x99c>
10008d1c:	9b07      	ldr	r3, [sp, #28]
10008d1e:	2b02      	cmp	r3, #2
10008d20:	dd34      	ble.n	10008d8c <_dtoa_r+0x99c>
10008d22:	9b04      	ldr	r3, [sp, #16]
10008d24:	9301      	str	r3, [sp, #4]
10008d26:	9b01      	ldr	r3, [sp, #4]
10008d28:	b963      	cbnz	r3, 10008d44 <_dtoa_r+0x954>
10008d2a:	4631      	mov	r1, r6
10008d2c:	2205      	movs	r2, #5
10008d2e:	4620      	mov	r0, r4
10008d30:	f000 fab2 	bl	10009298 <__multadd>
10008d34:	4601      	mov	r1, r0
10008d36:	4606      	mov	r6, r0
10008d38:	4650      	mov	r0, sl
10008d3a:	f000 fd11 	bl	10009760 <__mcmp>
10008d3e:	2800      	cmp	r0, #0
10008d40:	f73f adbb 	bgt.w	100088ba <_dtoa_r+0x4ca>
10008d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10008d46:	9d00      	ldr	r5, [sp, #0]
10008d48:	ea6f 0b03 	mvn.w	fp, r3
10008d4c:	f04f 0800 	mov.w	r8, #0
10008d50:	4631      	mov	r1, r6
10008d52:	4620      	mov	r0, r4
10008d54:	f000 fa7e 	bl	10009254 <_Bfree>
10008d58:	2f00      	cmp	r7, #0
10008d5a:	f43f aeab 	beq.w	10008ab4 <_dtoa_r+0x6c4>
10008d5e:	f1b8 0f00 	cmp.w	r8, #0
10008d62:	d005      	beq.n	10008d70 <_dtoa_r+0x980>
10008d64:	45b8      	cmp	r8, r7
10008d66:	d003      	beq.n	10008d70 <_dtoa_r+0x980>
10008d68:	4641      	mov	r1, r8
10008d6a:	4620      	mov	r0, r4
10008d6c:	f000 fa72 	bl	10009254 <_Bfree>
10008d70:	4639      	mov	r1, r7
10008d72:	4620      	mov	r0, r4
10008d74:	f000 fa6e 	bl	10009254 <_Bfree>
10008d78:	e69c      	b.n	10008ab4 <_dtoa_r+0x6c4>
10008d7a:	2600      	movs	r6, #0
10008d7c:	4637      	mov	r7, r6
10008d7e:	e7e1      	b.n	10008d44 <_dtoa_r+0x954>
10008d80:	46bb      	mov	fp, r7
10008d82:	4637      	mov	r7, r6
10008d84:	e599      	b.n	100088ba <_dtoa_r+0x4ca>
10008d86:	bf00      	nop
10008d88:	40240000 	.word	0x40240000
10008d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
10008d8e:	2b00      	cmp	r3, #0
10008d90:	f000 80c8 	beq.w	10008f24 <_dtoa_r+0xb34>
10008d94:	9b04      	ldr	r3, [sp, #16]
10008d96:	9301      	str	r3, [sp, #4]
10008d98:	2d00      	cmp	r5, #0
10008d9a:	dd05      	ble.n	10008da8 <_dtoa_r+0x9b8>
10008d9c:	4639      	mov	r1, r7
10008d9e:	462a      	mov	r2, r5
10008da0:	4620      	mov	r0, r4
10008da2:	f000 fc71 	bl	10009688 <__lshift>
10008da6:	4607      	mov	r7, r0
10008da8:	f1b8 0f00 	cmp.w	r8, #0
10008dac:	d05b      	beq.n	10008e66 <_dtoa_r+0xa76>
10008dae:	6879      	ldr	r1, [r7, #4]
10008db0:	4620      	mov	r0, r4
10008db2:	f000 fa0f 	bl	100091d4 <_Balloc>
10008db6:	4605      	mov	r5, r0
10008db8:	b928      	cbnz	r0, 10008dc6 <_dtoa_r+0x9d6>
10008dba:	4b83      	ldr	r3, [pc, #524]	; (10008fc8 <_dtoa_r+0xbd8>)
10008dbc:	4602      	mov	r2, r0
10008dbe:	f240 21ef 	movw	r1, #751	; 0x2ef
10008dc2:	f7ff bb2e 	b.w	10008422 <_dtoa_r+0x32>
10008dc6:	693a      	ldr	r2, [r7, #16]
10008dc8:	3202      	adds	r2, #2
10008dca:	0092      	lsls	r2, r2, #2
10008dcc:	f107 010c 	add.w	r1, r7, #12
10008dd0:	300c      	adds	r0, #12
10008dd2:	f002 f95f 	bl	1000b094 <memcpy>
10008dd6:	2201      	movs	r2, #1
10008dd8:	4629      	mov	r1, r5
10008dda:	4620      	mov	r0, r4
10008ddc:	f000 fc54 	bl	10009688 <__lshift>
10008de0:	9b00      	ldr	r3, [sp, #0]
10008de2:	3301      	adds	r3, #1
10008de4:	9304      	str	r3, [sp, #16]
10008de6:	e9dd 2300 	ldrd	r2, r3, [sp]
10008dea:	4413      	add	r3, r2
10008dec:	9308      	str	r3, [sp, #32]
10008dee:	9b02      	ldr	r3, [sp, #8]
10008df0:	f003 0301 	and.w	r3, r3, #1
10008df4:	46b8      	mov	r8, r7
10008df6:	9306      	str	r3, [sp, #24]
10008df8:	4607      	mov	r7, r0
10008dfa:	9b04      	ldr	r3, [sp, #16]
10008dfc:	4631      	mov	r1, r6
10008dfe:	3b01      	subs	r3, #1
10008e00:	4650      	mov	r0, sl
10008e02:	9301      	str	r3, [sp, #4]
10008e04:	f7ff fa6c 	bl	100082e0 <quorem>
10008e08:	4641      	mov	r1, r8
10008e0a:	9002      	str	r0, [sp, #8]
10008e0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
10008e10:	4650      	mov	r0, sl
10008e12:	f000 fca5 	bl	10009760 <__mcmp>
10008e16:	463a      	mov	r2, r7
10008e18:	9005      	str	r0, [sp, #20]
10008e1a:	4631      	mov	r1, r6
10008e1c:	4620      	mov	r0, r4
10008e1e:	f000 fcbb 	bl	10009798 <__mdiff>
10008e22:	68c2      	ldr	r2, [r0, #12]
10008e24:	4605      	mov	r5, r0
10008e26:	bb02      	cbnz	r2, 10008e6a <_dtoa_r+0xa7a>
10008e28:	4601      	mov	r1, r0
10008e2a:	4650      	mov	r0, sl
10008e2c:	f000 fc98 	bl	10009760 <__mcmp>
10008e30:	4602      	mov	r2, r0
10008e32:	4629      	mov	r1, r5
10008e34:	4620      	mov	r0, r4
10008e36:	9209      	str	r2, [sp, #36]	; 0x24
10008e38:	f000 fa0c 	bl	10009254 <_Bfree>
10008e3c:	9b07      	ldr	r3, [sp, #28]
10008e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
10008e40:	9d04      	ldr	r5, [sp, #16]
10008e42:	ea43 0102 	orr.w	r1, r3, r2
10008e46:	9b06      	ldr	r3, [sp, #24]
10008e48:	4319      	orrs	r1, r3
10008e4a:	d110      	bne.n	10008e6e <_dtoa_r+0xa7e>
10008e4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10008e50:	d029      	beq.n	10008ea6 <_dtoa_r+0xab6>
10008e52:	9b05      	ldr	r3, [sp, #20]
10008e54:	2b00      	cmp	r3, #0
10008e56:	dd02      	ble.n	10008e5e <_dtoa_r+0xa6e>
10008e58:	9b02      	ldr	r3, [sp, #8]
10008e5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
10008e5e:	9b01      	ldr	r3, [sp, #4]
10008e60:	f883 9000 	strb.w	r9, [r3]
10008e64:	e774      	b.n	10008d50 <_dtoa_r+0x960>
10008e66:	4638      	mov	r0, r7
10008e68:	e7ba      	b.n	10008de0 <_dtoa_r+0x9f0>
10008e6a:	2201      	movs	r2, #1
10008e6c:	e7e1      	b.n	10008e32 <_dtoa_r+0xa42>
10008e6e:	9b05      	ldr	r3, [sp, #20]
10008e70:	2b00      	cmp	r3, #0
10008e72:	db04      	blt.n	10008e7e <_dtoa_r+0xa8e>
10008e74:	9907      	ldr	r1, [sp, #28]
10008e76:	430b      	orrs	r3, r1
10008e78:	9906      	ldr	r1, [sp, #24]
10008e7a:	430b      	orrs	r3, r1
10008e7c:	d120      	bne.n	10008ec0 <_dtoa_r+0xad0>
10008e7e:	2a00      	cmp	r2, #0
10008e80:	dded      	ble.n	10008e5e <_dtoa_r+0xa6e>
10008e82:	4651      	mov	r1, sl
10008e84:	2201      	movs	r2, #1
10008e86:	4620      	mov	r0, r4
10008e88:	f000 fbfe 	bl	10009688 <__lshift>
10008e8c:	4631      	mov	r1, r6
10008e8e:	4682      	mov	sl, r0
10008e90:	f000 fc66 	bl	10009760 <__mcmp>
10008e94:	2800      	cmp	r0, #0
10008e96:	dc03      	bgt.n	10008ea0 <_dtoa_r+0xab0>
10008e98:	d1e1      	bne.n	10008e5e <_dtoa_r+0xa6e>
10008e9a:	f019 0f01 	tst.w	r9, #1
10008e9e:	d0de      	beq.n	10008e5e <_dtoa_r+0xa6e>
10008ea0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10008ea4:	d1d8      	bne.n	10008e58 <_dtoa_r+0xa68>
10008ea6:	9a01      	ldr	r2, [sp, #4]
10008ea8:	2339      	movs	r3, #57	; 0x39
10008eaa:	7013      	strb	r3, [r2, #0]
10008eac:	462b      	mov	r3, r5
10008eae:	461d      	mov	r5, r3
10008eb0:	3b01      	subs	r3, #1
10008eb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
10008eb6:	2a39      	cmp	r2, #57	; 0x39
10008eb8:	d06c      	beq.n	10008f94 <_dtoa_r+0xba4>
10008eba:	3201      	adds	r2, #1
10008ebc:	701a      	strb	r2, [r3, #0]
10008ebe:	e747      	b.n	10008d50 <_dtoa_r+0x960>
10008ec0:	2a00      	cmp	r2, #0
10008ec2:	dd07      	ble.n	10008ed4 <_dtoa_r+0xae4>
10008ec4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
10008ec8:	d0ed      	beq.n	10008ea6 <_dtoa_r+0xab6>
10008eca:	9a01      	ldr	r2, [sp, #4]
10008ecc:	f109 0301 	add.w	r3, r9, #1
10008ed0:	7013      	strb	r3, [r2, #0]
10008ed2:	e73d      	b.n	10008d50 <_dtoa_r+0x960>
10008ed4:	9b04      	ldr	r3, [sp, #16]
10008ed6:	9a08      	ldr	r2, [sp, #32]
10008ed8:	f803 9c01 	strb.w	r9, [r3, #-1]
10008edc:	4293      	cmp	r3, r2
10008ede:	d043      	beq.n	10008f68 <_dtoa_r+0xb78>
10008ee0:	4651      	mov	r1, sl
10008ee2:	2300      	movs	r3, #0
10008ee4:	220a      	movs	r2, #10
10008ee6:	4620      	mov	r0, r4
10008ee8:	f000 f9d6 	bl	10009298 <__multadd>
10008eec:	45b8      	cmp	r8, r7
10008eee:	4682      	mov	sl, r0
10008ef0:	f04f 0300 	mov.w	r3, #0
10008ef4:	f04f 020a 	mov.w	r2, #10
10008ef8:	4641      	mov	r1, r8
10008efa:	4620      	mov	r0, r4
10008efc:	d107      	bne.n	10008f0e <_dtoa_r+0xb1e>
10008efe:	f000 f9cb 	bl	10009298 <__multadd>
10008f02:	4680      	mov	r8, r0
10008f04:	4607      	mov	r7, r0
10008f06:	9b04      	ldr	r3, [sp, #16]
10008f08:	3301      	adds	r3, #1
10008f0a:	9304      	str	r3, [sp, #16]
10008f0c:	e775      	b.n	10008dfa <_dtoa_r+0xa0a>
10008f0e:	f000 f9c3 	bl	10009298 <__multadd>
10008f12:	4639      	mov	r1, r7
10008f14:	4680      	mov	r8, r0
10008f16:	2300      	movs	r3, #0
10008f18:	220a      	movs	r2, #10
10008f1a:	4620      	mov	r0, r4
10008f1c:	f000 f9bc 	bl	10009298 <__multadd>
10008f20:	4607      	mov	r7, r0
10008f22:	e7f0      	b.n	10008f06 <_dtoa_r+0xb16>
10008f24:	9b04      	ldr	r3, [sp, #16]
10008f26:	9301      	str	r3, [sp, #4]
10008f28:	9d00      	ldr	r5, [sp, #0]
10008f2a:	4631      	mov	r1, r6
10008f2c:	4650      	mov	r0, sl
10008f2e:	f7ff f9d7 	bl	100082e0 <quorem>
10008f32:	f100 0930 	add.w	r9, r0, #48	; 0x30
10008f36:	9b00      	ldr	r3, [sp, #0]
10008f38:	f805 9b01 	strb.w	r9, [r5], #1
10008f3c:	1aea      	subs	r2, r5, r3
10008f3e:	9b01      	ldr	r3, [sp, #4]
10008f40:	4293      	cmp	r3, r2
10008f42:	dd07      	ble.n	10008f54 <_dtoa_r+0xb64>
10008f44:	4651      	mov	r1, sl
10008f46:	2300      	movs	r3, #0
10008f48:	220a      	movs	r2, #10
10008f4a:	4620      	mov	r0, r4
10008f4c:	f000 f9a4 	bl	10009298 <__multadd>
10008f50:	4682      	mov	sl, r0
10008f52:	e7ea      	b.n	10008f2a <_dtoa_r+0xb3a>
10008f54:	9b01      	ldr	r3, [sp, #4]
10008f56:	2b00      	cmp	r3, #0
10008f58:	bfc8      	it	gt
10008f5a:	461d      	movgt	r5, r3
10008f5c:	9b00      	ldr	r3, [sp, #0]
10008f5e:	bfd8      	it	le
10008f60:	2501      	movle	r5, #1
10008f62:	441d      	add	r5, r3
10008f64:	f04f 0800 	mov.w	r8, #0
10008f68:	4651      	mov	r1, sl
10008f6a:	2201      	movs	r2, #1
10008f6c:	4620      	mov	r0, r4
10008f6e:	f000 fb8b 	bl	10009688 <__lshift>
10008f72:	4631      	mov	r1, r6
10008f74:	4682      	mov	sl, r0
10008f76:	f000 fbf3 	bl	10009760 <__mcmp>
10008f7a:	2800      	cmp	r0, #0
10008f7c:	dc96      	bgt.n	10008eac <_dtoa_r+0xabc>
10008f7e:	d102      	bne.n	10008f86 <_dtoa_r+0xb96>
10008f80:	f019 0f01 	tst.w	r9, #1
10008f84:	d192      	bne.n	10008eac <_dtoa_r+0xabc>
10008f86:	462b      	mov	r3, r5
10008f88:	461d      	mov	r5, r3
10008f8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
10008f8e:	2a30      	cmp	r2, #48	; 0x30
10008f90:	d0fa      	beq.n	10008f88 <_dtoa_r+0xb98>
10008f92:	e6dd      	b.n	10008d50 <_dtoa_r+0x960>
10008f94:	9a00      	ldr	r2, [sp, #0]
10008f96:	429a      	cmp	r2, r3
10008f98:	d189      	bne.n	10008eae <_dtoa_r+0xabe>
10008f9a:	f10b 0b01 	add.w	fp, fp, #1
10008f9e:	2331      	movs	r3, #49	; 0x31
10008fa0:	e796      	b.n	10008ed0 <_dtoa_r+0xae0>
10008fa2:	4b0a      	ldr	r3, [pc, #40]	; (10008fcc <_dtoa_r+0xbdc>)
10008fa4:	f7ff ba99 	b.w	100084da <_dtoa_r+0xea>
10008fa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
10008faa:	2b00      	cmp	r3, #0
10008fac:	f47f aa6d 	bne.w	1000848a <_dtoa_r+0x9a>
10008fb0:	4b07      	ldr	r3, [pc, #28]	; (10008fd0 <_dtoa_r+0xbe0>)
10008fb2:	f7ff ba92 	b.w	100084da <_dtoa_r+0xea>
10008fb6:	9b01      	ldr	r3, [sp, #4]
10008fb8:	2b00      	cmp	r3, #0
10008fba:	dcb5      	bgt.n	10008f28 <_dtoa_r+0xb38>
10008fbc:	9b07      	ldr	r3, [sp, #28]
10008fbe:	2b02      	cmp	r3, #2
10008fc0:	f73f aeb1 	bgt.w	10008d26 <_dtoa_r+0x936>
10008fc4:	e7b0      	b.n	10008f28 <_dtoa_r+0xb38>
10008fc6:	bf00      	nop
10008fc8:	1000bc71 	.word	0x1000bc71
10008fcc:	1000bbcc 	.word	0x1000bbcc
10008fd0:	1000bbf5 	.word	0x1000bbf5

10008fd4 <_free_r>:
10008fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
10008fd6:	2900      	cmp	r1, #0
10008fd8:	d044      	beq.n	10009064 <_free_r+0x90>
10008fda:	f851 3c04 	ldr.w	r3, [r1, #-4]
10008fde:	9001      	str	r0, [sp, #4]
10008fe0:	2b00      	cmp	r3, #0
10008fe2:	f1a1 0404 	sub.w	r4, r1, #4
10008fe6:	bfb8      	it	lt
10008fe8:	18e4      	addlt	r4, r4, r3
10008fea:	f000 f8e7 	bl	100091bc <__malloc_lock>
10008fee:	4a1e      	ldr	r2, [pc, #120]	; (10009068 <_free_r+0x94>)
10008ff0:	9801      	ldr	r0, [sp, #4]
10008ff2:	6813      	ldr	r3, [r2, #0]
10008ff4:	b933      	cbnz	r3, 10009004 <_free_r+0x30>
10008ff6:	6063      	str	r3, [r4, #4]
10008ff8:	6014      	str	r4, [r2, #0]
10008ffa:	b003      	add	sp, #12
10008ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
10009000:	f000 b8e2 	b.w	100091c8 <__malloc_unlock>
10009004:	42a3      	cmp	r3, r4
10009006:	d908      	bls.n	1000901a <_free_r+0x46>
10009008:	6825      	ldr	r5, [r4, #0]
1000900a:	1961      	adds	r1, r4, r5
1000900c:	428b      	cmp	r3, r1
1000900e:	bf01      	itttt	eq
10009010:	6819      	ldreq	r1, [r3, #0]
10009012:	685b      	ldreq	r3, [r3, #4]
10009014:	1949      	addeq	r1, r1, r5
10009016:	6021      	streq	r1, [r4, #0]
10009018:	e7ed      	b.n	10008ff6 <_free_r+0x22>
1000901a:	461a      	mov	r2, r3
1000901c:	685b      	ldr	r3, [r3, #4]
1000901e:	b10b      	cbz	r3, 10009024 <_free_r+0x50>
10009020:	42a3      	cmp	r3, r4
10009022:	d9fa      	bls.n	1000901a <_free_r+0x46>
10009024:	6811      	ldr	r1, [r2, #0]
10009026:	1855      	adds	r5, r2, r1
10009028:	42a5      	cmp	r5, r4
1000902a:	d10b      	bne.n	10009044 <_free_r+0x70>
1000902c:	6824      	ldr	r4, [r4, #0]
1000902e:	4421      	add	r1, r4
10009030:	1854      	adds	r4, r2, r1
10009032:	42a3      	cmp	r3, r4
10009034:	6011      	str	r1, [r2, #0]
10009036:	d1e0      	bne.n	10008ffa <_free_r+0x26>
10009038:	681c      	ldr	r4, [r3, #0]
1000903a:	685b      	ldr	r3, [r3, #4]
1000903c:	6053      	str	r3, [r2, #4]
1000903e:	440c      	add	r4, r1
10009040:	6014      	str	r4, [r2, #0]
10009042:	e7da      	b.n	10008ffa <_free_r+0x26>
10009044:	d902      	bls.n	1000904c <_free_r+0x78>
10009046:	230c      	movs	r3, #12
10009048:	6003      	str	r3, [r0, #0]
1000904a:	e7d6      	b.n	10008ffa <_free_r+0x26>
1000904c:	6825      	ldr	r5, [r4, #0]
1000904e:	1961      	adds	r1, r4, r5
10009050:	428b      	cmp	r3, r1
10009052:	bf04      	itt	eq
10009054:	6819      	ldreq	r1, [r3, #0]
10009056:	685b      	ldreq	r3, [r3, #4]
10009058:	6063      	str	r3, [r4, #4]
1000905a:	bf04      	itt	eq
1000905c:	1949      	addeq	r1, r1, r5
1000905e:	6021      	streq	r1, [r4, #0]
10009060:	6054      	str	r4, [r2, #4]
10009062:	e7ca      	b.n	10008ffa <_free_r+0x26>
10009064:	b003      	add	sp, #12
10009066:	bd30      	pop	{r4, r5, pc}
10009068:	100203d8 	.word	0x100203d8

1000906c <malloc>:
1000906c:	4b02      	ldr	r3, [pc, #8]	; (10009078 <malloc+0xc>)
1000906e:	4601      	mov	r1, r0
10009070:	6818      	ldr	r0, [r3, #0]
10009072:	f000 b823 	b.w	100090bc <_malloc_r>
10009076:	bf00      	nop
10009078:	10020064 	.word	0x10020064

1000907c <sbrk_aligned>:
1000907c:	b570      	push	{r4, r5, r6, lr}
1000907e:	4e0e      	ldr	r6, [pc, #56]	; (100090b8 <sbrk_aligned+0x3c>)
10009080:	460c      	mov	r4, r1
10009082:	6831      	ldr	r1, [r6, #0]
10009084:	4605      	mov	r5, r0
10009086:	b911      	cbnz	r1, 1000908e <sbrk_aligned+0x12>
10009088:	f001 fff4 	bl	1000b074 <_sbrk_r>
1000908c:	6030      	str	r0, [r6, #0]
1000908e:	4621      	mov	r1, r4
10009090:	4628      	mov	r0, r5
10009092:	f001 ffef 	bl	1000b074 <_sbrk_r>
10009096:	1c43      	adds	r3, r0, #1
10009098:	d00a      	beq.n	100090b0 <sbrk_aligned+0x34>
1000909a:	1cc4      	adds	r4, r0, #3
1000909c:	f024 0403 	bic.w	r4, r4, #3
100090a0:	42a0      	cmp	r0, r4
100090a2:	d007      	beq.n	100090b4 <sbrk_aligned+0x38>
100090a4:	1a21      	subs	r1, r4, r0
100090a6:	4628      	mov	r0, r5
100090a8:	f001 ffe4 	bl	1000b074 <_sbrk_r>
100090ac:	3001      	adds	r0, #1
100090ae:	d101      	bne.n	100090b4 <sbrk_aligned+0x38>
100090b0:	f04f 34ff 	mov.w	r4, #4294967295
100090b4:	4620      	mov	r0, r4
100090b6:	bd70      	pop	{r4, r5, r6, pc}
100090b8:	100203dc 	.word	0x100203dc

100090bc <_malloc_r>:
100090bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100090c0:	1ccd      	adds	r5, r1, #3
100090c2:	f025 0503 	bic.w	r5, r5, #3
100090c6:	3508      	adds	r5, #8
100090c8:	2d0c      	cmp	r5, #12
100090ca:	bf38      	it	cc
100090cc:	250c      	movcc	r5, #12
100090ce:	2d00      	cmp	r5, #0
100090d0:	4607      	mov	r7, r0
100090d2:	db01      	blt.n	100090d8 <_malloc_r+0x1c>
100090d4:	42a9      	cmp	r1, r5
100090d6:	d905      	bls.n	100090e4 <_malloc_r+0x28>
100090d8:	230c      	movs	r3, #12
100090da:	603b      	str	r3, [r7, #0]
100090dc:	2600      	movs	r6, #0
100090de:	4630      	mov	r0, r6
100090e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
100090e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 100091b8 <_malloc_r+0xfc>
100090e8:	f000 f868 	bl	100091bc <__malloc_lock>
100090ec:	f8d8 3000 	ldr.w	r3, [r8]
100090f0:	461c      	mov	r4, r3
100090f2:	bb5c      	cbnz	r4, 1000914c <_malloc_r+0x90>
100090f4:	4629      	mov	r1, r5
100090f6:	4638      	mov	r0, r7
100090f8:	f7ff ffc0 	bl	1000907c <sbrk_aligned>
100090fc:	1c43      	adds	r3, r0, #1
100090fe:	4604      	mov	r4, r0
10009100:	d155      	bne.n	100091ae <_malloc_r+0xf2>
10009102:	f8d8 4000 	ldr.w	r4, [r8]
10009106:	4626      	mov	r6, r4
10009108:	2e00      	cmp	r6, #0
1000910a:	d145      	bne.n	10009198 <_malloc_r+0xdc>
1000910c:	2c00      	cmp	r4, #0
1000910e:	d048      	beq.n	100091a2 <_malloc_r+0xe6>
10009110:	6823      	ldr	r3, [r4, #0]
10009112:	4631      	mov	r1, r6
10009114:	4638      	mov	r0, r7
10009116:	eb04 0903 	add.w	r9, r4, r3
1000911a:	f001 ffab 	bl	1000b074 <_sbrk_r>
1000911e:	4581      	cmp	r9, r0
10009120:	d13f      	bne.n	100091a2 <_malloc_r+0xe6>
10009122:	6821      	ldr	r1, [r4, #0]
10009124:	1a6d      	subs	r5, r5, r1
10009126:	4629      	mov	r1, r5
10009128:	4638      	mov	r0, r7
1000912a:	f7ff ffa7 	bl	1000907c <sbrk_aligned>
1000912e:	3001      	adds	r0, #1
10009130:	d037      	beq.n	100091a2 <_malloc_r+0xe6>
10009132:	6823      	ldr	r3, [r4, #0]
10009134:	442b      	add	r3, r5
10009136:	6023      	str	r3, [r4, #0]
10009138:	f8d8 3000 	ldr.w	r3, [r8]
1000913c:	2b00      	cmp	r3, #0
1000913e:	d038      	beq.n	100091b2 <_malloc_r+0xf6>
10009140:	685a      	ldr	r2, [r3, #4]
10009142:	42a2      	cmp	r2, r4
10009144:	d12b      	bne.n	1000919e <_malloc_r+0xe2>
10009146:	2200      	movs	r2, #0
10009148:	605a      	str	r2, [r3, #4]
1000914a:	e00f      	b.n	1000916c <_malloc_r+0xb0>
1000914c:	6822      	ldr	r2, [r4, #0]
1000914e:	1b52      	subs	r2, r2, r5
10009150:	d41f      	bmi.n	10009192 <_malloc_r+0xd6>
10009152:	2a0b      	cmp	r2, #11
10009154:	d917      	bls.n	10009186 <_malloc_r+0xca>
10009156:	1961      	adds	r1, r4, r5
10009158:	42a3      	cmp	r3, r4
1000915a:	6025      	str	r5, [r4, #0]
1000915c:	bf18      	it	ne
1000915e:	6059      	strne	r1, [r3, #4]
10009160:	6863      	ldr	r3, [r4, #4]
10009162:	bf08      	it	eq
10009164:	f8c8 1000 	streq.w	r1, [r8]
10009168:	5162      	str	r2, [r4, r5]
1000916a:	604b      	str	r3, [r1, #4]
1000916c:	4638      	mov	r0, r7
1000916e:	f104 060b 	add.w	r6, r4, #11
10009172:	f000 f829 	bl	100091c8 <__malloc_unlock>
10009176:	f026 0607 	bic.w	r6, r6, #7
1000917a:	1d23      	adds	r3, r4, #4
1000917c:	1af2      	subs	r2, r6, r3
1000917e:	d0ae      	beq.n	100090de <_malloc_r+0x22>
10009180:	1b9b      	subs	r3, r3, r6
10009182:	50a3      	str	r3, [r4, r2]
10009184:	e7ab      	b.n	100090de <_malloc_r+0x22>
10009186:	42a3      	cmp	r3, r4
10009188:	6862      	ldr	r2, [r4, #4]
1000918a:	d1dd      	bne.n	10009148 <_malloc_r+0x8c>
1000918c:	f8c8 2000 	str.w	r2, [r8]
10009190:	e7ec      	b.n	1000916c <_malloc_r+0xb0>
10009192:	4623      	mov	r3, r4
10009194:	6864      	ldr	r4, [r4, #4]
10009196:	e7ac      	b.n	100090f2 <_malloc_r+0x36>
10009198:	4634      	mov	r4, r6
1000919a:	6876      	ldr	r6, [r6, #4]
1000919c:	e7b4      	b.n	10009108 <_malloc_r+0x4c>
1000919e:	4613      	mov	r3, r2
100091a0:	e7cc      	b.n	1000913c <_malloc_r+0x80>
100091a2:	230c      	movs	r3, #12
100091a4:	603b      	str	r3, [r7, #0]
100091a6:	4638      	mov	r0, r7
100091a8:	f000 f80e 	bl	100091c8 <__malloc_unlock>
100091ac:	e797      	b.n	100090de <_malloc_r+0x22>
100091ae:	6025      	str	r5, [r4, #0]
100091b0:	e7dc      	b.n	1000916c <_malloc_r+0xb0>
100091b2:	605b      	str	r3, [r3, #4]
100091b4:	deff      	udf	#255	; 0xff
100091b6:	bf00      	nop
100091b8:	100203d8 	.word	0x100203d8

100091bc <__malloc_lock>:
100091bc:	4801      	ldr	r0, [pc, #4]	; (100091c4 <__malloc_lock+0x8>)
100091be:	f7ff b886 	b.w	100082ce <__retarget_lock_acquire_recursive>
100091c2:	bf00      	nop
100091c4:	100203d4 	.word	0x100203d4

100091c8 <__malloc_unlock>:
100091c8:	4801      	ldr	r0, [pc, #4]	; (100091d0 <__malloc_unlock+0x8>)
100091ca:	f7ff b881 	b.w	100082d0 <__retarget_lock_release_recursive>
100091ce:	bf00      	nop
100091d0:	100203d4 	.word	0x100203d4

100091d4 <_Balloc>:
100091d4:	b570      	push	{r4, r5, r6, lr}
100091d6:	69c6      	ldr	r6, [r0, #28]
100091d8:	4604      	mov	r4, r0
100091da:	460d      	mov	r5, r1
100091dc:	b976      	cbnz	r6, 100091fc <_Balloc+0x28>
100091de:	2010      	movs	r0, #16
100091e0:	f7ff ff44 	bl	1000906c <malloc>
100091e4:	4602      	mov	r2, r0
100091e6:	61e0      	str	r0, [r4, #28]
100091e8:	b920      	cbnz	r0, 100091f4 <_Balloc+0x20>
100091ea:	4b18      	ldr	r3, [pc, #96]	; (1000924c <_Balloc+0x78>)
100091ec:	4818      	ldr	r0, [pc, #96]	; (10009250 <_Balloc+0x7c>)
100091ee:	216b      	movs	r1, #107	; 0x6b
100091f0:	f001 ff66 	bl	1000b0c0 <__assert_func>
100091f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
100091f8:	6006      	str	r6, [r0, #0]
100091fa:	60c6      	str	r6, [r0, #12]
100091fc:	69e6      	ldr	r6, [r4, #28]
100091fe:	68f3      	ldr	r3, [r6, #12]
10009200:	b183      	cbz	r3, 10009224 <_Balloc+0x50>
10009202:	69e3      	ldr	r3, [r4, #28]
10009204:	68db      	ldr	r3, [r3, #12]
10009206:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
1000920a:	b9b8      	cbnz	r0, 1000923c <_Balloc+0x68>
1000920c:	2101      	movs	r1, #1
1000920e:	fa01 f605 	lsl.w	r6, r1, r5
10009212:	1d72      	adds	r2, r6, #5
10009214:	0092      	lsls	r2, r2, #2
10009216:	4620      	mov	r0, r4
10009218:	f001 ff70 	bl	1000b0fc <_calloc_r>
1000921c:	b160      	cbz	r0, 10009238 <_Balloc+0x64>
1000921e:	e9c0 5601 	strd	r5, r6, [r0, #4]
10009222:	e00e      	b.n	10009242 <_Balloc+0x6e>
10009224:	2221      	movs	r2, #33	; 0x21
10009226:	2104      	movs	r1, #4
10009228:	4620      	mov	r0, r4
1000922a:	f001 ff67 	bl	1000b0fc <_calloc_r>
1000922e:	69e3      	ldr	r3, [r4, #28]
10009230:	60f0      	str	r0, [r6, #12]
10009232:	68db      	ldr	r3, [r3, #12]
10009234:	2b00      	cmp	r3, #0
10009236:	d1e4      	bne.n	10009202 <_Balloc+0x2e>
10009238:	2000      	movs	r0, #0
1000923a:	bd70      	pop	{r4, r5, r6, pc}
1000923c:	6802      	ldr	r2, [r0, #0]
1000923e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
10009242:	2300      	movs	r3, #0
10009244:	e9c0 3303 	strd	r3, r3, [r0, #12]
10009248:	e7f7      	b.n	1000923a <_Balloc+0x66>
1000924a:	bf00      	nop
1000924c:	1000bc02 	.word	0x1000bc02
10009250:	1000bc82 	.word	0x1000bc82

10009254 <_Bfree>:
10009254:	b570      	push	{r4, r5, r6, lr}
10009256:	69c6      	ldr	r6, [r0, #28]
10009258:	4605      	mov	r5, r0
1000925a:	460c      	mov	r4, r1
1000925c:	b976      	cbnz	r6, 1000927c <_Bfree+0x28>
1000925e:	2010      	movs	r0, #16
10009260:	f7ff ff04 	bl	1000906c <malloc>
10009264:	4602      	mov	r2, r0
10009266:	61e8      	str	r0, [r5, #28]
10009268:	b920      	cbnz	r0, 10009274 <_Bfree+0x20>
1000926a:	4b09      	ldr	r3, [pc, #36]	; (10009290 <_Bfree+0x3c>)
1000926c:	4809      	ldr	r0, [pc, #36]	; (10009294 <_Bfree+0x40>)
1000926e:	218f      	movs	r1, #143	; 0x8f
10009270:	f001 ff26 	bl	1000b0c0 <__assert_func>
10009274:	e9c0 6601 	strd	r6, r6, [r0, #4]
10009278:	6006      	str	r6, [r0, #0]
1000927a:	60c6      	str	r6, [r0, #12]
1000927c:	b13c      	cbz	r4, 1000928e <_Bfree+0x3a>
1000927e:	69eb      	ldr	r3, [r5, #28]
10009280:	6862      	ldr	r2, [r4, #4]
10009282:	68db      	ldr	r3, [r3, #12]
10009284:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
10009288:	6021      	str	r1, [r4, #0]
1000928a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
1000928e:	bd70      	pop	{r4, r5, r6, pc}
10009290:	1000bc02 	.word	0x1000bc02
10009294:	1000bc82 	.word	0x1000bc82

10009298 <__multadd>:
10009298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000929c:	690d      	ldr	r5, [r1, #16]
1000929e:	4607      	mov	r7, r0
100092a0:	460c      	mov	r4, r1
100092a2:	461e      	mov	r6, r3
100092a4:	f101 0c14 	add.w	ip, r1, #20
100092a8:	2000      	movs	r0, #0
100092aa:	f8dc 3000 	ldr.w	r3, [ip]
100092ae:	b299      	uxth	r1, r3
100092b0:	fb02 6101 	mla	r1, r2, r1, r6
100092b4:	0c1e      	lsrs	r6, r3, #16
100092b6:	0c0b      	lsrs	r3, r1, #16
100092b8:	fb02 3306 	mla	r3, r2, r6, r3
100092bc:	b289      	uxth	r1, r1
100092be:	3001      	adds	r0, #1
100092c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
100092c4:	4285      	cmp	r5, r0
100092c6:	f84c 1b04 	str.w	r1, [ip], #4
100092ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
100092ce:	dcec      	bgt.n	100092aa <__multadd+0x12>
100092d0:	b30e      	cbz	r6, 10009316 <__multadd+0x7e>
100092d2:	68a3      	ldr	r3, [r4, #8]
100092d4:	42ab      	cmp	r3, r5
100092d6:	dc19      	bgt.n	1000930c <__multadd+0x74>
100092d8:	6861      	ldr	r1, [r4, #4]
100092da:	4638      	mov	r0, r7
100092dc:	3101      	adds	r1, #1
100092de:	f7ff ff79 	bl	100091d4 <_Balloc>
100092e2:	4680      	mov	r8, r0
100092e4:	b928      	cbnz	r0, 100092f2 <__multadd+0x5a>
100092e6:	4602      	mov	r2, r0
100092e8:	4b0c      	ldr	r3, [pc, #48]	; (1000931c <__multadd+0x84>)
100092ea:	480d      	ldr	r0, [pc, #52]	; (10009320 <__multadd+0x88>)
100092ec:	21ba      	movs	r1, #186	; 0xba
100092ee:	f001 fee7 	bl	1000b0c0 <__assert_func>
100092f2:	6922      	ldr	r2, [r4, #16]
100092f4:	3202      	adds	r2, #2
100092f6:	f104 010c 	add.w	r1, r4, #12
100092fa:	0092      	lsls	r2, r2, #2
100092fc:	300c      	adds	r0, #12
100092fe:	f001 fec9 	bl	1000b094 <memcpy>
10009302:	4621      	mov	r1, r4
10009304:	4638      	mov	r0, r7
10009306:	f7ff ffa5 	bl	10009254 <_Bfree>
1000930a:	4644      	mov	r4, r8
1000930c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
10009310:	3501      	adds	r5, #1
10009312:	615e      	str	r6, [r3, #20]
10009314:	6125      	str	r5, [r4, #16]
10009316:	4620      	mov	r0, r4
10009318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000931c:	1000bc71 	.word	0x1000bc71
10009320:	1000bc82 	.word	0x1000bc82

10009324 <__s2b>:
10009324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10009328:	460c      	mov	r4, r1
1000932a:	4615      	mov	r5, r2
1000932c:	461f      	mov	r7, r3
1000932e:	2209      	movs	r2, #9
10009330:	3308      	adds	r3, #8
10009332:	4606      	mov	r6, r0
10009334:	fb93 f3f2 	sdiv	r3, r3, r2
10009338:	2100      	movs	r1, #0
1000933a:	2201      	movs	r2, #1
1000933c:	429a      	cmp	r2, r3
1000933e:	db09      	blt.n	10009354 <__s2b+0x30>
10009340:	4630      	mov	r0, r6
10009342:	f7ff ff47 	bl	100091d4 <_Balloc>
10009346:	b940      	cbnz	r0, 1000935a <__s2b+0x36>
10009348:	4602      	mov	r2, r0
1000934a:	4b19      	ldr	r3, [pc, #100]	; (100093b0 <__s2b+0x8c>)
1000934c:	4819      	ldr	r0, [pc, #100]	; (100093b4 <__s2b+0x90>)
1000934e:	21d3      	movs	r1, #211	; 0xd3
10009350:	f001 feb6 	bl	1000b0c0 <__assert_func>
10009354:	0052      	lsls	r2, r2, #1
10009356:	3101      	adds	r1, #1
10009358:	e7f0      	b.n	1000933c <__s2b+0x18>
1000935a:	9b08      	ldr	r3, [sp, #32]
1000935c:	6143      	str	r3, [r0, #20]
1000935e:	2d09      	cmp	r5, #9
10009360:	f04f 0301 	mov.w	r3, #1
10009364:	6103      	str	r3, [r0, #16]
10009366:	dd16      	ble.n	10009396 <__s2b+0x72>
10009368:	f104 0909 	add.w	r9, r4, #9
1000936c:	46c8      	mov	r8, r9
1000936e:	442c      	add	r4, r5
10009370:	f818 3b01 	ldrb.w	r3, [r8], #1
10009374:	4601      	mov	r1, r0
10009376:	3b30      	subs	r3, #48	; 0x30
10009378:	220a      	movs	r2, #10
1000937a:	4630      	mov	r0, r6
1000937c:	f7ff ff8c 	bl	10009298 <__multadd>
10009380:	45a0      	cmp	r8, r4
10009382:	d1f5      	bne.n	10009370 <__s2b+0x4c>
10009384:	f1a5 0408 	sub.w	r4, r5, #8
10009388:	444c      	add	r4, r9
1000938a:	1b2d      	subs	r5, r5, r4
1000938c:	1963      	adds	r3, r4, r5
1000938e:	42bb      	cmp	r3, r7
10009390:	db04      	blt.n	1000939c <__s2b+0x78>
10009392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10009396:	340a      	adds	r4, #10
10009398:	2509      	movs	r5, #9
1000939a:	e7f6      	b.n	1000938a <__s2b+0x66>
1000939c:	f814 3b01 	ldrb.w	r3, [r4], #1
100093a0:	4601      	mov	r1, r0
100093a2:	3b30      	subs	r3, #48	; 0x30
100093a4:	220a      	movs	r2, #10
100093a6:	4630      	mov	r0, r6
100093a8:	f7ff ff76 	bl	10009298 <__multadd>
100093ac:	e7ee      	b.n	1000938c <__s2b+0x68>
100093ae:	bf00      	nop
100093b0:	1000bc71 	.word	0x1000bc71
100093b4:	1000bc82 	.word	0x1000bc82

100093b8 <__hi0bits>:
100093b8:	0c03      	lsrs	r3, r0, #16
100093ba:	041b      	lsls	r3, r3, #16
100093bc:	b9d3      	cbnz	r3, 100093f4 <__hi0bits+0x3c>
100093be:	0400      	lsls	r0, r0, #16
100093c0:	2310      	movs	r3, #16
100093c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
100093c6:	bf04      	itt	eq
100093c8:	0200      	lsleq	r0, r0, #8
100093ca:	3308      	addeq	r3, #8
100093cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
100093d0:	bf04      	itt	eq
100093d2:	0100      	lsleq	r0, r0, #4
100093d4:	3304      	addeq	r3, #4
100093d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
100093da:	bf04      	itt	eq
100093dc:	0080      	lsleq	r0, r0, #2
100093de:	3302      	addeq	r3, #2
100093e0:	2800      	cmp	r0, #0
100093e2:	db05      	blt.n	100093f0 <__hi0bits+0x38>
100093e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
100093e8:	f103 0301 	add.w	r3, r3, #1
100093ec:	bf08      	it	eq
100093ee:	2320      	moveq	r3, #32
100093f0:	4618      	mov	r0, r3
100093f2:	4770      	bx	lr
100093f4:	2300      	movs	r3, #0
100093f6:	e7e4      	b.n	100093c2 <__hi0bits+0xa>

100093f8 <__lo0bits>:
100093f8:	6803      	ldr	r3, [r0, #0]
100093fa:	f013 0207 	ands.w	r2, r3, #7
100093fe:	d00c      	beq.n	1000941a <__lo0bits+0x22>
10009400:	07d9      	lsls	r1, r3, #31
10009402:	d422      	bmi.n	1000944a <__lo0bits+0x52>
10009404:	079a      	lsls	r2, r3, #30
10009406:	bf49      	itett	mi
10009408:	085b      	lsrmi	r3, r3, #1
1000940a:	089b      	lsrpl	r3, r3, #2
1000940c:	6003      	strmi	r3, [r0, #0]
1000940e:	2201      	movmi	r2, #1
10009410:	bf5c      	itt	pl
10009412:	6003      	strpl	r3, [r0, #0]
10009414:	2202      	movpl	r2, #2
10009416:	4610      	mov	r0, r2
10009418:	4770      	bx	lr
1000941a:	b299      	uxth	r1, r3
1000941c:	b909      	cbnz	r1, 10009422 <__lo0bits+0x2a>
1000941e:	0c1b      	lsrs	r3, r3, #16
10009420:	2210      	movs	r2, #16
10009422:	b2d9      	uxtb	r1, r3
10009424:	b909      	cbnz	r1, 1000942a <__lo0bits+0x32>
10009426:	3208      	adds	r2, #8
10009428:	0a1b      	lsrs	r3, r3, #8
1000942a:	0719      	lsls	r1, r3, #28
1000942c:	bf04      	itt	eq
1000942e:	091b      	lsreq	r3, r3, #4
10009430:	3204      	addeq	r2, #4
10009432:	0799      	lsls	r1, r3, #30
10009434:	bf04      	itt	eq
10009436:	089b      	lsreq	r3, r3, #2
10009438:	3202      	addeq	r2, #2
1000943a:	07d9      	lsls	r1, r3, #31
1000943c:	d403      	bmi.n	10009446 <__lo0bits+0x4e>
1000943e:	085b      	lsrs	r3, r3, #1
10009440:	f102 0201 	add.w	r2, r2, #1
10009444:	d003      	beq.n	1000944e <__lo0bits+0x56>
10009446:	6003      	str	r3, [r0, #0]
10009448:	e7e5      	b.n	10009416 <__lo0bits+0x1e>
1000944a:	2200      	movs	r2, #0
1000944c:	e7e3      	b.n	10009416 <__lo0bits+0x1e>
1000944e:	2220      	movs	r2, #32
10009450:	e7e1      	b.n	10009416 <__lo0bits+0x1e>
	...

10009454 <__i2b>:
10009454:	b510      	push	{r4, lr}
10009456:	460c      	mov	r4, r1
10009458:	2101      	movs	r1, #1
1000945a:	f7ff febb 	bl	100091d4 <_Balloc>
1000945e:	4602      	mov	r2, r0
10009460:	b928      	cbnz	r0, 1000946e <__i2b+0x1a>
10009462:	4b05      	ldr	r3, [pc, #20]	; (10009478 <__i2b+0x24>)
10009464:	4805      	ldr	r0, [pc, #20]	; (1000947c <__i2b+0x28>)
10009466:	f240 1145 	movw	r1, #325	; 0x145
1000946a:	f001 fe29 	bl	1000b0c0 <__assert_func>
1000946e:	2301      	movs	r3, #1
10009470:	6144      	str	r4, [r0, #20]
10009472:	6103      	str	r3, [r0, #16]
10009474:	bd10      	pop	{r4, pc}
10009476:	bf00      	nop
10009478:	1000bc71 	.word	0x1000bc71
1000947c:	1000bc82 	.word	0x1000bc82

10009480 <__multiply>:
10009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009484:	4691      	mov	r9, r2
10009486:	690a      	ldr	r2, [r1, #16]
10009488:	f8d9 3010 	ldr.w	r3, [r9, #16]
1000948c:	429a      	cmp	r2, r3
1000948e:	bfb8      	it	lt
10009490:	460b      	movlt	r3, r1
10009492:	460c      	mov	r4, r1
10009494:	bfbc      	itt	lt
10009496:	464c      	movlt	r4, r9
10009498:	4699      	movlt	r9, r3
1000949a:	6927      	ldr	r7, [r4, #16]
1000949c:	f8d9 a010 	ldr.w	sl, [r9, #16]
100094a0:	68a3      	ldr	r3, [r4, #8]
100094a2:	6861      	ldr	r1, [r4, #4]
100094a4:	eb07 060a 	add.w	r6, r7, sl
100094a8:	42b3      	cmp	r3, r6
100094aa:	b085      	sub	sp, #20
100094ac:	bfb8      	it	lt
100094ae:	3101      	addlt	r1, #1
100094b0:	f7ff fe90 	bl	100091d4 <_Balloc>
100094b4:	b930      	cbnz	r0, 100094c4 <__multiply+0x44>
100094b6:	4602      	mov	r2, r0
100094b8:	4b44      	ldr	r3, [pc, #272]	; (100095cc <__multiply+0x14c>)
100094ba:	4845      	ldr	r0, [pc, #276]	; (100095d0 <__multiply+0x150>)
100094bc:	f44f 71b1 	mov.w	r1, #354	; 0x162
100094c0:	f001 fdfe 	bl	1000b0c0 <__assert_func>
100094c4:	f100 0514 	add.w	r5, r0, #20
100094c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
100094cc:	462b      	mov	r3, r5
100094ce:	2200      	movs	r2, #0
100094d0:	4543      	cmp	r3, r8
100094d2:	d321      	bcc.n	10009518 <__multiply+0x98>
100094d4:	f104 0314 	add.w	r3, r4, #20
100094d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
100094dc:	f109 0314 	add.w	r3, r9, #20
100094e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
100094e4:	9202      	str	r2, [sp, #8]
100094e6:	1b3a      	subs	r2, r7, r4
100094e8:	3a15      	subs	r2, #21
100094ea:	f022 0203 	bic.w	r2, r2, #3
100094ee:	3204      	adds	r2, #4
100094f0:	f104 0115 	add.w	r1, r4, #21
100094f4:	428f      	cmp	r7, r1
100094f6:	bf38      	it	cc
100094f8:	2204      	movcc	r2, #4
100094fa:	9201      	str	r2, [sp, #4]
100094fc:	9a02      	ldr	r2, [sp, #8]
100094fe:	9303      	str	r3, [sp, #12]
10009500:	429a      	cmp	r2, r3
10009502:	d80c      	bhi.n	1000951e <__multiply+0x9e>
10009504:	2e00      	cmp	r6, #0
10009506:	dd03      	ble.n	10009510 <__multiply+0x90>
10009508:	f858 3d04 	ldr.w	r3, [r8, #-4]!
1000950c:	2b00      	cmp	r3, #0
1000950e:	d05b      	beq.n	100095c8 <__multiply+0x148>
10009510:	6106      	str	r6, [r0, #16]
10009512:	b005      	add	sp, #20
10009514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009518:	f843 2b04 	str.w	r2, [r3], #4
1000951c:	e7d8      	b.n	100094d0 <__multiply+0x50>
1000951e:	f8b3 a000 	ldrh.w	sl, [r3]
10009522:	f1ba 0f00 	cmp.w	sl, #0
10009526:	d024      	beq.n	10009572 <__multiply+0xf2>
10009528:	f104 0e14 	add.w	lr, r4, #20
1000952c:	46a9      	mov	r9, r5
1000952e:	f04f 0c00 	mov.w	ip, #0
10009532:	f85e 2b04 	ldr.w	r2, [lr], #4
10009536:	f8d9 1000 	ldr.w	r1, [r9]
1000953a:	fa1f fb82 	uxth.w	fp, r2
1000953e:	b289      	uxth	r1, r1
10009540:	fb0a 110b 	mla	r1, sl, fp, r1
10009544:	ea4f 4b12 	mov.w	fp, r2, lsr #16
10009548:	f8d9 2000 	ldr.w	r2, [r9]
1000954c:	4461      	add	r1, ip
1000954e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
10009552:	fb0a c20b 	mla	r2, sl, fp, ip
10009556:	eb02 4211 	add.w	r2, r2, r1, lsr #16
1000955a:	b289      	uxth	r1, r1
1000955c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
10009560:	4577      	cmp	r7, lr
10009562:	f849 1b04 	str.w	r1, [r9], #4
10009566:	ea4f 4c12 	mov.w	ip, r2, lsr #16
1000956a:	d8e2      	bhi.n	10009532 <__multiply+0xb2>
1000956c:	9a01      	ldr	r2, [sp, #4]
1000956e:	f845 c002 	str.w	ip, [r5, r2]
10009572:	9a03      	ldr	r2, [sp, #12]
10009574:	f8b2 9002 	ldrh.w	r9, [r2, #2]
10009578:	3304      	adds	r3, #4
1000957a:	f1b9 0f00 	cmp.w	r9, #0
1000957e:	d021      	beq.n	100095c4 <__multiply+0x144>
10009580:	6829      	ldr	r1, [r5, #0]
10009582:	f104 0c14 	add.w	ip, r4, #20
10009586:	46ae      	mov	lr, r5
10009588:	f04f 0a00 	mov.w	sl, #0
1000958c:	f8bc b000 	ldrh.w	fp, [ip]
10009590:	f8be 2002 	ldrh.w	r2, [lr, #2]
10009594:	fb09 220b 	mla	r2, r9, fp, r2
10009598:	4452      	add	r2, sl
1000959a:	b289      	uxth	r1, r1
1000959c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
100095a0:	f84e 1b04 	str.w	r1, [lr], #4
100095a4:	f85c 1b04 	ldr.w	r1, [ip], #4
100095a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
100095ac:	f8be 1000 	ldrh.w	r1, [lr]
100095b0:	fb09 110a 	mla	r1, r9, sl, r1
100095b4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
100095b8:	4567      	cmp	r7, ip
100095ba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
100095be:	d8e5      	bhi.n	1000958c <__multiply+0x10c>
100095c0:	9a01      	ldr	r2, [sp, #4]
100095c2:	50a9      	str	r1, [r5, r2]
100095c4:	3504      	adds	r5, #4
100095c6:	e799      	b.n	100094fc <__multiply+0x7c>
100095c8:	3e01      	subs	r6, #1
100095ca:	e79b      	b.n	10009504 <__multiply+0x84>
100095cc:	1000bc71 	.word	0x1000bc71
100095d0:	1000bc82 	.word	0x1000bc82

100095d4 <__pow5mult>:
100095d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
100095d8:	4615      	mov	r5, r2
100095da:	f012 0203 	ands.w	r2, r2, #3
100095de:	4606      	mov	r6, r0
100095e0:	460f      	mov	r7, r1
100095e2:	d007      	beq.n	100095f4 <__pow5mult+0x20>
100095e4:	4c25      	ldr	r4, [pc, #148]	; (1000967c <__pow5mult+0xa8>)
100095e6:	3a01      	subs	r2, #1
100095e8:	2300      	movs	r3, #0
100095ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
100095ee:	f7ff fe53 	bl	10009298 <__multadd>
100095f2:	4607      	mov	r7, r0
100095f4:	10ad      	asrs	r5, r5, #2
100095f6:	d03d      	beq.n	10009674 <__pow5mult+0xa0>
100095f8:	69f4      	ldr	r4, [r6, #28]
100095fa:	b97c      	cbnz	r4, 1000961c <__pow5mult+0x48>
100095fc:	2010      	movs	r0, #16
100095fe:	f7ff fd35 	bl	1000906c <malloc>
10009602:	4602      	mov	r2, r0
10009604:	61f0      	str	r0, [r6, #28]
10009606:	b928      	cbnz	r0, 10009614 <__pow5mult+0x40>
10009608:	4b1d      	ldr	r3, [pc, #116]	; (10009680 <__pow5mult+0xac>)
1000960a:	481e      	ldr	r0, [pc, #120]	; (10009684 <__pow5mult+0xb0>)
1000960c:	f240 11b3 	movw	r1, #435	; 0x1b3
10009610:	f001 fd56 	bl	1000b0c0 <__assert_func>
10009614:	e9c0 4401 	strd	r4, r4, [r0, #4]
10009618:	6004      	str	r4, [r0, #0]
1000961a:	60c4      	str	r4, [r0, #12]
1000961c:	f8d6 801c 	ldr.w	r8, [r6, #28]
10009620:	f8d8 4008 	ldr.w	r4, [r8, #8]
10009624:	b94c      	cbnz	r4, 1000963a <__pow5mult+0x66>
10009626:	f240 2171 	movw	r1, #625	; 0x271
1000962a:	4630      	mov	r0, r6
1000962c:	f7ff ff12 	bl	10009454 <__i2b>
10009630:	2300      	movs	r3, #0
10009632:	f8c8 0008 	str.w	r0, [r8, #8]
10009636:	4604      	mov	r4, r0
10009638:	6003      	str	r3, [r0, #0]
1000963a:	f04f 0900 	mov.w	r9, #0
1000963e:	07eb      	lsls	r3, r5, #31
10009640:	d50a      	bpl.n	10009658 <__pow5mult+0x84>
10009642:	4639      	mov	r1, r7
10009644:	4622      	mov	r2, r4
10009646:	4630      	mov	r0, r6
10009648:	f7ff ff1a 	bl	10009480 <__multiply>
1000964c:	4639      	mov	r1, r7
1000964e:	4680      	mov	r8, r0
10009650:	4630      	mov	r0, r6
10009652:	f7ff fdff 	bl	10009254 <_Bfree>
10009656:	4647      	mov	r7, r8
10009658:	106d      	asrs	r5, r5, #1
1000965a:	d00b      	beq.n	10009674 <__pow5mult+0xa0>
1000965c:	6820      	ldr	r0, [r4, #0]
1000965e:	b938      	cbnz	r0, 10009670 <__pow5mult+0x9c>
10009660:	4622      	mov	r2, r4
10009662:	4621      	mov	r1, r4
10009664:	4630      	mov	r0, r6
10009666:	f7ff ff0b 	bl	10009480 <__multiply>
1000966a:	6020      	str	r0, [r4, #0]
1000966c:	f8c0 9000 	str.w	r9, [r0]
10009670:	4604      	mov	r4, r0
10009672:	e7e4      	b.n	1000963e <__pow5mult+0x6a>
10009674:	4638      	mov	r0, r7
10009676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1000967a:	bf00      	nop
1000967c:	1000bdd0 	.word	0x1000bdd0
10009680:	1000bc02 	.word	0x1000bc02
10009684:	1000bc82 	.word	0x1000bc82

10009688 <__lshift>:
10009688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000968c:	460c      	mov	r4, r1
1000968e:	6849      	ldr	r1, [r1, #4]
10009690:	6923      	ldr	r3, [r4, #16]
10009692:	eb03 1862 	add.w	r8, r3, r2, asr #5
10009696:	68a3      	ldr	r3, [r4, #8]
10009698:	4607      	mov	r7, r0
1000969a:	4691      	mov	r9, r2
1000969c:	ea4f 1a62 	mov.w	sl, r2, asr #5
100096a0:	f108 0601 	add.w	r6, r8, #1
100096a4:	42b3      	cmp	r3, r6
100096a6:	db0b      	blt.n	100096c0 <__lshift+0x38>
100096a8:	4638      	mov	r0, r7
100096aa:	f7ff fd93 	bl	100091d4 <_Balloc>
100096ae:	4605      	mov	r5, r0
100096b0:	b948      	cbnz	r0, 100096c6 <__lshift+0x3e>
100096b2:	4602      	mov	r2, r0
100096b4:	4b28      	ldr	r3, [pc, #160]	; (10009758 <__lshift+0xd0>)
100096b6:	4829      	ldr	r0, [pc, #164]	; (1000975c <__lshift+0xd4>)
100096b8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
100096bc:	f001 fd00 	bl	1000b0c0 <__assert_func>
100096c0:	3101      	adds	r1, #1
100096c2:	005b      	lsls	r3, r3, #1
100096c4:	e7ee      	b.n	100096a4 <__lshift+0x1c>
100096c6:	2300      	movs	r3, #0
100096c8:	f100 0114 	add.w	r1, r0, #20
100096cc:	f100 0210 	add.w	r2, r0, #16
100096d0:	4618      	mov	r0, r3
100096d2:	4553      	cmp	r3, sl
100096d4:	db33      	blt.n	1000973e <__lshift+0xb6>
100096d6:	6920      	ldr	r0, [r4, #16]
100096d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
100096dc:	f104 0314 	add.w	r3, r4, #20
100096e0:	f019 091f 	ands.w	r9, r9, #31
100096e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
100096e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
100096ec:	d02b      	beq.n	10009746 <__lshift+0xbe>
100096ee:	f1c9 0e20 	rsb	lr, r9, #32
100096f2:	468a      	mov	sl, r1
100096f4:	2200      	movs	r2, #0
100096f6:	6818      	ldr	r0, [r3, #0]
100096f8:	fa00 f009 	lsl.w	r0, r0, r9
100096fc:	4310      	orrs	r0, r2
100096fe:	f84a 0b04 	str.w	r0, [sl], #4
10009702:	f853 2b04 	ldr.w	r2, [r3], #4
10009706:	459c      	cmp	ip, r3
10009708:	fa22 f20e 	lsr.w	r2, r2, lr
1000970c:	d8f3      	bhi.n	100096f6 <__lshift+0x6e>
1000970e:	ebac 0304 	sub.w	r3, ip, r4
10009712:	3b15      	subs	r3, #21
10009714:	f023 0303 	bic.w	r3, r3, #3
10009718:	3304      	adds	r3, #4
1000971a:	f104 0015 	add.w	r0, r4, #21
1000971e:	4584      	cmp	ip, r0
10009720:	bf38      	it	cc
10009722:	2304      	movcc	r3, #4
10009724:	50ca      	str	r2, [r1, r3]
10009726:	b10a      	cbz	r2, 1000972c <__lshift+0xa4>
10009728:	f108 0602 	add.w	r6, r8, #2
1000972c:	3e01      	subs	r6, #1
1000972e:	4638      	mov	r0, r7
10009730:	612e      	str	r6, [r5, #16]
10009732:	4621      	mov	r1, r4
10009734:	f7ff fd8e 	bl	10009254 <_Bfree>
10009738:	4628      	mov	r0, r5
1000973a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000973e:	f842 0f04 	str.w	r0, [r2, #4]!
10009742:	3301      	adds	r3, #1
10009744:	e7c5      	b.n	100096d2 <__lshift+0x4a>
10009746:	3904      	subs	r1, #4
10009748:	f853 2b04 	ldr.w	r2, [r3], #4
1000974c:	f841 2f04 	str.w	r2, [r1, #4]!
10009750:	459c      	cmp	ip, r3
10009752:	d8f9      	bhi.n	10009748 <__lshift+0xc0>
10009754:	e7ea      	b.n	1000972c <__lshift+0xa4>
10009756:	bf00      	nop
10009758:	1000bc71 	.word	0x1000bc71
1000975c:	1000bc82 	.word	0x1000bc82

10009760 <__mcmp>:
10009760:	b530      	push	{r4, r5, lr}
10009762:	6902      	ldr	r2, [r0, #16]
10009764:	690c      	ldr	r4, [r1, #16]
10009766:	1b12      	subs	r2, r2, r4
10009768:	d10e      	bne.n	10009788 <__mcmp+0x28>
1000976a:	f100 0314 	add.w	r3, r0, #20
1000976e:	3114      	adds	r1, #20
10009770:	eb03 0084 	add.w	r0, r3, r4, lsl #2
10009774:	eb01 0184 	add.w	r1, r1, r4, lsl #2
10009778:	f850 5d04 	ldr.w	r5, [r0, #-4]!
1000977c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
10009780:	42a5      	cmp	r5, r4
10009782:	d003      	beq.n	1000978c <__mcmp+0x2c>
10009784:	d305      	bcc.n	10009792 <__mcmp+0x32>
10009786:	2201      	movs	r2, #1
10009788:	4610      	mov	r0, r2
1000978a:	bd30      	pop	{r4, r5, pc}
1000978c:	4283      	cmp	r3, r0
1000978e:	d3f3      	bcc.n	10009778 <__mcmp+0x18>
10009790:	e7fa      	b.n	10009788 <__mcmp+0x28>
10009792:	f04f 32ff 	mov.w	r2, #4294967295
10009796:	e7f7      	b.n	10009788 <__mcmp+0x28>

10009798 <__mdiff>:
10009798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000979c:	460c      	mov	r4, r1
1000979e:	4606      	mov	r6, r0
100097a0:	4611      	mov	r1, r2
100097a2:	4620      	mov	r0, r4
100097a4:	4690      	mov	r8, r2
100097a6:	f7ff ffdb 	bl	10009760 <__mcmp>
100097aa:	1e05      	subs	r5, r0, #0
100097ac:	d110      	bne.n	100097d0 <__mdiff+0x38>
100097ae:	4629      	mov	r1, r5
100097b0:	4630      	mov	r0, r6
100097b2:	f7ff fd0f 	bl	100091d4 <_Balloc>
100097b6:	b930      	cbnz	r0, 100097c6 <__mdiff+0x2e>
100097b8:	4b3a      	ldr	r3, [pc, #232]	; (100098a4 <__mdiff+0x10c>)
100097ba:	4602      	mov	r2, r0
100097bc:	f240 2137 	movw	r1, #567	; 0x237
100097c0:	4839      	ldr	r0, [pc, #228]	; (100098a8 <__mdiff+0x110>)
100097c2:	f001 fc7d 	bl	1000b0c0 <__assert_func>
100097c6:	2301      	movs	r3, #1
100097c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
100097cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
100097d0:	bfa4      	itt	ge
100097d2:	4643      	movge	r3, r8
100097d4:	46a0      	movge	r8, r4
100097d6:	4630      	mov	r0, r6
100097d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
100097dc:	bfa6      	itte	ge
100097de:	461c      	movge	r4, r3
100097e0:	2500      	movge	r5, #0
100097e2:	2501      	movlt	r5, #1
100097e4:	f7ff fcf6 	bl	100091d4 <_Balloc>
100097e8:	b920      	cbnz	r0, 100097f4 <__mdiff+0x5c>
100097ea:	4b2e      	ldr	r3, [pc, #184]	; (100098a4 <__mdiff+0x10c>)
100097ec:	4602      	mov	r2, r0
100097ee:	f240 2145 	movw	r1, #581	; 0x245
100097f2:	e7e5      	b.n	100097c0 <__mdiff+0x28>
100097f4:	f8d8 7010 	ldr.w	r7, [r8, #16]
100097f8:	6926      	ldr	r6, [r4, #16]
100097fa:	60c5      	str	r5, [r0, #12]
100097fc:	f104 0914 	add.w	r9, r4, #20
10009800:	f108 0514 	add.w	r5, r8, #20
10009804:	f100 0e14 	add.w	lr, r0, #20
10009808:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
1000980c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
10009810:	f108 0210 	add.w	r2, r8, #16
10009814:	46f2      	mov	sl, lr
10009816:	2100      	movs	r1, #0
10009818:	f859 3b04 	ldr.w	r3, [r9], #4
1000981c:	f852 bf04 	ldr.w	fp, [r2, #4]!
10009820:	fa11 f88b 	uxtah	r8, r1, fp
10009824:	b299      	uxth	r1, r3
10009826:	0c1b      	lsrs	r3, r3, #16
10009828:	eba8 0801 	sub.w	r8, r8, r1
1000982c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
10009830:	eb03 4328 	add.w	r3, r3, r8, asr #16
10009834:	fa1f f888 	uxth.w	r8, r8
10009838:	1419      	asrs	r1, r3, #16
1000983a:	454e      	cmp	r6, r9
1000983c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
10009840:	f84a 3b04 	str.w	r3, [sl], #4
10009844:	d8e8      	bhi.n	10009818 <__mdiff+0x80>
10009846:	1b33      	subs	r3, r6, r4
10009848:	3b15      	subs	r3, #21
1000984a:	f023 0303 	bic.w	r3, r3, #3
1000984e:	3304      	adds	r3, #4
10009850:	3415      	adds	r4, #21
10009852:	42a6      	cmp	r6, r4
10009854:	bf38      	it	cc
10009856:	2304      	movcc	r3, #4
10009858:	441d      	add	r5, r3
1000985a:	4473      	add	r3, lr
1000985c:	469e      	mov	lr, r3
1000985e:	462e      	mov	r6, r5
10009860:	4566      	cmp	r6, ip
10009862:	d30e      	bcc.n	10009882 <__mdiff+0xea>
10009864:	f10c 0203 	add.w	r2, ip, #3
10009868:	1b52      	subs	r2, r2, r5
1000986a:	f022 0203 	bic.w	r2, r2, #3
1000986e:	3d03      	subs	r5, #3
10009870:	45ac      	cmp	ip, r5
10009872:	bf38      	it	cc
10009874:	2200      	movcc	r2, #0
10009876:	4413      	add	r3, r2
10009878:	f853 2d04 	ldr.w	r2, [r3, #-4]!
1000987c:	b17a      	cbz	r2, 1000989e <__mdiff+0x106>
1000987e:	6107      	str	r7, [r0, #16]
10009880:	e7a4      	b.n	100097cc <__mdiff+0x34>
10009882:	f856 8b04 	ldr.w	r8, [r6], #4
10009886:	fa11 f288 	uxtah	r2, r1, r8
1000988a:	1414      	asrs	r4, r2, #16
1000988c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
10009890:	b292      	uxth	r2, r2
10009892:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
10009896:	f84e 2b04 	str.w	r2, [lr], #4
1000989a:	1421      	asrs	r1, r4, #16
1000989c:	e7e0      	b.n	10009860 <__mdiff+0xc8>
1000989e:	3f01      	subs	r7, #1
100098a0:	e7ea      	b.n	10009878 <__mdiff+0xe0>
100098a2:	bf00      	nop
100098a4:	1000bc71 	.word	0x1000bc71
100098a8:	1000bc82 	.word	0x1000bc82

100098ac <__ulp>:
100098ac:	b082      	sub	sp, #8
100098ae:	ed8d 0b00 	vstr	d0, [sp]
100098b2:	9a01      	ldr	r2, [sp, #4]
100098b4:	4b0f      	ldr	r3, [pc, #60]	; (100098f4 <__ulp+0x48>)
100098b6:	4013      	ands	r3, r2
100098b8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
100098bc:	2b00      	cmp	r3, #0
100098be:	dc08      	bgt.n	100098d2 <__ulp+0x26>
100098c0:	425b      	negs	r3, r3
100098c2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
100098c6:	ea4f 5223 	mov.w	r2, r3, asr #20
100098ca:	da04      	bge.n	100098d6 <__ulp+0x2a>
100098cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
100098d0:	4113      	asrs	r3, r2
100098d2:	2200      	movs	r2, #0
100098d4:	e008      	b.n	100098e8 <__ulp+0x3c>
100098d6:	f1a2 0314 	sub.w	r3, r2, #20
100098da:	2b1e      	cmp	r3, #30
100098dc:	bfda      	itte	le
100098de:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
100098e2:	40da      	lsrle	r2, r3
100098e4:	2201      	movgt	r2, #1
100098e6:	2300      	movs	r3, #0
100098e8:	4619      	mov	r1, r3
100098ea:	4610      	mov	r0, r2
100098ec:	ec41 0b10 	vmov	d0, r0, r1
100098f0:	b002      	add	sp, #8
100098f2:	4770      	bx	lr
100098f4:	7ff00000 	.word	0x7ff00000

100098f8 <__b2d>:
100098f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
100098fc:	6906      	ldr	r6, [r0, #16]
100098fe:	f100 0814 	add.w	r8, r0, #20
10009902:	eb08 0686 	add.w	r6, r8, r6, lsl #2
10009906:	1f37      	subs	r7, r6, #4
10009908:	f856 2c04 	ldr.w	r2, [r6, #-4]
1000990c:	4610      	mov	r0, r2
1000990e:	f7ff fd53 	bl	100093b8 <__hi0bits>
10009912:	f1c0 0320 	rsb	r3, r0, #32
10009916:	280a      	cmp	r0, #10
10009918:	600b      	str	r3, [r1, #0]
1000991a:	491b      	ldr	r1, [pc, #108]	; (10009988 <__b2d+0x90>)
1000991c:	dc15      	bgt.n	1000994a <__b2d+0x52>
1000991e:	f1c0 0c0b 	rsb	ip, r0, #11
10009922:	fa22 f30c 	lsr.w	r3, r2, ip
10009926:	45b8      	cmp	r8, r7
10009928:	ea43 0501 	orr.w	r5, r3, r1
1000992c:	bf34      	ite	cc
1000992e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
10009932:	2300      	movcs	r3, #0
10009934:	3015      	adds	r0, #21
10009936:	fa02 f000 	lsl.w	r0, r2, r0
1000993a:	fa23 f30c 	lsr.w	r3, r3, ip
1000993e:	4303      	orrs	r3, r0
10009940:	461c      	mov	r4, r3
10009942:	ec45 4b10 	vmov	d0, r4, r5
10009946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000994a:	45b8      	cmp	r8, r7
1000994c:	bf3a      	itte	cc
1000994e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
10009952:	f1a6 0708 	subcc.w	r7, r6, #8
10009956:	2300      	movcs	r3, #0
10009958:	380b      	subs	r0, #11
1000995a:	d012      	beq.n	10009982 <__b2d+0x8a>
1000995c:	f1c0 0120 	rsb	r1, r0, #32
10009960:	fa23 f401 	lsr.w	r4, r3, r1
10009964:	4082      	lsls	r2, r0
10009966:	4322      	orrs	r2, r4
10009968:	4547      	cmp	r7, r8
1000996a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
1000996e:	bf8c      	ite	hi
10009970:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
10009974:	2200      	movls	r2, #0
10009976:	4083      	lsls	r3, r0
10009978:	40ca      	lsrs	r2, r1
1000997a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
1000997e:	4313      	orrs	r3, r2
10009980:	e7de      	b.n	10009940 <__b2d+0x48>
10009982:	ea42 0501 	orr.w	r5, r2, r1
10009986:	e7db      	b.n	10009940 <__b2d+0x48>
10009988:	3ff00000 	.word	0x3ff00000

1000998c <__d2b>:
1000998c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
10009990:	460f      	mov	r7, r1
10009992:	2101      	movs	r1, #1
10009994:	ec59 8b10 	vmov	r8, r9, d0
10009998:	4616      	mov	r6, r2
1000999a:	f7ff fc1b 	bl	100091d4 <_Balloc>
1000999e:	4604      	mov	r4, r0
100099a0:	b930      	cbnz	r0, 100099b0 <__d2b+0x24>
100099a2:	4602      	mov	r2, r0
100099a4:	4b24      	ldr	r3, [pc, #144]	; (10009a38 <__d2b+0xac>)
100099a6:	4825      	ldr	r0, [pc, #148]	; (10009a3c <__d2b+0xb0>)
100099a8:	f240 310f 	movw	r1, #783	; 0x30f
100099ac:	f001 fb88 	bl	1000b0c0 <__assert_func>
100099b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
100099b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
100099b8:	bb2d      	cbnz	r5, 10009a06 <__d2b+0x7a>
100099ba:	9301      	str	r3, [sp, #4]
100099bc:	f1b8 0300 	subs.w	r3, r8, #0
100099c0:	d026      	beq.n	10009a10 <__d2b+0x84>
100099c2:	4668      	mov	r0, sp
100099c4:	9300      	str	r3, [sp, #0]
100099c6:	f7ff fd17 	bl	100093f8 <__lo0bits>
100099ca:	e9dd 1200 	ldrd	r1, r2, [sp]
100099ce:	b1e8      	cbz	r0, 10009a0c <__d2b+0x80>
100099d0:	f1c0 0320 	rsb	r3, r0, #32
100099d4:	fa02 f303 	lsl.w	r3, r2, r3
100099d8:	430b      	orrs	r3, r1
100099da:	40c2      	lsrs	r2, r0
100099dc:	6163      	str	r3, [r4, #20]
100099de:	9201      	str	r2, [sp, #4]
100099e0:	9b01      	ldr	r3, [sp, #4]
100099e2:	61a3      	str	r3, [r4, #24]
100099e4:	2b00      	cmp	r3, #0
100099e6:	bf14      	ite	ne
100099e8:	2202      	movne	r2, #2
100099ea:	2201      	moveq	r2, #1
100099ec:	6122      	str	r2, [r4, #16]
100099ee:	b1bd      	cbz	r5, 10009a20 <__d2b+0x94>
100099f0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
100099f4:	4405      	add	r5, r0
100099f6:	603d      	str	r5, [r7, #0]
100099f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
100099fc:	6030      	str	r0, [r6, #0]
100099fe:	4620      	mov	r0, r4
10009a00:	b003      	add	sp, #12
10009a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
10009a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
10009a0a:	e7d6      	b.n	100099ba <__d2b+0x2e>
10009a0c:	6161      	str	r1, [r4, #20]
10009a0e:	e7e7      	b.n	100099e0 <__d2b+0x54>
10009a10:	a801      	add	r0, sp, #4
10009a12:	f7ff fcf1 	bl	100093f8 <__lo0bits>
10009a16:	9b01      	ldr	r3, [sp, #4]
10009a18:	6163      	str	r3, [r4, #20]
10009a1a:	3020      	adds	r0, #32
10009a1c:	2201      	movs	r2, #1
10009a1e:	e7e5      	b.n	100099ec <__d2b+0x60>
10009a20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
10009a24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
10009a28:	6038      	str	r0, [r7, #0]
10009a2a:	6918      	ldr	r0, [r3, #16]
10009a2c:	f7ff fcc4 	bl	100093b8 <__hi0bits>
10009a30:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
10009a34:	e7e2      	b.n	100099fc <__d2b+0x70>
10009a36:	bf00      	nop
10009a38:	1000bc71 	.word	0x1000bc71
10009a3c:	1000bc82 	.word	0x1000bc82

10009a40 <__ratio>:
10009a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009a44:	4688      	mov	r8, r1
10009a46:	4669      	mov	r1, sp
10009a48:	4681      	mov	r9, r0
10009a4a:	f7ff ff55 	bl	100098f8 <__b2d>
10009a4e:	a901      	add	r1, sp, #4
10009a50:	4640      	mov	r0, r8
10009a52:	ec55 4b10 	vmov	r4, r5, d0
10009a56:	f7ff ff4f 	bl	100098f8 <__b2d>
10009a5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
10009a5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
10009a62:	eba3 0c02 	sub.w	ip, r3, r2
10009a66:	e9dd 3200 	ldrd	r3, r2, [sp]
10009a6a:	1a9b      	subs	r3, r3, r2
10009a6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
10009a70:	ec51 0b10 	vmov	r0, r1, d0
10009a74:	2b00      	cmp	r3, #0
10009a76:	bfd6      	itet	le
10009a78:	460a      	movle	r2, r1
10009a7a:	462a      	movgt	r2, r5
10009a7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
10009a80:	468b      	mov	fp, r1
10009a82:	462f      	mov	r7, r5
10009a84:	bfd4      	ite	le
10009a86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
10009a8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
10009a8e:	4620      	mov	r0, r4
10009a90:	ee10 2a10 	vmov	r2, s0
10009a94:	465b      	mov	r3, fp
10009a96:	4639      	mov	r1, r7
10009a98:	f7f6 fe10 	bl	100006bc <__aeabi_ddiv>
10009a9c:	ec41 0b10 	vmov	d0, r0, r1
10009aa0:	b003      	add	sp, #12
10009aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

10009aa6 <__copybits>:
10009aa6:	3901      	subs	r1, #1
10009aa8:	b570      	push	{r4, r5, r6, lr}
10009aaa:	1149      	asrs	r1, r1, #5
10009aac:	6914      	ldr	r4, [r2, #16]
10009aae:	3101      	adds	r1, #1
10009ab0:	f102 0314 	add.w	r3, r2, #20
10009ab4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
10009ab8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
10009abc:	1f05      	subs	r5, r0, #4
10009abe:	42a3      	cmp	r3, r4
10009ac0:	d30c      	bcc.n	10009adc <__copybits+0x36>
10009ac2:	1aa3      	subs	r3, r4, r2
10009ac4:	3b11      	subs	r3, #17
10009ac6:	f023 0303 	bic.w	r3, r3, #3
10009aca:	3211      	adds	r2, #17
10009acc:	42a2      	cmp	r2, r4
10009ace:	bf88      	it	hi
10009ad0:	2300      	movhi	r3, #0
10009ad2:	4418      	add	r0, r3
10009ad4:	2300      	movs	r3, #0
10009ad6:	4288      	cmp	r0, r1
10009ad8:	d305      	bcc.n	10009ae6 <__copybits+0x40>
10009ada:	bd70      	pop	{r4, r5, r6, pc}
10009adc:	f853 6b04 	ldr.w	r6, [r3], #4
10009ae0:	f845 6f04 	str.w	r6, [r5, #4]!
10009ae4:	e7eb      	b.n	10009abe <__copybits+0x18>
10009ae6:	f840 3b04 	str.w	r3, [r0], #4
10009aea:	e7f4      	b.n	10009ad6 <__copybits+0x30>

10009aec <__any_on>:
10009aec:	f100 0214 	add.w	r2, r0, #20
10009af0:	6900      	ldr	r0, [r0, #16]
10009af2:	114b      	asrs	r3, r1, #5
10009af4:	4298      	cmp	r0, r3
10009af6:	b510      	push	{r4, lr}
10009af8:	db11      	blt.n	10009b1e <__any_on+0x32>
10009afa:	dd0a      	ble.n	10009b12 <__any_on+0x26>
10009afc:	f011 011f 	ands.w	r1, r1, #31
10009b00:	d007      	beq.n	10009b12 <__any_on+0x26>
10009b02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
10009b06:	fa24 f001 	lsr.w	r0, r4, r1
10009b0a:	fa00 f101 	lsl.w	r1, r0, r1
10009b0e:	428c      	cmp	r4, r1
10009b10:	d10b      	bne.n	10009b2a <__any_on+0x3e>
10009b12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
10009b16:	4293      	cmp	r3, r2
10009b18:	d803      	bhi.n	10009b22 <__any_on+0x36>
10009b1a:	2000      	movs	r0, #0
10009b1c:	bd10      	pop	{r4, pc}
10009b1e:	4603      	mov	r3, r0
10009b20:	e7f7      	b.n	10009b12 <__any_on+0x26>
10009b22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
10009b26:	2900      	cmp	r1, #0
10009b28:	d0f5      	beq.n	10009b16 <__any_on+0x2a>
10009b2a:	2001      	movs	r0, #1
10009b2c:	e7f6      	b.n	10009b1c <__any_on+0x30>

10009b2e <sulp>:
10009b2e:	b570      	push	{r4, r5, r6, lr}
10009b30:	4604      	mov	r4, r0
10009b32:	460d      	mov	r5, r1
10009b34:	ec45 4b10 	vmov	d0, r4, r5
10009b38:	4616      	mov	r6, r2
10009b3a:	f7ff feb7 	bl	100098ac <__ulp>
10009b3e:	ec51 0b10 	vmov	r0, r1, d0
10009b42:	b17e      	cbz	r6, 10009b64 <sulp+0x36>
10009b44:	f3c5 530a 	ubfx	r3, r5, #20, #11
10009b48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
10009b4c:	2b00      	cmp	r3, #0
10009b4e:	dd09      	ble.n	10009b64 <sulp+0x36>
10009b50:	051b      	lsls	r3, r3, #20
10009b52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
10009b56:	2400      	movs	r4, #0
10009b58:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
10009b5c:	4622      	mov	r2, r4
10009b5e:	462b      	mov	r3, r5
10009b60:	f7f6 fc82 	bl	10000468 <__aeabi_dmul>
10009b64:	bd70      	pop	{r4, r5, r6, pc}
	...

10009b68 <_strtod_l>:
10009b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
10009b6c:	ed2d 8b02 	vpush	{d8}
10009b70:	b09b      	sub	sp, #108	; 0x6c
10009b72:	4604      	mov	r4, r0
10009b74:	9213      	str	r2, [sp, #76]	; 0x4c
10009b76:	2200      	movs	r2, #0
10009b78:	9216      	str	r2, [sp, #88]	; 0x58
10009b7a:	460d      	mov	r5, r1
10009b7c:	f04f 0800 	mov.w	r8, #0
10009b80:	f04f 0900 	mov.w	r9, #0
10009b84:	460a      	mov	r2, r1
10009b86:	9215      	str	r2, [sp, #84]	; 0x54
10009b88:	7811      	ldrb	r1, [r2, #0]
10009b8a:	292b      	cmp	r1, #43	; 0x2b
10009b8c:	d04c      	beq.n	10009c28 <_strtod_l+0xc0>
10009b8e:	d83a      	bhi.n	10009c06 <_strtod_l+0x9e>
10009b90:	290d      	cmp	r1, #13
10009b92:	d834      	bhi.n	10009bfe <_strtod_l+0x96>
10009b94:	2908      	cmp	r1, #8
10009b96:	d834      	bhi.n	10009c02 <_strtod_l+0x9a>
10009b98:	2900      	cmp	r1, #0
10009b9a:	d03d      	beq.n	10009c18 <_strtod_l+0xb0>
10009b9c:	2200      	movs	r2, #0
10009b9e:	920a      	str	r2, [sp, #40]	; 0x28
10009ba0:	9e15      	ldr	r6, [sp, #84]	; 0x54
10009ba2:	7832      	ldrb	r2, [r6, #0]
10009ba4:	2a30      	cmp	r2, #48	; 0x30
10009ba6:	f040 80b4 	bne.w	10009d12 <_strtod_l+0x1aa>
10009baa:	7872      	ldrb	r2, [r6, #1]
10009bac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
10009bb0:	2a58      	cmp	r2, #88	; 0x58
10009bb2:	d170      	bne.n	10009c96 <_strtod_l+0x12e>
10009bb4:	9302      	str	r3, [sp, #8]
10009bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10009bb8:	9301      	str	r3, [sp, #4]
10009bba:	ab16      	add	r3, sp, #88	; 0x58
10009bbc:	9300      	str	r3, [sp, #0]
10009bbe:	4a8e      	ldr	r2, [pc, #568]	; (10009df8 <_strtod_l+0x290>)
10009bc0:	ab17      	add	r3, sp, #92	; 0x5c
10009bc2:	a915      	add	r1, sp, #84	; 0x54
10009bc4:	4620      	mov	r0, r4
10009bc6:	f001 fb17 	bl	1000b1f8 <__gethex>
10009bca:	f010 070f 	ands.w	r7, r0, #15
10009bce:	4605      	mov	r5, r0
10009bd0:	d005      	beq.n	10009bde <_strtod_l+0x76>
10009bd2:	2f06      	cmp	r7, #6
10009bd4:	d12a      	bne.n	10009c2c <_strtod_l+0xc4>
10009bd6:	3601      	adds	r6, #1
10009bd8:	2300      	movs	r3, #0
10009bda:	9615      	str	r6, [sp, #84]	; 0x54
10009bdc:	930a      	str	r3, [sp, #40]	; 0x28
10009bde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10009be0:	2b00      	cmp	r3, #0
10009be2:	f040 857f 	bne.w	1000a6e4 <_strtod_l+0xb7c>
10009be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10009be8:	b1db      	cbz	r3, 10009c22 <_strtod_l+0xba>
10009bea:	4642      	mov	r2, r8
10009bec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
10009bf0:	ec43 2b10 	vmov	d0, r2, r3
10009bf4:	b01b      	add	sp, #108	; 0x6c
10009bf6:	ecbd 8b02 	vpop	{d8}
10009bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
10009bfe:	2920      	cmp	r1, #32
10009c00:	d1cc      	bne.n	10009b9c <_strtod_l+0x34>
10009c02:	3201      	adds	r2, #1
10009c04:	e7bf      	b.n	10009b86 <_strtod_l+0x1e>
10009c06:	292d      	cmp	r1, #45	; 0x2d
10009c08:	d1c8      	bne.n	10009b9c <_strtod_l+0x34>
10009c0a:	2101      	movs	r1, #1
10009c0c:	910a      	str	r1, [sp, #40]	; 0x28
10009c0e:	1c51      	adds	r1, r2, #1
10009c10:	9115      	str	r1, [sp, #84]	; 0x54
10009c12:	7852      	ldrb	r2, [r2, #1]
10009c14:	2a00      	cmp	r2, #0
10009c16:	d1c3      	bne.n	10009ba0 <_strtod_l+0x38>
10009c18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
10009c1a:	9515      	str	r5, [sp, #84]	; 0x54
10009c1c:	2b00      	cmp	r3, #0
10009c1e:	f040 855f 	bne.w	1000a6e0 <_strtod_l+0xb78>
10009c22:	4642      	mov	r2, r8
10009c24:	464b      	mov	r3, r9
10009c26:	e7e3      	b.n	10009bf0 <_strtod_l+0x88>
10009c28:	2100      	movs	r1, #0
10009c2a:	e7ef      	b.n	10009c0c <_strtod_l+0xa4>
10009c2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
10009c2e:	b13a      	cbz	r2, 10009c40 <_strtod_l+0xd8>
10009c30:	2135      	movs	r1, #53	; 0x35
10009c32:	a818      	add	r0, sp, #96	; 0x60
10009c34:	f7ff ff37 	bl	10009aa6 <__copybits>
10009c38:	9916      	ldr	r1, [sp, #88]	; 0x58
10009c3a:	4620      	mov	r0, r4
10009c3c:	f7ff fb0a 	bl	10009254 <_Bfree>
10009c40:	3f01      	subs	r7, #1
10009c42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10009c44:	2f04      	cmp	r7, #4
10009c46:	d806      	bhi.n	10009c56 <_strtod_l+0xee>
10009c48:	e8df f007 	tbb	[pc, r7]
10009c4c:	201d0314 	.word	0x201d0314
10009c50:	14          	.byte	0x14
10009c51:	00          	.byte	0x00
10009c52:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
10009c56:	05e9      	lsls	r1, r5, #23
10009c58:	bf48      	it	mi
10009c5a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
10009c5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
10009c62:	0d1b      	lsrs	r3, r3, #20
10009c64:	051b      	lsls	r3, r3, #20
10009c66:	2b00      	cmp	r3, #0
10009c68:	d1b9      	bne.n	10009bde <_strtod_l+0x76>
10009c6a:	f7fe fb05 	bl	10008278 <__errno>
10009c6e:	2322      	movs	r3, #34	; 0x22
10009c70:	6003      	str	r3, [r0, #0]
10009c72:	e7b4      	b.n	10009bde <_strtod_l+0x76>
10009c74:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
10009c78:	f202 4233 	addw	r2, r2, #1075	; 0x433
10009c7c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
10009c80:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
10009c84:	e7e7      	b.n	10009c56 <_strtod_l+0xee>
10009c86:	f8df 9178 	ldr.w	r9, [pc, #376]	; 10009e00 <_strtod_l+0x298>
10009c8a:	e7e4      	b.n	10009c56 <_strtod_l+0xee>
10009c8c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
10009c90:	f04f 38ff 	mov.w	r8, #4294967295
10009c94:	e7df      	b.n	10009c56 <_strtod_l+0xee>
10009c96:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009c98:	1c5a      	adds	r2, r3, #1
10009c9a:	9215      	str	r2, [sp, #84]	; 0x54
10009c9c:	785b      	ldrb	r3, [r3, #1]
10009c9e:	2b30      	cmp	r3, #48	; 0x30
10009ca0:	d0f9      	beq.n	10009c96 <_strtod_l+0x12e>
10009ca2:	2b00      	cmp	r3, #0
10009ca4:	d09b      	beq.n	10009bde <_strtod_l+0x76>
10009ca6:	2301      	movs	r3, #1
10009ca8:	f04f 0a00 	mov.w	sl, #0
10009cac:	9304      	str	r3, [sp, #16]
10009cae:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009cb0:	930b      	str	r3, [sp, #44]	; 0x2c
10009cb2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
10009cb6:	46d3      	mov	fp, sl
10009cb8:	220a      	movs	r2, #10
10009cba:	9815      	ldr	r0, [sp, #84]	; 0x54
10009cbc:	7806      	ldrb	r6, [r0, #0]
10009cbe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
10009cc2:	b2d9      	uxtb	r1, r3
10009cc4:	2909      	cmp	r1, #9
10009cc6:	d926      	bls.n	10009d16 <_strtod_l+0x1ae>
10009cc8:	494c      	ldr	r1, [pc, #304]	; (10009dfc <_strtod_l+0x294>)
10009cca:	2201      	movs	r2, #1
10009ccc:	f001 f9c0 	bl	1000b050 <strncmp>
10009cd0:	2800      	cmp	r0, #0
10009cd2:	d030      	beq.n	10009d36 <_strtod_l+0x1ce>
10009cd4:	2000      	movs	r0, #0
10009cd6:	4632      	mov	r2, r6
10009cd8:	9005      	str	r0, [sp, #20]
10009cda:	465e      	mov	r6, fp
10009cdc:	4603      	mov	r3, r0
10009cde:	2a65      	cmp	r2, #101	; 0x65
10009ce0:	d001      	beq.n	10009ce6 <_strtod_l+0x17e>
10009ce2:	2a45      	cmp	r2, #69	; 0x45
10009ce4:	d113      	bne.n	10009d0e <_strtod_l+0x1a6>
10009ce6:	b91e      	cbnz	r6, 10009cf0 <_strtod_l+0x188>
10009ce8:	9a04      	ldr	r2, [sp, #16]
10009cea:	4302      	orrs	r2, r0
10009cec:	d094      	beq.n	10009c18 <_strtod_l+0xb0>
10009cee:	2600      	movs	r6, #0
10009cf0:	9d15      	ldr	r5, [sp, #84]	; 0x54
10009cf2:	1c6a      	adds	r2, r5, #1
10009cf4:	9215      	str	r2, [sp, #84]	; 0x54
10009cf6:	786a      	ldrb	r2, [r5, #1]
10009cf8:	2a2b      	cmp	r2, #43	; 0x2b
10009cfa:	d074      	beq.n	10009de6 <_strtod_l+0x27e>
10009cfc:	2a2d      	cmp	r2, #45	; 0x2d
10009cfe:	d078      	beq.n	10009df2 <_strtod_l+0x28a>
10009d00:	f04f 0c00 	mov.w	ip, #0
10009d04:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
10009d08:	2909      	cmp	r1, #9
10009d0a:	d97f      	bls.n	10009e0c <_strtod_l+0x2a4>
10009d0c:	9515      	str	r5, [sp, #84]	; 0x54
10009d0e:	2700      	movs	r7, #0
10009d10:	e09e      	b.n	10009e50 <_strtod_l+0x2e8>
10009d12:	2300      	movs	r3, #0
10009d14:	e7c8      	b.n	10009ca8 <_strtod_l+0x140>
10009d16:	f1bb 0f08 	cmp.w	fp, #8
10009d1a:	bfd8      	it	le
10009d1c:	9909      	ldrle	r1, [sp, #36]	; 0x24
10009d1e:	f100 0001 	add.w	r0, r0, #1
10009d22:	bfda      	itte	le
10009d24:	fb02 3301 	mlale	r3, r2, r1, r3
10009d28:	9309      	strle	r3, [sp, #36]	; 0x24
10009d2a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
10009d2e:	f10b 0b01 	add.w	fp, fp, #1
10009d32:	9015      	str	r0, [sp, #84]	; 0x54
10009d34:	e7c1      	b.n	10009cba <_strtod_l+0x152>
10009d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009d38:	1c5a      	adds	r2, r3, #1
10009d3a:	9215      	str	r2, [sp, #84]	; 0x54
10009d3c:	785a      	ldrb	r2, [r3, #1]
10009d3e:	f1bb 0f00 	cmp.w	fp, #0
10009d42:	d037      	beq.n	10009db4 <_strtod_l+0x24c>
10009d44:	9005      	str	r0, [sp, #20]
10009d46:	465e      	mov	r6, fp
10009d48:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
10009d4c:	2b09      	cmp	r3, #9
10009d4e:	d912      	bls.n	10009d76 <_strtod_l+0x20e>
10009d50:	2301      	movs	r3, #1
10009d52:	e7c4      	b.n	10009cde <_strtod_l+0x176>
10009d54:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009d56:	1c5a      	adds	r2, r3, #1
10009d58:	9215      	str	r2, [sp, #84]	; 0x54
10009d5a:	785a      	ldrb	r2, [r3, #1]
10009d5c:	3001      	adds	r0, #1
10009d5e:	2a30      	cmp	r2, #48	; 0x30
10009d60:	d0f8      	beq.n	10009d54 <_strtod_l+0x1ec>
10009d62:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
10009d66:	2b08      	cmp	r3, #8
10009d68:	f200 84c1 	bhi.w	1000a6ee <_strtod_l+0xb86>
10009d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009d6e:	9005      	str	r0, [sp, #20]
10009d70:	2000      	movs	r0, #0
10009d72:	930b      	str	r3, [sp, #44]	; 0x2c
10009d74:	4606      	mov	r6, r0
10009d76:	3a30      	subs	r2, #48	; 0x30
10009d78:	f100 0301 	add.w	r3, r0, #1
10009d7c:	d014      	beq.n	10009da8 <_strtod_l+0x240>
10009d7e:	9905      	ldr	r1, [sp, #20]
10009d80:	4419      	add	r1, r3
10009d82:	9105      	str	r1, [sp, #20]
10009d84:	4633      	mov	r3, r6
10009d86:	eb00 0c06 	add.w	ip, r0, r6
10009d8a:	210a      	movs	r1, #10
10009d8c:	4563      	cmp	r3, ip
10009d8e:	d113      	bne.n	10009db8 <_strtod_l+0x250>
10009d90:	1833      	adds	r3, r6, r0
10009d92:	2b08      	cmp	r3, #8
10009d94:	f106 0601 	add.w	r6, r6, #1
10009d98:	4406      	add	r6, r0
10009d9a:	dc1a      	bgt.n	10009dd2 <_strtod_l+0x26a>
10009d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
10009d9e:	230a      	movs	r3, #10
10009da0:	fb03 2301 	mla	r3, r3, r1, r2
10009da4:	9309      	str	r3, [sp, #36]	; 0x24
10009da6:	2300      	movs	r3, #0
10009da8:	9a15      	ldr	r2, [sp, #84]	; 0x54
10009daa:	1c51      	adds	r1, r2, #1
10009dac:	9115      	str	r1, [sp, #84]	; 0x54
10009dae:	7852      	ldrb	r2, [r2, #1]
10009db0:	4618      	mov	r0, r3
10009db2:	e7c9      	b.n	10009d48 <_strtod_l+0x1e0>
10009db4:	4658      	mov	r0, fp
10009db6:	e7d2      	b.n	10009d5e <_strtod_l+0x1f6>
10009db8:	2b08      	cmp	r3, #8
10009dba:	f103 0301 	add.w	r3, r3, #1
10009dbe:	dc03      	bgt.n	10009dc8 <_strtod_l+0x260>
10009dc0:	9f09      	ldr	r7, [sp, #36]	; 0x24
10009dc2:	434f      	muls	r7, r1
10009dc4:	9709      	str	r7, [sp, #36]	; 0x24
10009dc6:	e7e1      	b.n	10009d8c <_strtod_l+0x224>
10009dc8:	2b10      	cmp	r3, #16
10009dca:	bfd8      	it	le
10009dcc:	fb01 fa0a 	mulle.w	sl, r1, sl
10009dd0:	e7dc      	b.n	10009d8c <_strtod_l+0x224>
10009dd2:	2e10      	cmp	r6, #16
10009dd4:	bfdc      	itt	le
10009dd6:	230a      	movle	r3, #10
10009dd8:	fb03 2a0a 	mlale	sl, r3, sl, r2
10009ddc:	e7e3      	b.n	10009da6 <_strtod_l+0x23e>
10009dde:	2300      	movs	r3, #0
10009de0:	9305      	str	r3, [sp, #20]
10009de2:	2301      	movs	r3, #1
10009de4:	e780      	b.n	10009ce8 <_strtod_l+0x180>
10009de6:	f04f 0c00 	mov.w	ip, #0
10009dea:	1caa      	adds	r2, r5, #2
10009dec:	9215      	str	r2, [sp, #84]	; 0x54
10009dee:	78aa      	ldrb	r2, [r5, #2]
10009df0:	e788      	b.n	10009d04 <_strtod_l+0x19c>
10009df2:	f04f 0c01 	mov.w	ip, #1
10009df6:	e7f8      	b.n	10009dea <_strtod_l+0x282>
10009df8:	1000bde0 	.word	0x1000bde0
10009dfc:	1000bddc 	.word	0x1000bddc
10009e00:	7ff00000 	.word	0x7ff00000
10009e04:	9a15      	ldr	r2, [sp, #84]	; 0x54
10009e06:	1c51      	adds	r1, r2, #1
10009e08:	9115      	str	r1, [sp, #84]	; 0x54
10009e0a:	7852      	ldrb	r2, [r2, #1]
10009e0c:	2a30      	cmp	r2, #48	; 0x30
10009e0e:	d0f9      	beq.n	10009e04 <_strtod_l+0x29c>
10009e10:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
10009e14:	2908      	cmp	r1, #8
10009e16:	f63f af7a 	bhi.w	10009d0e <_strtod_l+0x1a6>
10009e1a:	3a30      	subs	r2, #48	; 0x30
10009e1c:	9208      	str	r2, [sp, #32]
10009e1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
10009e20:	920c      	str	r2, [sp, #48]	; 0x30
10009e22:	9a15      	ldr	r2, [sp, #84]	; 0x54
10009e24:	1c57      	adds	r7, r2, #1
10009e26:	9715      	str	r7, [sp, #84]	; 0x54
10009e28:	7852      	ldrb	r2, [r2, #1]
10009e2a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
10009e2e:	f1be 0f09 	cmp.w	lr, #9
10009e32:	d938      	bls.n	10009ea6 <_strtod_l+0x33e>
10009e34:	990c      	ldr	r1, [sp, #48]	; 0x30
10009e36:	1a7f      	subs	r7, r7, r1
10009e38:	2f08      	cmp	r7, #8
10009e3a:	f644 671f 	movw	r7, #19999	; 0x4e1f
10009e3e:	dc03      	bgt.n	10009e48 <_strtod_l+0x2e0>
10009e40:	9908      	ldr	r1, [sp, #32]
10009e42:	428f      	cmp	r7, r1
10009e44:	bfa8      	it	ge
10009e46:	460f      	movge	r7, r1
10009e48:	f1bc 0f00 	cmp.w	ip, #0
10009e4c:	d000      	beq.n	10009e50 <_strtod_l+0x2e8>
10009e4e:	427f      	negs	r7, r7
10009e50:	2e00      	cmp	r6, #0
10009e52:	d14f      	bne.n	10009ef4 <_strtod_l+0x38c>
10009e54:	9904      	ldr	r1, [sp, #16]
10009e56:	4301      	orrs	r1, r0
10009e58:	f47f aec1 	bne.w	10009bde <_strtod_l+0x76>
10009e5c:	2b00      	cmp	r3, #0
10009e5e:	f47f aedb 	bne.w	10009c18 <_strtod_l+0xb0>
10009e62:	2a69      	cmp	r2, #105	; 0x69
10009e64:	d029      	beq.n	10009eba <_strtod_l+0x352>
10009e66:	dc26      	bgt.n	10009eb6 <_strtod_l+0x34e>
10009e68:	2a49      	cmp	r2, #73	; 0x49
10009e6a:	d026      	beq.n	10009eba <_strtod_l+0x352>
10009e6c:	2a4e      	cmp	r2, #78	; 0x4e
10009e6e:	f47f aed3 	bne.w	10009c18 <_strtod_l+0xb0>
10009e72:	499b      	ldr	r1, [pc, #620]	; (1000a0e0 <_strtod_l+0x578>)
10009e74:	a815      	add	r0, sp, #84	; 0x54
10009e76:	f001 fbff 	bl	1000b678 <__match>
10009e7a:	2800      	cmp	r0, #0
10009e7c:	f43f aecc 	beq.w	10009c18 <_strtod_l+0xb0>
10009e80:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009e82:	781b      	ldrb	r3, [r3, #0]
10009e84:	2b28      	cmp	r3, #40	; 0x28
10009e86:	d12f      	bne.n	10009ee8 <_strtod_l+0x380>
10009e88:	4996      	ldr	r1, [pc, #600]	; (1000a0e4 <_strtod_l+0x57c>)
10009e8a:	aa18      	add	r2, sp, #96	; 0x60
10009e8c:	a815      	add	r0, sp, #84	; 0x54
10009e8e:	f001 fc07 	bl	1000b6a0 <__hexnan>
10009e92:	2805      	cmp	r0, #5
10009e94:	d128      	bne.n	10009ee8 <_strtod_l+0x380>
10009e96:	9b19      	ldr	r3, [sp, #100]	; 0x64
10009e98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
10009e9c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
10009ea0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
10009ea4:	e69b      	b.n	10009bde <_strtod_l+0x76>
10009ea6:	9f08      	ldr	r7, [sp, #32]
10009ea8:	210a      	movs	r1, #10
10009eaa:	fb01 2107 	mla	r1, r1, r7, r2
10009eae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
10009eb2:	9208      	str	r2, [sp, #32]
10009eb4:	e7b5      	b.n	10009e22 <_strtod_l+0x2ba>
10009eb6:	2a6e      	cmp	r2, #110	; 0x6e
10009eb8:	e7d9      	b.n	10009e6e <_strtod_l+0x306>
10009eba:	498b      	ldr	r1, [pc, #556]	; (1000a0e8 <_strtod_l+0x580>)
10009ebc:	a815      	add	r0, sp, #84	; 0x54
10009ebe:	f001 fbdb 	bl	1000b678 <__match>
10009ec2:	2800      	cmp	r0, #0
10009ec4:	f43f aea8 	beq.w	10009c18 <_strtod_l+0xb0>
10009ec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009eca:	4988      	ldr	r1, [pc, #544]	; (1000a0ec <_strtod_l+0x584>)
10009ecc:	3b01      	subs	r3, #1
10009ece:	a815      	add	r0, sp, #84	; 0x54
10009ed0:	9315      	str	r3, [sp, #84]	; 0x54
10009ed2:	f001 fbd1 	bl	1000b678 <__match>
10009ed6:	b910      	cbnz	r0, 10009ede <_strtod_l+0x376>
10009ed8:	9b15      	ldr	r3, [sp, #84]	; 0x54
10009eda:	3301      	adds	r3, #1
10009edc:	9315      	str	r3, [sp, #84]	; 0x54
10009ede:	f8df 921c 	ldr.w	r9, [pc, #540]	; 1000a0fc <_strtod_l+0x594>
10009ee2:	f04f 0800 	mov.w	r8, #0
10009ee6:	e67a      	b.n	10009bde <_strtod_l+0x76>
10009ee8:	4881      	ldr	r0, [pc, #516]	; (1000a0f0 <_strtod_l+0x588>)
10009eea:	f001 f8e1 	bl	1000b0b0 <nan>
10009eee:	ec59 8b10 	vmov	r8, r9, d0
10009ef2:	e674      	b.n	10009bde <_strtod_l+0x76>
10009ef4:	9b05      	ldr	r3, [sp, #20]
10009ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
10009ef8:	1afb      	subs	r3, r7, r3
10009efa:	f1bb 0f00 	cmp.w	fp, #0
10009efe:	bf08      	it	eq
10009f00:	46b3      	moveq	fp, r6
10009f02:	2e10      	cmp	r6, #16
10009f04:	9308      	str	r3, [sp, #32]
10009f06:	4635      	mov	r5, r6
10009f08:	bfa8      	it	ge
10009f0a:	2510      	movge	r5, #16
10009f0c:	f7f6 fa32 	bl	10000374 <__aeabi_ui2d>
10009f10:	2e09      	cmp	r6, #9
10009f12:	4680      	mov	r8, r0
10009f14:	4689      	mov	r9, r1
10009f16:	dd13      	ble.n	10009f40 <_strtod_l+0x3d8>
10009f18:	4b76      	ldr	r3, [pc, #472]	; (1000a0f4 <_strtod_l+0x58c>)
10009f1a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
10009f1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
10009f22:	f7f6 faa1 	bl	10000468 <__aeabi_dmul>
10009f26:	4680      	mov	r8, r0
10009f28:	4650      	mov	r0, sl
10009f2a:	4689      	mov	r9, r1
10009f2c:	f7f6 fa22 	bl	10000374 <__aeabi_ui2d>
10009f30:	4602      	mov	r2, r0
10009f32:	460b      	mov	r3, r1
10009f34:	4640      	mov	r0, r8
10009f36:	4649      	mov	r1, r9
10009f38:	f7f6 f8e0 	bl	100000fc <__adddf3>
10009f3c:	4680      	mov	r8, r0
10009f3e:	4689      	mov	r9, r1
10009f40:	2e0f      	cmp	r6, #15
10009f42:	dc38      	bgt.n	10009fb6 <_strtod_l+0x44e>
10009f44:	9b08      	ldr	r3, [sp, #32]
10009f46:	2b00      	cmp	r3, #0
10009f48:	f43f ae49 	beq.w	10009bde <_strtod_l+0x76>
10009f4c:	dd24      	ble.n	10009f98 <_strtod_l+0x430>
10009f4e:	2b16      	cmp	r3, #22
10009f50:	dc0b      	bgt.n	10009f6a <_strtod_l+0x402>
10009f52:	4968      	ldr	r1, [pc, #416]	; (1000a0f4 <_strtod_l+0x58c>)
10009f54:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
10009f58:	e9d1 0100 	ldrd	r0, r1, [r1]
10009f5c:	4642      	mov	r2, r8
10009f5e:	464b      	mov	r3, r9
10009f60:	f7f6 fa82 	bl	10000468 <__aeabi_dmul>
10009f64:	4680      	mov	r8, r0
10009f66:	4689      	mov	r9, r1
10009f68:	e639      	b.n	10009bde <_strtod_l+0x76>
10009f6a:	9a08      	ldr	r2, [sp, #32]
10009f6c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
10009f70:	4293      	cmp	r3, r2
10009f72:	db20      	blt.n	10009fb6 <_strtod_l+0x44e>
10009f74:	4c5f      	ldr	r4, [pc, #380]	; (1000a0f4 <_strtod_l+0x58c>)
10009f76:	f1c6 060f 	rsb	r6, r6, #15
10009f7a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
10009f7e:	4642      	mov	r2, r8
10009f80:	464b      	mov	r3, r9
10009f82:	e9d1 0100 	ldrd	r0, r1, [r1]
10009f86:	f7f6 fa6f 	bl	10000468 <__aeabi_dmul>
10009f8a:	9b08      	ldr	r3, [sp, #32]
10009f8c:	1b9e      	subs	r6, r3, r6
10009f8e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
10009f92:	e9d4 2300 	ldrd	r2, r3, [r4]
10009f96:	e7e3      	b.n	10009f60 <_strtod_l+0x3f8>
10009f98:	9b08      	ldr	r3, [sp, #32]
10009f9a:	3316      	adds	r3, #22
10009f9c:	db0b      	blt.n	10009fb6 <_strtod_l+0x44e>
10009f9e:	9b05      	ldr	r3, [sp, #20]
10009fa0:	1bdf      	subs	r7, r3, r7
10009fa2:	4b54      	ldr	r3, [pc, #336]	; (1000a0f4 <_strtod_l+0x58c>)
10009fa4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
10009fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
10009fac:	4640      	mov	r0, r8
10009fae:	4649      	mov	r1, r9
10009fb0:	f7f6 fb84 	bl	100006bc <__aeabi_ddiv>
10009fb4:	e7d6      	b.n	10009f64 <_strtod_l+0x3fc>
10009fb6:	9b08      	ldr	r3, [sp, #32]
10009fb8:	1b75      	subs	r5, r6, r5
10009fba:	441d      	add	r5, r3
10009fbc:	2d00      	cmp	r5, #0
10009fbe:	dd70      	ble.n	1000a0a2 <_strtod_l+0x53a>
10009fc0:	f015 030f 	ands.w	r3, r5, #15
10009fc4:	d00a      	beq.n	10009fdc <_strtod_l+0x474>
10009fc6:	494b      	ldr	r1, [pc, #300]	; (1000a0f4 <_strtod_l+0x58c>)
10009fc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
10009fcc:	4642      	mov	r2, r8
10009fce:	464b      	mov	r3, r9
10009fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
10009fd4:	f7f6 fa48 	bl	10000468 <__aeabi_dmul>
10009fd8:	4680      	mov	r8, r0
10009fda:	4689      	mov	r9, r1
10009fdc:	f035 050f 	bics.w	r5, r5, #15
10009fe0:	d04d      	beq.n	1000a07e <_strtod_l+0x516>
10009fe2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
10009fe6:	dd22      	ble.n	1000a02e <_strtod_l+0x4c6>
10009fe8:	2500      	movs	r5, #0
10009fea:	46ab      	mov	fp, r5
10009fec:	9509      	str	r5, [sp, #36]	; 0x24
10009fee:	9505      	str	r5, [sp, #20]
10009ff0:	2322      	movs	r3, #34	; 0x22
10009ff2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 1000a0fc <_strtod_l+0x594>
10009ff6:	6023      	str	r3, [r4, #0]
10009ff8:	f04f 0800 	mov.w	r8, #0
10009ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
10009ffe:	2b00      	cmp	r3, #0
1000a000:	f43f aded 	beq.w	10009bde <_strtod_l+0x76>
1000a004:	9916      	ldr	r1, [sp, #88]	; 0x58
1000a006:	4620      	mov	r0, r4
1000a008:	f7ff f924 	bl	10009254 <_Bfree>
1000a00c:	9905      	ldr	r1, [sp, #20]
1000a00e:	4620      	mov	r0, r4
1000a010:	f7ff f920 	bl	10009254 <_Bfree>
1000a014:	4659      	mov	r1, fp
1000a016:	4620      	mov	r0, r4
1000a018:	f7ff f91c 	bl	10009254 <_Bfree>
1000a01c:	9909      	ldr	r1, [sp, #36]	; 0x24
1000a01e:	4620      	mov	r0, r4
1000a020:	f7ff f918 	bl	10009254 <_Bfree>
1000a024:	4629      	mov	r1, r5
1000a026:	4620      	mov	r0, r4
1000a028:	f7ff f914 	bl	10009254 <_Bfree>
1000a02c:	e5d7      	b.n	10009bde <_strtod_l+0x76>
1000a02e:	4b32      	ldr	r3, [pc, #200]	; (1000a0f8 <_strtod_l+0x590>)
1000a030:	9304      	str	r3, [sp, #16]
1000a032:	2300      	movs	r3, #0
1000a034:	112d      	asrs	r5, r5, #4
1000a036:	4640      	mov	r0, r8
1000a038:	4649      	mov	r1, r9
1000a03a:	469a      	mov	sl, r3
1000a03c:	2d01      	cmp	r5, #1
1000a03e:	dc21      	bgt.n	1000a084 <_strtod_l+0x51c>
1000a040:	b10b      	cbz	r3, 1000a046 <_strtod_l+0x4de>
1000a042:	4680      	mov	r8, r0
1000a044:	4689      	mov	r9, r1
1000a046:	492c      	ldr	r1, [pc, #176]	; (1000a0f8 <_strtod_l+0x590>)
1000a048:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
1000a04c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
1000a050:	4642      	mov	r2, r8
1000a052:	464b      	mov	r3, r9
1000a054:	e9d1 0100 	ldrd	r0, r1, [r1]
1000a058:	f7f6 fa06 	bl	10000468 <__aeabi_dmul>
1000a05c:	4b27      	ldr	r3, [pc, #156]	; (1000a0fc <_strtod_l+0x594>)
1000a05e:	460a      	mov	r2, r1
1000a060:	400b      	ands	r3, r1
1000a062:	4927      	ldr	r1, [pc, #156]	; (1000a100 <_strtod_l+0x598>)
1000a064:	428b      	cmp	r3, r1
1000a066:	4680      	mov	r8, r0
1000a068:	d8be      	bhi.n	10009fe8 <_strtod_l+0x480>
1000a06a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
1000a06e:	428b      	cmp	r3, r1
1000a070:	bf86      	itte	hi
1000a072:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 1000a104 <_strtod_l+0x59c>
1000a076:	f04f 38ff 	movhi.w	r8, #4294967295
1000a07a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
1000a07e:	2300      	movs	r3, #0
1000a080:	9304      	str	r3, [sp, #16]
1000a082:	e07b      	b.n	1000a17c <_strtod_l+0x614>
1000a084:	07ea      	lsls	r2, r5, #31
1000a086:	d505      	bpl.n	1000a094 <_strtod_l+0x52c>
1000a088:	9b04      	ldr	r3, [sp, #16]
1000a08a:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a08e:	f7f6 f9eb 	bl	10000468 <__aeabi_dmul>
1000a092:	2301      	movs	r3, #1
1000a094:	9a04      	ldr	r2, [sp, #16]
1000a096:	3208      	adds	r2, #8
1000a098:	f10a 0a01 	add.w	sl, sl, #1
1000a09c:	106d      	asrs	r5, r5, #1
1000a09e:	9204      	str	r2, [sp, #16]
1000a0a0:	e7cc      	b.n	1000a03c <_strtod_l+0x4d4>
1000a0a2:	d0ec      	beq.n	1000a07e <_strtod_l+0x516>
1000a0a4:	426d      	negs	r5, r5
1000a0a6:	f015 020f 	ands.w	r2, r5, #15
1000a0aa:	d00a      	beq.n	1000a0c2 <_strtod_l+0x55a>
1000a0ac:	4b11      	ldr	r3, [pc, #68]	; (1000a0f4 <_strtod_l+0x58c>)
1000a0ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1000a0b2:	4640      	mov	r0, r8
1000a0b4:	4649      	mov	r1, r9
1000a0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a0ba:	f7f6 faff 	bl	100006bc <__aeabi_ddiv>
1000a0be:	4680      	mov	r8, r0
1000a0c0:	4689      	mov	r9, r1
1000a0c2:	112d      	asrs	r5, r5, #4
1000a0c4:	d0db      	beq.n	1000a07e <_strtod_l+0x516>
1000a0c6:	2d1f      	cmp	r5, #31
1000a0c8:	dd1e      	ble.n	1000a108 <_strtod_l+0x5a0>
1000a0ca:	2500      	movs	r5, #0
1000a0cc:	46ab      	mov	fp, r5
1000a0ce:	9509      	str	r5, [sp, #36]	; 0x24
1000a0d0:	9505      	str	r5, [sp, #20]
1000a0d2:	2322      	movs	r3, #34	; 0x22
1000a0d4:	f04f 0800 	mov.w	r8, #0
1000a0d8:	f04f 0900 	mov.w	r9, #0
1000a0dc:	6023      	str	r3, [r4, #0]
1000a0de:	e78d      	b.n	10009ffc <_strtod_l+0x494>
1000a0e0:	1000bbc9 	.word	0x1000bbc9
1000a0e4:	1000bdf4 	.word	0x1000bdf4
1000a0e8:	1000bbc1 	.word	0x1000bbc1
1000a0ec:	1000bbf8 	.word	0x1000bbf8
1000a0f0:	1000bf85 	.word	0x1000bf85
1000a0f4:	1000bd08 	.word	0x1000bd08
1000a0f8:	1000bce0 	.word	0x1000bce0
1000a0fc:	7ff00000 	.word	0x7ff00000
1000a100:	7ca00000 	.word	0x7ca00000
1000a104:	7fefffff 	.word	0x7fefffff
1000a108:	f015 0310 	ands.w	r3, r5, #16
1000a10c:	bf18      	it	ne
1000a10e:	236a      	movne	r3, #106	; 0x6a
1000a110:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 1000a4b4 <_strtod_l+0x94c>
1000a114:	9304      	str	r3, [sp, #16]
1000a116:	4640      	mov	r0, r8
1000a118:	4649      	mov	r1, r9
1000a11a:	2300      	movs	r3, #0
1000a11c:	07ea      	lsls	r2, r5, #31
1000a11e:	d504      	bpl.n	1000a12a <_strtod_l+0x5c2>
1000a120:	e9da 2300 	ldrd	r2, r3, [sl]
1000a124:	f7f6 f9a0 	bl	10000468 <__aeabi_dmul>
1000a128:	2301      	movs	r3, #1
1000a12a:	106d      	asrs	r5, r5, #1
1000a12c:	f10a 0a08 	add.w	sl, sl, #8
1000a130:	d1f4      	bne.n	1000a11c <_strtod_l+0x5b4>
1000a132:	b10b      	cbz	r3, 1000a138 <_strtod_l+0x5d0>
1000a134:	4680      	mov	r8, r0
1000a136:	4689      	mov	r9, r1
1000a138:	9b04      	ldr	r3, [sp, #16]
1000a13a:	b1bb      	cbz	r3, 1000a16c <_strtod_l+0x604>
1000a13c:	f3c9 520a 	ubfx	r2, r9, #20, #11
1000a140:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
1000a144:	2b00      	cmp	r3, #0
1000a146:	4649      	mov	r1, r9
1000a148:	dd10      	ble.n	1000a16c <_strtod_l+0x604>
1000a14a:	2b1f      	cmp	r3, #31
1000a14c:	f340 811e 	ble.w	1000a38c <_strtod_l+0x824>
1000a150:	2b34      	cmp	r3, #52	; 0x34
1000a152:	bfde      	ittt	le
1000a154:	f04f 33ff 	movle.w	r3, #4294967295
1000a158:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
1000a15c:	4093      	lslle	r3, r2
1000a15e:	f04f 0800 	mov.w	r8, #0
1000a162:	bfcc      	ite	gt
1000a164:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
1000a168:	ea03 0901 	andle.w	r9, r3, r1
1000a16c:	2200      	movs	r2, #0
1000a16e:	2300      	movs	r3, #0
1000a170:	4640      	mov	r0, r8
1000a172:	4649      	mov	r1, r9
1000a174:	f7f6 fbe0 	bl	10000938 <__aeabi_dcmpeq>
1000a178:	2800      	cmp	r0, #0
1000a17a:	d1a6      	bne.n	1000a0ca <_strtod_l+0x562>
1000a17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000a17e:	9300      	str	r3, [sp, #0]
1000a180:	990b      	ldr	r1, [sp, #44]	; 0x2c
1000a182:	4633      	mov	r3, r6
1000a184:	465a      	mov	r2, fp
1000a186:	4620      	mov	r0, r4
1000a188:	f7ff f8cc 	bl	10009324 <__s2b>
1000a18c:	9009      	str	r0, [sp, #36]	; 0x24
1000a18e:	2800      	cmp	r0, #0
1000a190:	f43f af2a 	beq.w	10009fe8 <_strtod_l+0x480>
1000a194:	9a08      	ldr	r2, [sp, #32]
1000a196:	9b05      	ldr	r3, [sp, #20]
1000a198:	2a00      	cmp	r2, #0
1000a19a:	eba3 0307 	sub.w	r3, r3, r7
1000a19e:	bfa8      	it	ge
1000a1a0:	2300      	movge	r3, #0
1000a1a2:	930c      	str	r3, [sp, #48]	; 0x30
1000a1a4:	2500      	movs	r5, #0
1000a1a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1000a1aa:	9312      	str	r3, [sp, #72]	; 0x48
1000a1ac:	46ab      	mov	fp, r5
1000a1ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000a1b0:	4620      	mov	r0, r4
1000a1b2:	6859      	ldr	r1, [r3, #4]
1000a1b4:	f7ff f80e 	bl	100091d4 <_Balloc>
1000a1b8:	9005      	str	r0, [sp, #20]
1000a1ba:	2800      	cmp	r0, #0
1000a1bc:	f43f af18 	beq.w	10009ff0 <_strtod_l+0x488>
1000a1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000a1c2:	691a      	ldr	r2, [r3, #16]
1000a1c4:	3202      	adds	r2, #2
1000a1c6:	f103 010c 	add.w	r1, r3, #12
1000a1ca:	0092      	lsls	r2, r2, #2
1000a1cc:	300c      	adds	r0, #12
1000a1ce:	f000 ff61 	bl	1000b094 <memcpy>
1000a1d2:	ec49 8b10 	vmov	d0, r8, r9
1000a1d6:	aa18      	add	r2, sp, #96	; 0x60
1000a1d8:	a917      	add	r1, sp, #92	; 0x5c
1000a1da:	4620      	mov	r0, r4
1000a1dc:	f7ff fbd6 	bl	1000998c <__d2b>
1000a1e0:	ec49 8b18 	vmov	d8, r8, r9
1000a1e4:	9016      	str	r0, [sp, #88]	; 0x58
1000a1e6:	2800      	cmp	r0, #0
1000a1e8:	f43f af02 	beq.w	10009ff0 <_strtod_l+0x488>
1000a1ec:	2101      	movs	r1, #1
1000a1ee:	4620      	mov	r0, r4
1000a1f0:	f7ff f930 	bl	10009454 <__i2b>
1000a1f4:	4683      	mov	fp, r0
1000a1f6:	2800      	cmp	r0, #0
1000a1f8:	f43f aefa 	beq.w	10009ff0 <_strtod_l+0x488>
1000a1fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
1000a1fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
1000a200:	2e00      	cmp	r6, #0
1000a202:	bfab      	itete	ge
1000a204:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
1000a206:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
1000a208:	9f12      	ldrge	r7, [sp, #72]	; 0x48
1000a20a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
1000a20e:	bfac      	ite	ge
1000a210:	eb06 0a03 	addge.w	sl, r6, r3
1000a214:	1b9f      	sublt	r7, r3, r6
1000a216:	9b04      	ldr	r3, [sp, #16]
1000a218:	1af6      	subs	r6, r6, r3
1000a21a:	4416      	add	r6, r2
1000a21c:	4ba0      	ldr	r3, [pc, #640]	; (1000a4a0 <_strtod_l+0x938>)
1000a21e:	3e01      	subs	r6, #1
1000a220:	429e      	cmp	r6, r3
1000a222:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
1000a226:	f280 80c4 	bge.w	1000a3b2 <_strtod_l+0x84a>
1000a22a:	1b9b      	subs	r3, r3, r6
1000a22c:	2b1f      	cmp	r3, #31
1000a22e:	eba2 0203 	sub.w	r2, r2, r3
1000a232:	f04f 0101 	mov.w	r1, #1
1000a236:	f300 80b0 	bgt.w	1000a39a <_strtod_l+0x832>
1000a23a:	fa01 f303 	lsl.w	r3, r1, r3
1000a23e:	930e      	str	r3, [sp, #56]	; 0x38
1000a240:	2300      	movs	r3, #0
1000a242:	930d      	str	r3, [sp, #52]	; 0x34
1000a244:	eb0a 0602 	add.w	r6, sl, r2
1000a248:	9b04      	ldr	r3, [sp, #16]
1000a24a:	45b2      	cmp	sl, r6
1000a24c:	4417      	add	r7, r2
1000a24e:	441f      	add	r7, r3
1000a250:	4653      	mov	r3, sl
1000a252:	bfa8      	it	ge
1000a254:	4633      	movge	r3, r6
1000a256:	42bb      	cmp	r3, r7
1000a258:	bfa8      	it	ge
1000a25a:	463b      	movge	r3, r7
1000a25c:	2b00      	cmp	r3, #0
1000a25e:	bfc2      	ittt	gt
1000a260:	1af6      	subgt	r6, r6, r3
1000a262:	1aff      	subgt	r7, r7, r3
1000a264:	ebaa 0a03 	subgt.w	sl, sl, r3
1000a268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1000a26a:	2b00      	cmp	r3, #0
1000a26c:	dd17      	ble.n	1000a29e <_strtod_l+0x736>
1000a26e:	4659      	mov	r1, fp
1000a270:	461a      	mov	r2, r3
1000a272:	4620      	mov	r0, r4
1000a274:	f7ff f9ae 	bl	100095d4 <__pow5mult>
1000a278:	4683      	mov	fp, r0
1000a27a:	2800      	cmp	r0, #0
1000a27c:	f43f aeb8 	beq.w	10009ff0 <_strtod_l+0x488>
1000a280:	4601      	mov	r1, r0
1000a282:	9a16      	ldr	r2, [sp, #88]	; 0x58
1000a284:	4620      	mov	r0, r4
1000a286:	f7ff f8fb 	bl	10009480 <__multiply>
1000a28a:	900b      	str	r0, [sp, #44]	; 0x2c
1000a28c:	2800      	cmp	r0, #0
1000a28e:	f43f aeaf 	beq.w	10009ff0 <_strtod_l+0x488>
1000a292:	9916      	ldr	r1, [sp, #88]	; 0x58
1000a294:	4620      	mov	r0, r4
1000a296:	f7fe ffdd 	bl	10009254 <_Bfree>
1000a29a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a29c:	9316      	str	r3, [sp, #88]	; 0x58
1000a29e:	2e00      	cmp	r6, #0
1000a2a0:	f300 808c 	bgt.w	1000a3bc <_strtod_l+0x854>
1000a2a4:	9b08      	ldr	r3, [sp, #32]
1000a2a6:	2b00      	cmp	r3, #0
1000a2a8:	dd08      	ble.n	1000a2bc <_strtod_l+0x754>
1000a2aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000a2ac:	9905      	ldr	r1, [sp, #20]
1000a2ae:	4620      	mov	r0, r4
1000a2b0:	f7ff f990 	bl	100095d4 <__pow5mult>
1000a2b4:	9005      	str	r0, [sp, #20]
1000a2b6:	2800      	cmp	r0, #0
1000a2b8:	f43f ae9a 	beq.w	10009ff0 <_strtod_l+0x488>
1000a2bc:	2f00      	cmp	r7, #0
1000a2be:	dd08      	ble.n	1000a2d2 <_strtod_l+0x76a>
1000a2c0:	9905      	ldr	r1, [sp, #20]
1000a2c2:	463a      	mov	r2, r7
1000a2c4:	4620      	mov	r0, r4
1000a2c6:	f7ff f9df 	bl	10009688 <__lshift>
1000a2ca:	9005      	str	r0, [sp, #20]
1000a2cc:	2800      	cmp	r0, #0
1000a2ce:	f43f ae8f 	beq.w	10009ff0 <_strtod_l+0x488>
1000a2d2:	f1ba 0f00 	cmp.w	sl, #0
1000a2d6:	dd08      	ble.n	1000a2ea <_strtod_l+0x782>
1000a2d8:	4659      	mov	r1, fp
1000a2da:	4652      	mov	r2, sl
1000a2dc:	4620      	mov	r0, r4
1000a2de:	f7ff f9d3 	bl	10009688 <__lshift>
1000a2e2:	4683      	mov	fp, r0
1000a2e4:	2800      	cmp	r0, #0
1000a2e6:	f43f ae83 	beq.w	10009ff0 <_strtod_l+0x488>
1000a2ea:	9a05      	ldr	r2, [sp, #20]
1000a2ec:	9916      	ldr	r1, [sp, #88]	; 0x58
1000a2ee:	4620      	mov	r0, r4
1000a2f0:	f7ff fa52 	bl	10009798 <__mdiff>
1000a2f4:	4605      	mov	r5, r0
1000a2f6:	2800      	cmp	r0, #0
1000a2f8:	f43f ae7a 	beq.w	10009ff0 <_strtod_l+0x488>
1000a2fc:	68c3      	ldr	r3, [r0, #12]
1000a2fe:	930b      	str	r3, [sp, #44]	; 0x2c
1000a300:	2300      	movs	r3, #0
1000a302:	60c3      	str	r3, [r0, #12]
1000a304:	4659      	mov	r1, fp
1000a306:	f7ff fa2b 	bl	10009760 <__mcmp>
1000a30a:	2800      	cmp	r0, #0
1000a30c:	da60      	bge.n	1000a3d0 <_strtod_l+0x868>
1000a30e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a310:	ea53 0308 	orrs.w	r3, r3, r8
1000a314:	f040 8084 	bne.w	1000a420 <_strtod_l+0x8b8>
1000a318:	f3c9 0313 	ubfx	r3, r9, #0, #20
1000a31c:	2b00      	cmp	r3, #0
1000a31e:	d17f      	bne.n	1000a420 <_strtod_l+0x8b8>
1000a320:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
1000a324:	0d1b      	lsrs	r3, r3, #20
1000a326:	051b      	lsls	r3, r3, #20
1000a328:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
1000a32c:	d978      	bls.n	1000a420 <_strtod_l+0x8b8>
1000a32e:	696b      	ldr	r3, [r5, #20]
1000a330:	b913      	cbnz	r3, 1000a338 <_strtod_l+0x7d0>
1000a332:	692b      	ldr	r3, [r5, #16]
1000a334:	2b01      	cmp	r3, #1
1000a336:	dd73      	ble.n	1000a420 <_strtod_l+0x8b8>
1000a338:	4629      	mov	r1, r5
1000a33a:	2201      	movs	r2, #1
1000a33c:	4620      	mov	r0, r4
1000a33e:	f7ff f9a3 	bl	10009688 <__lshift>
1000a342:	4659      	mov	r1, fp
1000a344:	4605      	mov	r5, r0
1000a346:	f7ff fa0b 	bl	10009760 <__mcmp>
1000a34a:	2800      	cmp	r0, #0
1000a34c:	dd68      	ble.n	1000a420 <_strtod_l+0x8b8>
1000a34e:	9904      	ldr	r1, [sp, #16]
1000a350:	4a54      	ldr	r2, [pc, #336]	; (1000a4a4 <_strtod_l+0x93c>)
1000a352:	464b      	mov	r3, r9
1000a354:	2900      	cmp	r1, #0
1000a356:	f000 8084 	beq.w	1000a462 <_strtod_l+0x8fa>
1000a35a:	ea02 0109 	and.w	r1, r2, r9
1000a35e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
1000a362:	dc7e      	bgt.n	1000a462 <_strtod_l+0x8fa>
1000a364:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
1000a368:	f77f aeb3 	ble.w	1000a0d2 <_strtod_l+0x56a>
1000a36c:	4b4e      	ldr	r3, [pc, #312]	; (1000a4a8 <_strtod_l+0x940>)
1000a36e:	4640      	mov	r0, r8
1000a370:	4649      	mov	r1, r9
1000a372:	2200      	movs	r2, #0
1000a374:	f7f6 f878 	bl	10000468 <__aeabi_dmul>
1000a378:	4b4a      	ldr	r3, [pc, #296]	; (1000a4a4 <_strtod_l+0x93c>)
1000a37a:	400b      	ands	r3, r1
1000a37c:	4680      	mov	r8, r0
1000a37e:	4689      	mov	r9, r1
1000a380:	2b00      	cmp	r3, #0
1000a382:	f47f ae3f 	bne.w	1000a004 <_strtod_l+0x49c>
1000a386:	2322      	movs	r3, #34	; 0x22
1000a388:	6023      	str	r3, [r4, #0]
1000a38a:	e63b      	b.n	1000a004 <_strtod_l+0x49c>
1000a38c:	f04f 32ff 	mov.w	r2, #4294967295
1000a390:	fa02 f303 	lsl.w	r3, r2, r3
1000a394:	ea03 0808 	and.w	r8, r3, r8
1000a398:	e6e8      	b.n	1000a16c <_strtod_l+0x604>
1000a39a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
1000a39e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
1000a3a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
1000a3a6:	36e2      	adds	r6, #226	; 0xe2
1000a3a8:	fa01 f306 	lsl.w	r3, r1, r6
1000a3ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
1000a3b0:	e748      	b.n	1000a244 <_strtod_l+0x6dc>
1000a3b2:	2100      	movs	r1, #0
1000a3b4:	2301      	movs	r3, #1
1000a3b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
1000a3ba:	e743      	b.n	1000a244 <_strtod_l+0x6dc>
1000a3bc:	9916      	ldr	r1, [sp, #88]	; 0x58
1000a3be:	4632      	mov	r2, r6
1000a3c0:	4620      	mov	r0, r4
1000a3c2:	f7ff f961 	bl	10009688 <__lshift>
1000a3c6:	9016      	str	r0, [sp, #88]	; 0x58
1000a3c8:	2800      	cmp	r0, #0
1000a3ca:	f47f af6b 	bne.w	1000a2a4 <_strtod_l+0x73c>
1000a3ce:	e60f      	b.n	10009ff0 <_strtod_l+0x488>
1000a3d0:	46ca      	mov	sl, r9
1000a3d2:	d171      	bne.n	1000a4b8 <_strtod_l+0x950>
1000a3d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000a3d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
1000a3da:	b352      	cbz	r2, 1000a432 <_strtod_l+0x8ca>
1000a3dc:	4a33      	ldr	r2, [pc, #204]	; (1000a4ac <_strtod_l+0x944>)
1000a3de:	4293      	cmp	r3, r2
1000a3e0:	d12a      	bne.n	1000a438 <_strtod_l+0x8d0>
1000a3e2:	9b04      	ldr	r3, [sp, #16]
1000a3e4:	4641      	mov	r1, r8
1000a3e6:	b1fb      	cbz	r3, 1000a428 <_strtod_l+0x8c0>
1000a3e8:	4b2e      	ldr	r3, [pc, #184]	; (1000a4a4 <_strtod_l+0x93c>)
1000a3ea:	ea09 0303 	and.w	r3, r9, r3
1000a3ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
1000a3f2:	f04f 32ff 	mov.w	r2, #4294967295
1000a3f6:	d81a      	bhi.n	1000a42e <_strtod_l+0x8c6>
1000a3f8:	0d1b      	lsrs	r3, r3, #20
1000a3fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
1000a3fe:	fa02 f303 	lsl.w	r3, r2, r3
1000a402:	4299      	cmp	r1, r3
1000a404:	d118      	bne.n	1000a438 <_strtod_l+0x8d0>
1000a406:	4b2a      	ldr	r3, [pc, #168]	; (1000a4b0 <_strtod_l+0x948>)
1000a408:	459a      	cmp	sl, r3
1000a40a:	d102      	bne.n	1000a412 <_strtod_l+0x8aa>
1000a40c:	3101      	adds	r1, #1
1000a40e:	f43f adef 	beq.w	10009ff0 <_strtod_l+0x488>
1000a412:	4b24      	ldr	r3, [pc, #144]	; (1000a4a4 <_strtod_l+0x93c>)
1000a414:	ea0a 0303 	and.w	r3, sl, r3
1000a418:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
1000a41c:	f04f 0800 	mov.w	r8, #0
1000a420:	9b04      	ldr	r3, [sp, #16]
1000a422:	2b00      	cmp	r3, #0
1000a424:	d1a2      	bne.n	1000a36c <_strtod_l+0x804>
1000a426:	e5ed      	b.n	1000a004 <_strtod_l+0x49c>
1000a428:	f04f 33ff 	mov.w	r3, #4294967295
1000a42c:	e7e9      	b.n	1000a402 <_strtod_l+0x89a>
1000a42e:	4613      	mov	r3, r2
1000a430:	e7e7      	b.n	1000a402 <_strtod_l+0x89a>
1000a432:	ea53 0308 	orrs.w	r3, r3, r8
1000a436:	d08a      	beq.n	1000a34e <_strtod_l+0x7e6>
1000a438:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a43a:	b1e3      	cbz	r3, 1000a476 <_strtod_l+0x90e>
1000a43c:	ea13 0f0a 	tst.w	r3, sl
1000a440:	d0ee      	beq.n	1000a420 <_strtod_l+0x8b8>
1000a442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a444:	9a04      	ldr	r2, [sp, #16]
1000a446:	4640      	mov	r0, r8
1000a448:	4649      	mov	r1, r9
1000a44a:	b1c3      	cbz	r3, 1000a47e <_strtod_l+0x916>
1000a44c:	f7ff fb6f 	bl	10009b2e <sulp>
1000a450:	4602      	mov	r2, r0
1000a452:	460b      	mov	r3, r1
1000a454:	ec51 0b18 	vmov	r0, r1, d8
1000a458:	f7f5 fe50 	bl	100000fc <__adddf3>
1000a45c:	4680      	mov	r8, r0
1000a45e:	4689      	mov	r9, r1
1000a460:	e7de      	b.n	1000a420 <_strtod_l+0x8b8>
1000a462:	4013      	ands	r3, r2
1000a464:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
1000a468:	ea6f 5913 	mvn.w	r9, r3, lsr #20
1000a46c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
1000a470:	f04f 38ff 	mov.w	r8, #4294967295
1000a474:	e7d4      	b.n	1000a420 <_strtod_l+0x8b8>
1000a476:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000a478:	ea13 0f08 	tst.w	r3, r8
1000a47c:	e7e0      	b.n	1000a440 <_strtod_l+0x8d8>
1000a47e:	f7ff fb56 	bl	10009b2e <sulp>
1000a482:	4602      	mov	r2, r0
1000a484:	460b      	mov	r3, r1
1000a486:	ec51 0b18 	vmov	r0, r1, d8
1000a48a:	f7f5 fe35 	bl	100000f8 <__aeabi_dsub>
1000a48e:	2200      	movs	r2, #0
1000a490:	2300      	movs	r3, #0
1000a492:	4680      	mov	r8, r0
1000a494:	4689      	mov	r9, r1
1000a496:	f7f6 fa4f 	bl	10000938 <__aeabi_dcmpeq>
1000a49a:	2800      	cmp	r0, #0
1000a49c:	d0c0      	beq.n	1000a420 <_strtod_l+0x8b8>
1000a49e:	e618      	b.n	1000a0d2 <_strtod_l+0x56a>
1000a4a0:	fffffc02 	.word	0xfffffc02
1000a4a4:	7ff00000 	.word	0x7ff00000
1000a4a8:	39500000 	.word	0x39500000
1000a4ac:	000fffff 	.word	0x000fffff
1000a4b0:	7fefffff 	.word	0x7fefffff
1000a4b4:	1000be08 	.word	0x1000be08
1000a4b8:	4659      	mov	r1, fp
1000a4ba:	4628      	mov	r0, r5
1000a4bc:	f7ff fac0 	bl	10009a40 <__ratio>
1000a4c0:	ec57 6b10 	vmov	r6, r7, d0
1000a4c4:	ee10 0a10 	vmov	r0, s0
1000a4c8:	2200      	movs	r2, #0
1000a4ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1000a4ce:	4639      	mov	r1, r7
1000a4d0:	f7f6 fa46 	bl	10000960 <__aeabi_dcmple>
1000a4d4:	2800      	cmp	r0, #0
1000a4d6:	d071      	beq.n	1000a5bc <_strtod_l+0xa54>
1000a4d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a4da:	2b00      	cmp	r3, #0
1000a4dc:	d17c      	bne.n	1000a5d8 <_strtod_l+0xa70>
1000a4de:	f1b8 0f00 	cmp.w	r8, #0
1000a4e2:	d15a      	bne.n	1000a59a <_strtod_l+0xa32>
1000a4e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
1000a4e8:	2b00      	cmp	r3, #0
1000a4ea:	d15d      	bne.n	1000a5a8 <_strtod_l+0xa40>
1000a4ec:	4b90      	ldr	r3, [pc, #576]	; (1000a730 <_strtod_l+0xbc8>)
1000a4ee:	2200      	movs	r2, #0
1000a4f0:	4630      	mov	r0, r6
1000a4f2:	4639      	mov	r1, r7
1000a4f4:	f7f6 fa2a 	bl	1000094c <__aeabi_dcmplt>
1000a4f8:	2800      	cmp	r0, #0
1000a4fa:	d15c      	bne.n	1000a5b6 <_strtod_l+0xa4e>
1000a4fc:	4630      	mov	r0, r6
1000a4fe:	4639      	mov	r1, r7
1000a500:	4b8c      	ldr	r3, [pc, #560]	; (1000a734 <_strtod_l+0xbcc>)
1000a502:	2200      	movs	r2, #0
1000a504:	f7f5 ffb0 	bl	10000468 <__aeabi_dmul>
1000a508:	4606      	mov	r6, r0
1000a50a:	460f      	mov	r7, r1
1000a50c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
1000a510:	9606      	str	r6, [sp, #24]
1000a512:	9307      	str	r3, [sp, #28]
1000a514:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1000a518:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
1000a51c:	4b86      	ldr	r3, [pc, #536]	; (1000a738 <_strtod_l+0xbd0>)
1000a51e:	ea0a 0303 	and.w	r3, sl, r3
1000a522:	930d      	str	r3, [sp, #52]	; 0x34
1000a524:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000a526:	4b85      	ldr	r3, [pc, #532]	; (1000a73c <_strtod_l+0xbd4>)
1000a528:	429a      	cmp	r2, r3
1000a52a:	f040 8090 	bne.w	1000a64e <_strtod_l+0xae6>
1000a52e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
1000a532:	ec49 8b10 	vmov	d0, r8, r9
1000a536:	f7ff f9b9 	bl	100098ac <__ulp>
1000a53a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1000a53e:	ec51 0b10 	vmov	r0, r1, d0
1000a542:	f7f5 ff91 	bl	10000468 <__aeabi_dmul>
1000a546:	4642      	mov	r2, r8
1000a548:	464b      	mov	r3, r9
1000a54a:	f7f5 fdd7 	bl	100000fc <__adddf3>
1000a54e:	460b      	mov	r3, r1
1000a550:	4979      	ldr	r1, [pc, #484]	; (1000a738 <_strtod_l+0xbd0>)
1000a552:	4a7b      	ldr	r2, [pc, #492]	; (1000a740 <_strtod_l+0xbd8>)
1000a554:	4019      	ands	r1, r3
1000a556:	4291      	cmp	r1, r2
1000a558:	4680      	mov	r8, r0
1000a55a:	d944      	bls.n	1000a5e6 <_strtod_l+0xa7e>
1000a55c:	ee18 2a90 	vmov	r2, s17
1000a560:	4b78      	ldr	r3, [pc, #480]	; (1000a744 <_strtod_l+0xbdc>)
1000a562:	429a      	cmp	r2, r3
1000a564:	d104      	bne.n	1000a570 <_strtod_l+0xa08>
1000a566:	ee18 3a10 	vmov	r3, s16
1000a56a:	3301      	adds	r3, #1
1000a56c:	f43f ad40 	beq.w	10009ff0 <_strtod_l+0x488>
1000a570:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 1000a744 <_strtod_l+0xbdc>
1000a574:	f04f 38ff 	mov.w	r8, #4294967295
1000a578:	9916      	ldr	r1, [sp, #88]	; 0x58
1000a57a:	4620      	mov	r0, r4
1000a57c:	f7fe fe6a 	bl	10009254 <_Bfree>
1000a580:	9905      	ldr	r1, [sp, #20]
1000a582:	4620      	mov	r0, r4
1000a584:	f7fe fe66 	bl	10009254 <_Bfree>
1000a588:	4659      	mov	r1, fp
1000a58a:	4620      	mov	r0, r4
1000a58c:	f7fe fe62 	bl	10009254 <_Bfree>
1000a590:	4629      	mov	r1, r5
1000a592:	4620      	mov	r0, r4
1000a594:	f7fe fe5e 	bl	10009254 <_Bfree>
1000a598:	e609      	b.n	1000a1ae <_strtod_l+0x646>
1000a59a:	f1b8 0f01 	cmp.w	r8, #1
1000a59e:	d103      	bne.n	1000a5a8 <_strtod_l+0xa40>
1000a5a0:	f1b9 0f00 	cmp.w	r9, #0
1000a5a4:	f43f ad95 	beq.w	1000a0d2 <_strtod_l+0x56a>
1000a5a8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 1000a700 <_strtod_l+0xb98>
1000a5ac:	4f60      	ldr	r7, [pc, #384]	; (1000a730 <_strtod_l+0xbc8>)
1000a5ae:	ed8d 7b06 	vstr	d7, [sp, #24]
1000a5b2:	2600      	movs	r6, #0
1000a5b4:	e7ae      	b.n	1000a514 <_strtod_l+0x9ac>
1000a5b6:	4f5f      	ldr	r7, [pc, #380]	; (1000a734 <_strtod_l+0xbcc>)
1000a5b8:	2600      	movs	r6, #0
1000a5ba:	e7a7      	b.n	1000a50c <_strtod_l+0x9a4>
1000a5bc:	4b5d      	ldr	r3, [pc, #372]	; (1000a734 <_strtod_l+0xbcc>)
1000a5be:	4630      	mov	r0, r6
1000a5c0:	4639      	mov	r1, r7
1000a5c2:	2200      	movs	r2, #0
1000a5c4:	f7f5 ff50 	bl	10000468 <__aeabi_dmul>
1000a5c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a5ca:	4606      	mov	r6, r0
1000a5cc:	460f      	mov	r7, r1
1000a5ce:	2b00      	cmp	r3, #0
1000a5d0:	d09c      	beq.n	1000a50c <_strtod_l+0x9a4>
1000a5d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
1000a5d6:	e79d      	b.n	1000a514 <_strtod_l+0x9ac>
1000a5d8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 1000a708 <_strtod_l+0xba0>
1000a5dc:	ed8d 7b06 	vstr	d7, [sp, #24]
1000a5e0:	ec57 6b17 	vmov	r6, r7, d7
1000a5e4:	e796      	b.n	1000a514 <_strtod_l+0x9ac>
1000a5e6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
1000a5ea:	9b04      	ldr	r3, [sp, #16]
1000a5ec:	46ca      	mov	sl, r9
1000a5ee:	2b00      	cmp	r3, #0
1000a5f0:	d1c2      	bne.n	1000a578 <_strtod_l+0xa10>
1000a5f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
1000a5f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000a5f8:	0d1b      	lsrs	r3, r3, #20
1000a5fa:	051b      	lsls	r3, r3, #20
1000a5fc:	429a      	cmp	r2, r3
1000a5fe:	d1bb      	bne.n	1000a578 <_strtod_l+0xa10>
1000a600:	4630      	mov	r0, r6
1000a602:	4639      	mov	r1, r7
1000a604:	f7f6 fa78 	bl	10000af8 <__aeabi_d2lz>
1000a608:	f7f5 ff00 	bl	1000040c <__aeabi_l2d>
1000a60c:	4602      	mov	r2, r0
1000a60e:	460b      	mov	r3, r1
1000a610:	4630      	mov	r0, r6
1000a612:	4639      	mov	r1, r7
1000a614:	f7f5 fd70 	bl	100000f8 <__aeabi_dsub>
1000a618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1000a61a:	f3c9 0313 	ubfx	r3, r9, #0, #20
1000a61e:	ea43 0308 	orr.w	r3, r3, r8
1000a622:	4313      	orrs	r3, r2
1000a624:	4606      	mov	r6, r0
1000a626:	460f      	mov	r7, r1
1000a628:	d054      	beq.n	1000a6d4 <_strtod_l+0xb6c>
1000a62a:	a339      	add	r3, pc, #228	; (adr r3, 1000a710 <_strtod_l+0xba8>)
1000a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a630:	f7f6 f98c 	bl	1000094c <__aeabi_dcmplt>
1000a634:	2800      	cmp	r0, #0
1000a636:	f47f ace5 	bne.w	1000a004 <_strtod_l+0x49c>
1000a63a:	a337      	add	r3, pc, #220	; (adr r3, 1000a718 <_strtod_l+0xbb0>)
1000a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a640:	4630      	mov	r0, r6
1000a642:	4639      	mov	r1, r7
1000a644:	f7f6 f9a0 	bl	10000988 <__aeabi_dcmpgt>
1000a648:	2800      	cmp	r0, #0
1000a64a:	d095      	beq.n	1000a578 <_strtod_l+0xa10>
1000a64c:	e4da      	b.n	1000a004 <_strtod_l+0x49c>
1000a64e:	9b04      	ldr	r3, [sp, #16]
1000a650:	b333      	cbz	r3, 1000a6a0 <_strtod_l+0xb38>
1000a652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000a654:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
1000a658:	d822      	bhi.n	1000a6a0 <_strtod_l+0xb38>
1000a65a:	a331      	add	r3, pc, #196	; (adr r3, 1000a720 <_strtod_l+0xbb8>)
1000a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a660:	4630      	mov	r0, r6
1000a662:	4639      	mov	r1, r7
1000a664:	f7f6 f97c 	bl	10000960 <__aeabi_dcmple>
1000a668:	b1a0      	cbz	r0, 1000a694 <_strtod_l+0xb2c>
1000a66a:	4639      	mov	r1, r7
1000a66c:	4630      	mov	r0, r6
1000a66e:	f7f6 f9d3 	bl	10000a18 <__aeabi_d2uiz>
1000a672:	2801      	cmp	r0, #1
1000a674:	bf38      	it	cc
1000a676:	2001      	movcc	r0, #1
1000a678:	f7f5 fe7c 	bl	10000374 <__aeabi_ui2d>
1000a67c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1000a67e:	4606      	mov	r6, r0
1000a680:	460f      	mov	r7, r1
1000a682:	bb23      	cbnz	r3, 1000a6ce <_strtod_l+0xb66>
1000a684:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1000a688:	9010      	str	r0, [sp, #64]	; 0x40
1000a68a:	9311      	str	r3, [sp, #68]	; 0x44
1000a68c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1000a690:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
1000a694:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000a696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000a698:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
1000a69c:	1a9b      	subs	r3, r3, r2
1000a69e:	930f      	str	r3, [sp, #60]	; 0x3c
1000a6a0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1000a6a4:	eeb0 0a48 	vmov.f32	s0, s16
1000a6a8:	eef0 0a68 	vmov.f32	s1, s17
1000a6ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
1000a6b0:	f7ff f8fc 	bl	100098ac <__ulp>
1000a6b4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1000a6b8:	ec53 2b10 	vmov	r2, r3, d0
1000a6bc:	f7f5 fed4 	bl	10000468 <__aeabi_dmul>
1000a6c0:	ec53 2b18 	vmov	r2, r3, d8
1000a6c4:	f7f5 fd1a 	bl	100000fc <__adddf3>
1000a6c8:	4680      	mov	r8, r0
1000a6ca:	4689      	mov	r9, r1
1000a6cc:	e78d      	b.n	1000a5ea <_strtod_l+0xa82>
1000a6ce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
1000a6d2:	e7db      	b.n	1000a68c <_strtod_l+0xb24>
1000a6d4:	a314      	add	r3, pc, #80	; (adr r3, 1000a728 <_strtod_l+0xbc0>)
1000a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
1000a6da:	f7f6 f937 	bl	1000094c <__aeabi_dcmplt>
1000a6de:	e7b3      	b.n	1000a648 <_strtod_l+0xae0>
1000a6e0:	2300      	movs	r3, #0
1000a6e2:	930a      	str	r3, [sp, #40]	; 0x28
1000a6e4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1000a6e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
1000a6e8:	6013      	str	r3, [r2, #0]
1000a6ea:	f7ff ba7c 	b.w	10009be6 <_strtod_l+0x7e>
1000a6ee:	2a65      	cmp	r2, #101	; 0x65
1000a6f0:	f43f ab75 	beq.w	10009dde <_strtod_l+0x276>
1000a6f4:	2a45      	cmp	r2, #69	; 0x45
1000a6f6:	f43f ab72 	beq.w	10009dde <_strtod_l+0x276>
1000a6fa:	2301      	movs	r3, #1
1000a6fc:	f7ff bbaa 	b.w	10009e54 <_strtod_l+0x2ec>
1000a700:	00000000 	.word	0x00000000
1000a704:	bff00000 	.word	0xbff00000
1000a708:	00000000 	.word	0x00000000
1000a70c:	3ff00000 	.word	0x3ff00000
1000a710:	94a03595 	.word	0x94a03595
1000a714:	3fdfffff 	.word	0x3fdfffff
1000a718:	35afe535 	.word	0x35afe535
1000a71c:	3fe00000 	.word	0x3fe00000
1000a720:	ffc00000 	.word	0xffc00000
1000a724:	41dfffff 	.word	0x41dfffff
1000a728:	94a03595 	.word	0x94a03595
1000a72c:	3fcfffff 	.word	0x3fcfffff
1000a730:	3ff00000 	.word	0x3ff00000
1000a734:	3fe00000 	.word	0x3fe00000
1000a738:	7ff00000 	.word	0x7ff00000
1000a73c:	7fe00000 	.word	0x7fe00000
1000a740:	7c9fffff 	.word	0x7c9fffff
1000a744:	7fefffff 	.word	0x7fefffff

1000a748 <_strtod_r>:
1000a748:	4b01      	ldr	r3, [pc, #4]	; (1000a750 <_strtod_r+0x8>)
1000a74a:	f7ff ba0d 	b.w	10009b68 <_strtod_l>
1000a74e:	bf00      	nop
1000a750:	10020068 	.word	0x10020068

1000a754 <_strtol_l.constprop.0>:
1000a754:	2b01      	cmp	r3, #1
1000a756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000a75a:	d001      	beq.n	1000a760 <_strtol_l.constprop.0+0xc>
1000a75c:	2b24      	cmp	r3, #36	; 0x24
1000a75e:	d906      	bls.n	1000a76e <_strtol_l.constprop.0+0x1a>
1000a760:	f7fd fd8a 	bl	10008278 <__errno>
1000a764:	2316      	movs	r3, #22
1000a766:	6003      	str	r3, [r0, #0]
1000a768:	2000      	movs	r0, #0
1000a76a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000a76e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 1000a854 <_strtol_l.constprop.0+0x100>
1000a772:	460d      	mov	r5, r1
1000a774:	462e      	mov	r6, r5
1000a776:	f815 4b01 	ldrb.w	r4, [r5], #1
1000a77a:	f81c 7004 	ldrb.w	r7, [ip, r4]
1000a77e:	f017 0708 	ands.w	r7, r7, #8
1000a782:	d1f7      	bne.n	1000a774 <_strtol_l.constprop.0+0x20>
1000a784:	2c2d      	cmp	r4, #45	; 0x2d
1000a786:	d132      	bne.n	1000a7ee <_strtol_l.constprop.0+0x9a>
1000a788:	782c      	ldrb	r4, [r5, #0]
1000a78a:	2701      	movs	r7, #1
1000a78c:	1cb5      	adds	r5, r6, #2
1000a78e:	2b00      	cmp	r3, #0
1000a790:	d05b      	beq.n	1000a84a <_strtol_l.constprop.0+0xf6>
1000a792:	2b10      	cmp	r3, #16
1000a794:	d109      	bne.n	1000a7aa <_strtol_l.constprop.0+0x56>
1000a796:	2c30      	cmp	r4, #48	; 0x30
1000a798:	d107      	bne.n	1000a7aa <_strtol_l.constprop.0+0x56>
1000a79a:	782c      	ldrb	r4, [r5, #0]
1000a79c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
1000a7a0:	2c58      	cmp	r4, #88	; 0x58
1000a7a2:	d14d      	bne.n	1000a840 <_strtol_l.constprop.0+0xec>
1000a7a4:	786c      	ldrb	r4, [r5, #1]
1000a7a6:	2310      	movs	r3, #16
1000a7a8:	3502      	adds	r5, #2
1000a7aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
1000a7ae:	f108 38ff 	add.w	r8, r8, #4294967295
1000a7b2:	f04f 0e00 	mov.w	lr, #0
1000a7b6:	fbb8 f9f3 	udiv	r9, r8, r3
1000a7ba:	4676      	mov	r6, lr
1000a7bc:	fb03 8a19 	mls	sl, r3, r9, r8
1000a7c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
1000a7c4:	f1bc 0f09 	cmp.w	ip, #9
1000a7c8:	d816      	bhi.n	1000a7f8 <_strtol_l.constprop.0+0xa4>
1000a7ca:	4664      	mov	r4, ip
1000a7cc:	42a3      	cmp	r3, r4
1000a7ce:	dd24      	ble.n	1000a81a <_strtol_l.constprop.0+0xc6>
1000a7d0:	f1be 3fff 	cmp.w	lr, #4294967295
1000a7d4:	d008      	beq.n	1000a7e8 <_strtol_l.constprop.0+0x94>
1000a7d6:	45b1      	cmp	r9, r6
1000a7d8:	d31c      	bcc.n	1000a814 <_strtol_l.constprop.0+0xc0>
1000a7da:	d101      	bne.n	1000a7e0 <_strtol_l.constprop.0+0x8c>
1000a7dc:	45a2      	cmp	sl, r4
1000a7de:	db19      	blt.n	1000a814 <_strtol_l.constprop.0+0xc0>
1000a7e0:	fb06 4603 	mla	r6, r6, r3, r4
1000a7e4:	f04f 0e01 	mov.w	lr, #1
1000a7e8:	f815 4b01 	ldrb.w	r4, [r5], #1
1000a7ec:	e7e8      	b.n	1000a7c0 <_strtol_l.constprop.0+0x6c>
1000a7ee:	2c2b      	cmp	r4, #43	; 0x2b
1000a7f0:	bf04      	itt	eq
1000a7f2:	782c      	ldrbeq	r4, [r5, #0]
1000a7f4:	1cb5      	addeq	r5, r6, #2
1000a7f6:	e7ca      	b.n	1000a78e <_strtol_l.constprop.0+0x3a>
1000a7f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
1000a7fc:	f1bc 0f19 	cmp.w	ip, #25
1000a800:	d801      	bhi.n	1000a806 <_strtol_l.constprop.0+0xb2>
1000a802:	3c37      	subs	r4, #55	; 0x37
1000a804:	e7e2      	b.n	1000a7cc <_strtol_l.constprop.0+0x78>
1000a806:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
1000a80a:	f1bc 0f19 	cmp.w	ip, #25
1000a80e:	d804      	bhi.n	1000a81a <_strtol_l.constprop.0+0xc6>
1000a810:	3c57      	subs	r4, #87	; 0x57
1000a812:	e7db      	b.n	1000a7cc <_strtol_l.constprop.0+0x78>
1000a814:	f04f 3eff 	mov.w	lr, #4294967295
1000a818:	e7e6      	b.n	1000a7e8 <_strtol_l.constprop.0+0x94>
1000a81a:	f1be 3fff 	cmp.w	lr, #4294967295
1000a81e:	d105      	bne.n	1000a82c <_strtol_l.constprop.0+0xd8>
1000a820:	2322      	movs	r3, #34	; 0x22
1000a822:	6003      	str	r3, [r0, #0]
1000a824:	4646      	mov	r6, r8
1000a826:	b942      	cbnz	r2, 1000a83a <_strtol_l.constprop.0+0xe6>
1000a828:	4630      	mov	r0, r6
1000a82a:	e79e      	b.n	1000a76a <_strtol_l.constprop.0+0x16>
1000a82c:	b107      	cbz	r7, 1000a830 <_strtol_l.constprop.0+0xdc>
1000a82e:	4276      	negs	r6, r6
1000a830:	2a00      	cmp	r2, #0
1000a832:	d0f9      	beq.n	1000a828 <_strtol_l.constprop.0+0xd4>
1000a834:	f1be 0f00 	cmp.w	lr, #0
1000a838:	d000      	beq.n	1000a83c <_strtol_l.constprop.0+0xe8>
1000a83a:	1e69      	subs	r1, r5, #1
1000a83c:	6011      	str	r1, [r2, #0]
1000a83e:	e7f3      	b.n	1000a828 <_strtol_l.constprop.0+0xd4>
1000a840:	2430      	movs	r4, #48	; 0x30
1000a842:	2b00      	cmp	r3, #0
1000a844:	d1b1      	bne.n	1000a7aa <_strtol_l.constprop.0+0x56>
1000a846:	2308      	movs	r3, #8
1000a848:	e7af      	b.n	1000a7aa <_strtol_l.constprop.0+0x56>
1000a84a:	2c30      	cmp	r4, #48	; 0x30
1000a84c:	d0a5      	beq.n	1000a79a <_strtol_l.constprop.0+0x46>
1000a84e:	230a      	movs	r3, #10
1000a850:	e7ab      	b.n	1000a7aa <_strtol_l.constprop.0+0x56>
1000a852:	bf00      	nop
1000a854:	1000be31 	.word	0x1000be31

1000a858 <_strtol_r>:
1000a858:	f7ff bf7c 	b.w	1000a754 <_strtol_l.constprop.0>

1000a85c <__ssputs_r>:
1000a85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1000a860:	688e      	ldr	r6, [r1, #8]
1000a862:	461f      	mov	r7, r3
1000a864:	42be      	cmp	r6, r7
1000a866:	680b      	ldr	r3, [r1, #0]
1000a868:	4682      	mov	sl, r0
1000a86a:	460c      	mov	r4, r1
1000a86c:	4690      	mov	r8, r2
1000a86e:	d82c      	bhi.n	1000a8ca <__ssputs_r+0x6e>
1000a870:	898a      	ldrh	r2, [r1, #12]
1000a872:	f412 6f90 	tst.w	r2, #1152	; 0x480
1000a876:	d026      	beq.n	1000a8c6 <__ssputs_r+0x6a>
1000a878:	6965      	ldr	r5, [r4, #20]
1000a87a:	6909      	ldr	r1, [r1, #16]
1000a87c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
1000a880:	eba3 0901 	sub.w	r9, r3, r1
1000a884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
1000a888:	1c7b      	adds	r3, r7, #1
1000a88a:	444b      	add	r3, r9
1000a88c:	106d      	asrs	r5, r5, #1
1000a88e:	429d      	cmp	r5, r3
1000a890:	bf38      	it	cc
1000a892:	461d      	movcc	r5, r3
1000a894:	0553      	lsls	r3, r2, #21
1000a896:	d527      	bpl.n	1000a8e8 <__ssputs_r+0x8c>
1000a898:	4629      	mov	r1, r5
1000a89a:	f7fe fc0f 	bl	100090bc <_malloc_r>
1000a89e:	4606      	mov	r6, r0
1000a8a0:	b360      	cbz	r0, 1000a8fc <__ssputs_r+0xa0>
1000a8a2:	6921      	ldr	r1, [r4, #16]
1000a8a4:	464a      	mov	r2, r9
1000a8a6:	f000 fbf5 	bl	1000b094 <memcpy>
1000a8aa:	89a3      	ldrh	r3, [r4, #12]
1000a8ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1000a8b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1000a8b4:	81a3      	strh	r3, [r4, #12]
1000a8b6:	6126      	str	r6, [r4, #16]
1000a8b8:	6165      	str	r5, [r4, #20]
1000a8ba:	444e      	add	r6, r9
1000a8bc:	eba5 0509 	sub.w	r5, r5, r9
1000a8c0:	6026      	str	r6, [r4, #0]
1000a8c2:	60a5      	str	r5, [r4, #8]
1000a8c4:	463e      	mov	r6, r7
1000a8c6:	42be      	cmp	r6, r7
1000a8c8:	d900      	bls.n	1000a8cc <__ssputs_r+0x70>
1000a8ca:	463e      	mov	r6, r7
1000a8cc:	6820      	ldr	r0, [r4, #0]
1000a8ce:	4632      	mov	r2, r6
1000a8d0:	4641      	mov	r1, r8
1000a8d2:	f000 fba3 	bl	1000b01c <memmove>
1000a8d6:	68a3      	ldr	r3, [r4, #8]
1000a8d8:	1b9b      	subs	r3, r3, r6
1000a8da:	60a3      	str	r3, [r4, #8]
1000a8dc:	6823      	ldr	r3, [r4, #0]
1000a8de:	4433      	add	r3, r6
1000a8e0:	6023      	str	r3, [r4, #0]
1000a8e2:	2000      	movs	r0, #0
1000a8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1000a8e8:	462a      	mov	r2, r5
1000a8ea:	f000 ff86 	bl	1000b7fa <_realloc_r>
1000a8ee:	4606      	mov	r6, r0
1000a8f0:	2800      	cmp	r0, #0
1000a8f2:	d1e0      	bne.n	1000a8b6 <__ssputs_r+0x5a>
1000a8f4:	6921      	ldr	r1, [r4, #16]
1000a8f6:	4650      	mov	r0, sl
1000a8f8:	f7fe fb6c 	bl	10008fd4 <_free_r>
1000a8fc:	230c      	movs	r3, #12
1000a8fe:	f8ca 3000 	str.w	r3, [sl]
1000a902:	89a3      	ldrh	r3, [r4, #12]
1000a904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000a908:	81a3      	strh	r3, [r4, #12]
1000a90a:	f04f 30ff 	mov.w	r0, #4294967295
1000a90e:	e7e9      	b.n	1000a8e4 <__ssputs_r+0x88>

1000a910 <_svfiprintf_r>:
1000a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000a914:	4698      	mov	r8, r3
1000a916:	898b      	ldrh	r3, [r1, #12]
1000a918:	061b      	lsls	r3, r3, #24
1000a91a:	b09d      	sub	sp, #116	; 0x74
1000a91c:	4607      	mov	r7, r0
1000a91e:	460d      	mov	r5, r1
1000a920:	4614      	mov	r4, r2
1000a922:	d50e      	bpl.n	1000a942 <_svfiprintf_r+0x32>
1000a924:	690b      	ldr	r3, [r1, #16]
1000a926:	b963      	cbnz	r3, 1000a942 <_svfiprintf_r+0x32>
1000a928:	2140      	movs	r1, #64	; 0x40
1000a92a:	f7fe fbc7 	bl	100090bc <_malloc_r>
1000a92e:	6028      	str	r0, [r5, #0]
1000a930:	6128      	str	r0, [r5, #16]
1000a932:	b920      	cbnz	r0, 1000a93e <_svfiprintf_r+0x2e>
1000a934:	230c      	movs	r3, #12
1000a936:	603b      	str	r3, [r7, #0]
1000a938:	f04f 30ff 	mov.w	r0, #4294967295
1000a93c:	e0d0      	b.n	1000aae0 <_svfiprintf_r+0x1d0>
1000a93e:	2340      	movs	r3, #64	; 0x40
1000a940:	616b      	str	r3, [r5, #20]
1000a942:	2300      	movs	r3, #0
1000a944:	9309      	str	r3, [sp, #36]	; 0x24
1000a946:	2320      	movs	r3, #32
1000a948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1000a94c:	f8cd 800c 	str.w	r8, [sp, #12]
1000a950:	2330      	movs	r3, #48	; 0x30
1000a952:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 1000aaf8 <_svfiprintf_r+0x1e8>
1000a956:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1000a95a:	f04f 0901 	mov.w	r9, #1
1000a95e:	4623      	mov	r3, r4
1000a960:	469a      	mov	sl, r3
1000a962:	f813 2b01 	ldrb.w	r2, [r3], #1
1000a966:	b10a      	cbz	r2, 1000a96c <_svfiprintf_r+0x5c>
1000a968:	2a25      	cmp	r2, #37	; 0x25
1000a96a:	d1f9      	bne.n	1000a960 <_svfiprintf_r+0x50>
1000a96c:	ebba 0b04 	subs.w	fp, sl, r4
1000a970:	d00b      	beq.n	1000a98a <_svfiprintf_r+0x7a>
1000a972:	465b      	mov	r3, fp
1000a974:	4622      	mov	r2, r4
1000a976:	4629      	mov	r1, r5
1000a978:	4638      	mov	r0, r7
1000a97a:	f7ff ff6f 	bl	1000a85c <__ssputs_r>
1000a97e:	3001      	adds	r0, #1
1000a980:	f000 80a9 	beq.w	1000aad6 <_svfiprintf_r+0x1c6>
1000a984:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000a986:	445a      	add	r2, fp
1000a988:	9209      	str	r2, [sp, #36]	; 0x24
1000a98a:	f89a 3000 	ldrb.w	r3, [sl]
1000a98e:	2b00      	cmp	r3, #0
1000a990:	f000 80a1 	beq.w	1000aad6 <_svfiprintf_r+0x1c6>
1000a994:	2300      	movs	r3, #0
1000a996:	f04f 32ff 	mov.w	r2, #4294967295
1000a99a:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000a99e:	f10a 0a01 	add.w	sl, sl, #1
1000a9a2:	9304      	str	r3, [sp, #16]
1000a9a4:	9307      	str	r3, [sp, #28]
1000a9a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1000a9aa:	931a      	str	r3, [sp, #104]	; 0x68
1000a9ac:	4654      	mov	r4, sl
1000a9ae:	2205      	movs	r2, #5
1000a9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
1000a9b4:	4850      	ldr	r0, [pc, #320]	; (1000aaf8 <_svfiprintf_r+0x1e8>)
1000a9b6:	f7f5 fb43 	bl	10000040 <memchr>
1000a9ba:	9a04      	ldr	r2, [sp, #16]
1000a9bc:	b9d8      	cbnz	r0, 1000a9f6 <_svfiprintf_r+0xe6>
1000a9be:	06d0      	lsls	r0, r2, #27
1000a9c0:	bf44      	itt	mi
1000a9c2:	2320      	movmi	r3, #32
1000a9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000a9c8:	0711      	lsls	r1, r2, #28
1000a9ca:	bf44      	itt	mi
1000a9cc:	232b      	movmi	r3, #43	; 0x2b
1000a9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000a9d2:	f89a 3000 	ldrb.w	r3, [sl]
1000a9d6:	2b2a      	cmp	r3, #42	; 0x2a
1000a9d8:	d015      	beq.n	1000aa06 <_svfiprintf_r+0xf6>
1000a9da:	9a07      	ldr	r2, [sp, #28]
1000a9dc:	4654      	mov	r4, sl
1000a9de:	2000      	movs	r0, #0
1000a9e0:	f04f 0c0a 	mov.w	ip, #10
1000a9e4:	4621      	mov	r1, r4
1000a9e6:	f811 3b01 	ldrb.w	r3, [r1], #1
1000a9ea:	3b30      	subs	r3, #48	; 0x30
1000a9ec:	2b09      	cmp	r3, #9
1000a9ee:	d94d      	bls.n	1000aa8c <_svfiprintf_r+0x17c>
1000a9f0:	b1b0      	cbz	r0, 1000aa20 <_svfiprintf_r+0x110>
1000a9f2:	9207      	str	r2, [sp, #28]
1000a9f4:	e014      	b.n	1000aa20 <_svfiprintf_r+0x110>
1000a9f6:	eba0 0308 	sub.w	r3, r0, r8
1000a9fa:	fa09 f303 	lsl.w	r3, r9, r3
1000a9fe:	4313      	orrs	r3, r2
1000aa00:	9304      	str	r3, [sp, #16]
1000aa02:	46a2      	mov	sl, r4
1000aa04:	e7d2      	b.n	1000a9ac <_svfiprintf_r+0x9c>
1000aa06:	9b03      	ldr	r3, [sp, #12]
1000aa08:	1d19      	adds	r1, r3, #4
1000aa0a:	681b      	ldr	r3, [r3, #0]
1000aa0c:	9103      	str	r1, [sp, #12]
1000aa0e:	2b00      	cmp	r3, #0
1000aa10:	bfbb      	ittet	lt
1000aa12:	425b      	neglt	r3, r3
1000aa14:	f042 0202 	orrlt.w	r2, r2, #2
1000aa18:	9307      	strge	r3, [sp, #28]
1000aa1a:	9307      	strlt	r3, [sp, #28]
1000aa1c:	bfb8      	it	lt
1000aa1e:	9204      	strlt	r2, [sp, #16]
1000aa20:	7823      	ldrb	r3, [r4, #0]
1000aa22:	2b2e      	cmp	r3, #46	; 0x2e
1000aa24:	d10c      	bne.n	1000aa40 <_svfiprintf_r+0x130>
1000aa26:	7863      	ldrb	r3, [r4, #1]
1000aa28:	2b2a      	cmp	r3, #42	; 0x2a
1000aa2a:	d134      	bne.n	1000aa96 <_svfiprintf_r+0x186>
1000aa2c:	9b03      	ldr	r3, [sp, #12]
1000aa2e:	1d1a      	adds	r2, r3, #4
1000aa30:	681b      	ldr	r3, [r3, #0]
1000aa32:	9203      	str	r2, [sp, #12]
1000aa34:	2b00      	cmp	r3, #0
1000aa36:	bfb8      	it	lt
1000aa38:	f04f 33ff 	movlt.w	r3, #4294967295
1000aa3c:	3402      	adds	r4, #2
1000aa3e:	9305      	str	r3, [sp, #20]
1000aa40:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1000ab08 <_svfiprintf_r+0x1f8>
1000aa44:	7821      	ldrb	r1, [r4, #0]
1000aa46:	2203      	movs	r2, #3
1000aa48:	4650      	mov	r0, sl
1000aa4a:	f7f5 faf9 	bl	10000040 <memchr>
1000aa4e:	b138      	cbz	r0, 1000aa60 <_svfiprintf_r+0x150>
1000aa50:	9b04      	ldr	r3, [sp, #16]
1000aa52:	eba0 000a 	sub.w	r0, r0, sl
1000aa56:	2240      	movs	r2, #64	; 0x40
1000aa58:	4082      	lsls	r2, r0
1000aa5a:	4313      	orrs	r3, r2
1000aa5c:	3401      	adds	r4, #1
1000aa5e:	9304      	str	r3, [sp, #16]
1000aa60:	f814 1b01 	ldrb.w	r1, [r4], #1
1000aa64:	4825      	ldr	r0, [pc, #148]	; (1000aafc <_svfiprintf_r+0x1ec>)
1000aa66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1000aa6a:	2206      	movs	r2, #6
1000aa6c:	f7f5 fae8 	bl	10000040 <memchr>
1000aa70:	2800      	cmp	r0, #0
1000aa72:	d038      	beq.n	1000aae6 <_svfiprintf_r+0x1d6>
1000aa74:	4b22      	ldr	r3, [pc, #136]	; (1000ab00 <_svfiprintf_r+0x1f0>)
1000aa76:	bb1b      	cbnz	r3, 1000aac0 <_svfiprintf_r+0x1b0>
1000aa78:	9b03      	ldr	r3, [sp, #12]
1000aa7a:	3307      	adds	r3, #7
1000aa7c:	f023 0307 	bic.w	r3, r3, #7
1000aa80:	3308      	adds	r3, #8
1000aa82:	9303      	str	r3, [sp, #12]
1000aa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000aa86:	4433      	add	r3, r6
1000aa88:	9309      	str	r3, [sp, #36]	; 0x24
1000aa8a:	e768      	b.n	1000a95e <_svfiprintf_r+0x4e>
1000aa8c:	fb0c 3202 	mla	r2, ip, r2, r3
1000aa90:	460c      	mov	r4, r1
1000aa92:	2001      	movs	r0, #1
1000aa94:	e7a6      	b.n	1000a9e4 <_svfiprintf_r+0xd4>
1000aa96:	2300      	movs	r3, #0
1000aa98:	3401      	adds	r4, #1
1000aa9a:	9305      	str	r3, [sp, #20]
1000aa9c:	4619      	mov	r1, r3
1000aa9e:	f04f 0c0a 	mov.w	ip, #10
1000aaa2:	4620      	mov	r0, r4
1000aaa4:	f810 2b01 	ldrb.w	r2, [r0], #1
1000aaa8:	3a30      	subs	r2, #48	; 0x30
1000aaaa:	2a09      	cmp	r2, #9
1000aaac:	d903      	bls.n	1000aab6 <_svfiprintf_r+0x1a6>
1000aaae:	2b00      	cmp	r3, #0
1000aab0:	d0c6      	beq.n	1000aa40 <_svfiprintf_r+0x130>
1000aab2:	9105      	str	r1, [sp, #20]
1000aab4:	e7c4      	b.n	1000aa40 <_svfiprintf_r+0x130>
1000aab6:	fb0c 2101 	mla	r1, ip, r1, r2
1000aaba:	4604      	mov	r4, r0
1000aabc:	2301      	movs	r3, #1
1000aabe:	e7f0      	b.n	1000aaa2 <_svfiprintf_r+0x192>
1000aac0:	ab03      	add	r3, sp, #12
1000aac2:	9300      	str	r3, [sp, #0]
1000aac4:	462a      	mov	r2, r5
1000aac6:	4b0f      	ldr	r3, [pc, #60]	; (1000ab04 <_svfiprintf_r+0x1f4>)
1000aac8:	a904      	add	r1, sp, #16
1000aaca:	4638      	mov	r0, r7
1000aacc:	f7fc fc74 	bl	100073b8 <_printf_float>
1000aad0:	1c42      	adds	r2, r0, #1
1000aad2:	4606      	mov	r6, r0
1000aad4:	d1d6      	bne.n	1000aa84 <_svfiprintf_r+0x174>
1000aad6:	89ab      	ldrh	r3, [r5, #12]
1000aad8:	065b      	lsls	r3, r3, #25
1000aada:	f53f af2d 	bmi.w	1000a938 <_svfiprintf_r+0x28>
1000aade:	9809      	ldr	r0, [sp, #36]	; 0x24
1000aae0:	b01d      	add	sp, #116	; 0x74
1000aae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000aae6:	ab03      	add	r3, sp, #12
1000aae8:	9300      	str	r3, [sp, #0]
1000aaea:	462a      	mov	r2, r5
1000aaec:	4b05      	ldr	r3, [pc, #20]	; (1000ab04 <_svfiprintf_r+0x1f4>)
1000aaee:	a904      	add	r1, sp, #16
1000aaf0:	4638      	mov	r0, r7
1000aaf2:	f7fc ff05 	bl	10007900 <_printf_i>
1000aaf6:	e7eb      	b.n	1000aad0 <_svfiprintf_r+0x1c0>
1000aaf8:	1000bf31 	.word	0x1000bf31
1000aafc:	1000bf3b 	.word	0x1000bf3b
1000ab00:	100073b9 	.word	0x100073b9
1000ab04:	1000a85d 	.word	0x1000a85d
1000ab08:	1000bf37 	.word	0x1000bf37

1000ab0c <__sfputc_r>:
1000ab0c:	6893      	ldr	r3, [r2, #8]
1000ab0e:	3b01      	subs	r3, #1
1000ab10:	2b00      	cmp	r3, #0
1000ab12:	b410      	push	{r4}
1000ab14:	6093      	str	r3, [r2, #8]
1000ab16:	da08      	bge.n	1000ab2a <__sfputc_r+0x1e>
1000ab18:	6994      	ldr	r4, [r2, #24]
1000ab1a:	42a3      	cmp	r3, r4
1000ab1c:	db01      	blt.n	1000ab22 <__sfputc_r+0x16>
1000ab1e:	290a      	cmp	r1, #10
1000ab20:	d103      	bne.n	1000ab2a <__sfputc_r+0x1e>
1000ab22:	f85d 4b04 	ldr.w	r4, [sp], #4
1000ab26:	f000 b9e3 	b.w	1000aef0 <__swbuf_r>
1000ab2a:	6813      	ldr	r3, [r2, #0]
1000ab2c:	1c58      	adds	r0, r3, #1
1000ab2e:	6010      	str	r0, [r2, #0]
1000ab30:	7019      	strb	r1, [r3, #0]
1000ab32:	4608      	mov	r0, r1
1000ab34:	f85d 4b04 	ldr.w	r4, [sp], #4
1000ab38:	4770      	bx	lr

1000ab3a <__sfputs_r>:
1000ab3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ab3c:	4606      	mov	r6, r0
1000ab3e:	460f      	mov	r7, r1
1000ab40:	4614      	mov	r4, r2
1000ab42:	18d5      	adds	r5, r2, r3
1000ab44:	42ac      	cmp	r4, r5
1000ab46:	d101      	bne.n	1000ab4c <__sfputs_r+0x12>
1000ab48:	2000      	movs	r0, #0
1000ab4a:	e007      	b.n	1000ab5c <__sfputs_r+0x22>
1000ab4c:	f814 1b01 	ldrb.w	r1, [r4], #1
1000ab50:	463a      	mov	r2, r7
1000ab52:	4630      	mov	r0, r6
1000ab54:	f7ff ffda 	bl	1000ab0c <__sfputc_r>
1000ab58:	1c43      	adds	r3, r0, #1
1000ab5a:	d1f3      	bne.n	1000ab44 <__sfputs_r+0xa>
1000ab5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1000ab60 <_vfiprintf_r>:
1000ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000ab64:	460d      	mov	r5, r1
1000ab66:	b09d      	sub	sp, #116	; 0x74
1000ab68:	4614      	mov	r4, r2
1000ab6a:	4698      	mov	r8, r3
1000ab6c:	4606      	mov	r6, r0
1000ab6e:	b118      	cbz	r0, 1000ab78 <_vfiprintf_r+0x18>
1000ab70:	6a03      	ldr	r3, [r0, #32]
1000ab72:	b90b      	cbnz	r3, 1000ab78 <_vfiprintf_r+0x18>
1000ab74:	f7fd fa82 	bl	1000807c <__sinit>
1000ab78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1000ab7a:	07d9      	lsls	r1, r3, #31
1000ab7c:	d405      	bmi.n	1000ab8a <_vfiprintf_r+0x2a>
1000ab7e:	89ab      	ldrh	r3, [r5, #12]
1000ab80:	059a      	lsls	r2, r3, #22
1000ab82:	d402      	bmi.n	1000ab8a <_vfiprintf_r+0x2a>
1000ab84:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000ab86:	f7fd fba2 	bl	100082ce <__retarget_lock_acquire_recursive>
1000ab8a:	89ab      	ldrh	r3, [r5, #12]
1000ab8c:	071b      	lsls	r3, r3, #28
1000ab8e:	d501      	bpl.n	1000ab94 <_vfiprintf_r+0x34>
1000ab90:	692b      	ldr	r3, [r5, #16]
1000ab92:	b99b      	cbnz	r3, 1000abbc <_vfiprintf_r+0x5c>
1000ab94:	4629      	mov	r1, r5
1000ab96:	4630      	mov	r0, r6
1000ab98:	f000 f9e8 	bl	1000af6c <__swsetup_r>
1000ab9c:	b170      	cbz	r0, 1000abbc <_vfiprintf_r+0x5c>
1000ab9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1000aba0:	07dc      	lsls	r4, r3, #31
1000aba2:	d504      	bpl.n	1000abae <_vfiprintf_r+0x4e>
1000aba4:	f04f 30ff 	mov.w	r0, #4294967295
1000aba8:	b01d      	add	sp, #116	; 0x74
1000abaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000abae:	89ab      	ldrh	r3, [r5, #12]
1000abb0:	0598      	lsls	r0, r3, #22
1000abb2:	d4f7      	bmi.n	1000aba4 <_vfiprintf_r+0x44>
1000abb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000abb6:	f7fd fb8b 	bl	100082d0 <__retarget_lock_release_recursive>
1000abba:	e7f3      	b.n	1000aba4 <_vfiprintf_r+0x44>
1000abbc:	2300      	movs	r3, #0
1000abbe:	9309      	str	r3, [sp, #36]	; 0x24
1000abc0:	2320      	movs	r3, #32
1000abc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1000abc6:	f8cd 800c 	str.w	r8, [sp, #12]
1000abca:	2330      	movs	r3, #48	; 0x30
1000abcc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 1000ad80 <_vfiprintf_r+0x220>
1000abd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1000abd4:	f04f 0901 	mov.w	r9, #1
1000abd8:	4623      	mov	r3, r4
1000abda:	469a      	mov	sl, r3
1000abdc:	f813 2b01 	ldrb.w	r2, [r3], #1
1000abe0:	b10a      	cbz	r2, 1000abe6 <_vfiprintf_r+0x86>
1000abe2:	2a25      	cmp	r2, #37	; 0x25
1000abe4:	d1f9      	bne.n	1000abda <_vfiprintf_r+0x7a>
1000abe6:	ebba 0b04 	subs.w	fp, sl, r4
1000abea:	d00b      	beq.n	1000ac04 <_vfiprintf_r+0xa4>
1000abec:	465b      	mov	r3, fp
1000abee:	4622      	mov	r2, r4
1000abf0:	4629      	mov	r1, r5
1000abf2:	4630      	mov	r0, r6
1000abf4:	f7ff ffa1 	bl	1000ab3a <__sfputs_r>
1000abf8:	3001      	adds	r0, #1
1000abfa:	f000 80a9 	beq.w	1000ad50 <_vfiprintf_r+0x1f0>
1000abfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
1000ac00:	445a      	add	r2, fp
1000ac02:	9209      	str	r2, [sp, #36]	; 0x24
1000ac04:	f89a 3000 	ldrb.w	r3, [sl]
1000ac08:	2b00      	cmp	r3, #0
1000ac0a:	f000 80a1 	beq.w	1000ad50 <_vfiprintf_r+0x1f0>
1000ac0e:	2300      	movs	r3, #0
1000ac10:	f04f 32ff 	mov.w	r2, #4294967295
1000ac14:	e9cd 2305 	strd	r2, r3, [sp, #20]
1000ac18:	f10a 0a01 	add.w	sl, sl, #1
1000ac1c:	9304      	str	r3, [sp, #16]
1000ac1e:	9307      	str	r3, [sp, #28]
1000ac20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1000ac24:	931a      	str	r3, [sp, #104]	; 0x68
1000ac26:	4654      	mov	r4, sl
1000ac28:	2205      	movs	r2, #5
1000ac2a:	f814 1b01 	ldrb.w	r1, [r4], #1
1000ac2e:	4854      	ldr	r0, [pc, #336]	; (1000ad80 <_vfiprintf_r+0x220>)
1000ac30:	f7f5 fa06 	bl	10000040 <memchr>
1000ac34:	9a04      	ldr	r2, [sp, #16]
1000ac36:	b9d8      	cbnz	r0, 1000ac70 <_vfiprintf_r+0x110>
1000ac38:	06d1      	lsls	r1, r2, #27
1000ac3a:	bf44      	itt	mi
1000ac3c:	2320      	movmi	r3, #32
1000ac3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000ac42:	0713      	lsls	r3, r2, #28
1000ac44:	bf44      	itt	mi
1000ac46:	232b      	movmi	r3, #43	; 0x2b
1000ac48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1000ac4c:	f89a 3000 	ldrb.w	r3, [sl]
1000ac50:	2b2a      	cmp	r3, #42	; 0x2a
1000ac52:	d015      	beq.n	1000ac80 <_vfiprintf_r+0x120>
1000ac54:	9a07      	ldr	r2, [sp, #28]
1000ac56:	4654      	mov	r4, sl
1000ac58:	2000      	movs	r0, #0
1000ac5a:	f04f 0c0a 	mov.w	ip, #10
1000ac5e:	4621      	mov	r1, r4
1000ac60:	f811 3b01 	ldrb.w	r3, [r1], #1
1000ac64:	3b30      	subs	r3, #48	; 0x30
1000ac66:	2b09      	cmp	r3, #9
1000ac68:	d94d      	bls.n	1000ad06 <_vfiprintf_r+0x1a6>
1000ac6a:	b1b0      	cbz	r0, 1000ac9a <_vfiprintf_r+0x13a>
1000ac6c:	9207      	str	r2, [sp, #28]
1000ac6e:	e014      	b.n	1000ac9a <_vfiprintf_r+0x13a>
1000ac70:	eba0 0308 	sub.w	r3, r0, r8
1000ac74:	fa09 f303 	lsl.w	r3, r9, r3
1000ac78:	4313      	orrs	r3, r2
1000ac7a:	9304      	str	r3, [sp, #16]
1000ac7c:	46a2      	mov	sl, r4
1000ac7e:	e7d2      	b.n	1000ac26 <_vfiprintf_r+0xc6>
1000ac80:	9b03      	ldr	r3, [sp, #12]
1000ac82:	1d19      	adds	r1, r3, #4
1000ac84:	681b      	ldr	r3, [r3, #0]
1000ac86:	9103      	str	r1, [sp, #12]
1000ac88:	2b00      	cmp	r3, #0
1000ac8a:	bfbb      	ittet	lt
1000ac8c:	425b      	neglt	r3, r3
1000ac8e:	f042 0202 	orrlt.w	r2, r2, #2
1000ac92:	9307      	strge	r3, [sp, #28]
1000ac94:	9307      	strlt	r3, [sp, #28]
1000ac96:	bfb8      	it	lt
1000ac98:	9204      	strlt	r2, [sp, #16]
1000ac9a:	7823      	ldrb	r3, [r4, #0]
1000ac9c:	2b2e      	cmp	r3, #46	; 0x2e
1000ac9e:	d10c      	bne.n	1000acba <_vfiprintf_r+0x15a>
1000aca0:	7863      	ldrb	r3, [r4, #1]
1000aca2:	2b2a      	cmp	r3, #42	; 0x2a
1000aca4:	d134      	bne.n	1000ad10 <_vfiprintf_r+0x1b0>
1000aca6:	9b03      	ldr	r3, [sp, #12]
1000aca8:	1d1a      	adds	r2, r3, #4
1000acaa:	681b      	ldr	r3, [r3, #0]
1000acac:	9203      	str	r2, [sp, #12]
1000acae:	2b00      	cmp	r3, #0
1000acb0:	bfb8      	it	lt
1000acb2:	f04f 33ff 	movlt.w	r3, #4294967295
1000acb6:	3402      	adds	r4, #2
1000acb8:	9305      	str	r3, [sp, #20]
1000acba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 1000ad90 <_vfiprintf_r+0x230>
1000acbe:	7821      	ldrb	r1, [r4, #0]
1000acc0:	2203      	movs	r2, #3
1000acc2:	4650      	mov	r0, sl
1000acc4:	f7f5 f9bc 	bl	10000040 <memchr>
1000acc8:	b138      	cbz	r0, 1000acda <_vfiprintf_r+0x17a>
1000acca:	9b04      	ldr	r3, [sp, #16]
1000accc:	eba0 000a 	sub.w	r0, r0, sl
1000acd0:	2240      	movs	r2, #64	; 0x40
1000acd2:	4082      	lsls	r2, r0
1000acd4:	4313      	orrs	r3, r2
1000acd6:	3401      	adds	r4, #1
1000acd8:	9304      	str	r3, [sp, #16]
1000acda:	f814 1b01 	ldrb.w	r1, [r4], #1
1000acde:	4829      	ldr	r0, [pc, #164]	; (1000ad84 <_vfiprintf_r+0x224>)
1000ace0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1000ace4:	2206      	movs	r2, #6
1000ace6:	f7f5 f9ab 	bl	10000040 <memchr>
1000acea:	2800      	cmp	r0, #0
1000acec:	d03f      	beq.n	1000ad6e <_vfiprintf_r+0x20e>
1000acee:	4b26      	ldr	r3, [pc, #152]	; (1000ad88 <_vfiprintf_r+0x228>)
1000acf0:	bb1b      	cbnz	r3, 1000ad3a <_vfiprintf_r+0x1da>
1000acf2:	9b03      	ldr	r3, [sp, #12]
1000acf4:	3307      	adds	r3, #7
1000acf6:	f023 0307 	bic.w	r3, r3, #7
1000acfa:	3308      	adds	r3, #8
1000acfc:	9303      	str	r3, [sp, #12]
1000acfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
1000ad00:	443b      	add	r3, r7
1000ad02:	9309      	str	r3, [sp, #36]	; 0x24
1000ad04:	e768      	b.n	1000abd8 <_vfiprintf_r+0x78>
1000ad06:	fb0c 3202 	mla	r2, ip, r2, r3
1000ad0a:	460c      	mov	r4, r1
1000ad0c:	2001      	movs	r0, #1
1000ad0e:	e7a6      	b.n	1000ac5e <_vfiprintf_r+0xfe>
1000ad10:	2300      	movs	r3, #0
1000ad12:	3401      	adds	r4, #1
1000ad14:	9305      	str	r3, [sp, #20]
1000ad16:	4619      	mov	r1, r3
1000ad18:	f04f 0c0a 	mov.w	ip, #10
1000ad1c:	4620      	mov	r0, r4
1000ad1e:	f810 2b01 	ldrb.w	r2, [r0], #1
1000ad22:	3a30      	subs	r2, #48	; 0x30
1000ad24:	2a09      	cmp	r2, #9
1000ad26:	d903      	bls.n	1000ad30 <_vfiprintf_r+0x1d0>
1000ad28:	2b00      	cmp	r3, #0
1000ad2a:	d0c6      	beq.n	1000acba <_vfiprintf_r+0x15a>
1000ad2c:	9105      	str	r1, [sp, #20]
1000ad2e:	e7c4      	b.n	1000acba <_vfiprintf_r+0x15a>
1000ad30:	fb0c 2101 	mla	r1, ip, r1, r2
1000ad34:	4604      	mov	r4, r0
1000ad36:	2301      	movs	r3, #1
1000ad38:	e7f0      	b.n	1000ad1c <_vfiprintf_r+0x1bc>
1000ad3a:	ab03      	add	r3, sp, #12
1000ad3c:	9300      	str	r3, [sp, #0]
1000ad3e:	462a      	mov	r2, r5
1000ad40:	4b12      	ldr	r3, [pc, #72]	; (1000ad8c <_vfiprintf_r+0x22c>)
1000ad42:	a904      	add	r1, sp, #16
1000ad44:	4630      	mov	r0, r6
1000ad46:	f7fc fb37 	bl	100073b8 <_printf_float>
1000ad4a:	4607      	mov	r7, r0
1000ad4c:	1c78      	adds	r0, r7, #1
1000ad4e:	d1d6      	bne.n	1000acfe <_vfiprintf_r+0x19e>
1000ad50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1000ad52:	07d9      	lsls	r1, r3, #31
1000ad54:	d405      	bmi.n	1000ad62 <_vfiprintf_r+0x202>
1000ad56:	89ab      	ldrh	r3, [r5, #12]
1000ad58:	059a      	lsls	r2, r3, #22
1000ad5a:	d402      	bmi.n	1000ad62 <_vfiprintf_r+0x202>
1000ad5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
1000ad5e:	f7fd fab7 	bl	100082d0 <__retarget_lock_release_recursive>
1000ad62:	89ab      	ldrh	r3, [r5, #12]
1000ad64:	065b      	lsls	r3, r3, #25
1000ad66:	f53f af1d 	bmi.w	1000aba4 <_vfiprintf_r+0x44>
1000ad6a:	9809      	ldr	r0, [sp, #36]	; 0x24
1000ad6c:	e71c      	b.n	1000aba8 <_vfiprintf_r+0x48>
1000ad6e:	ab03      	add	r3, sp, #12
1000ad70:	9300      	str	r3, [sp, #0]
1000ad72:	462a      	mov	r2, r5
1000ad74:	4b05      	ldr	r3, [pc, #20]	; (1000ad8c <_vfiprintf_r+0x22c>)
1000ad76:	a904      	add	r1, sp, #16
1000ad78:	4630      	mov	r0, r6
1000ad7a:	f7fc fdc1 	bl	10007900 <_printf_i>
1000ad7e:	e7e4      	b.n	1000ad4a <_vfiprintf_r+0x1ea>
1000ad80:	1000bf31 	.word	0x1000bf31
1000ad84:	1000bf3b 	.word	0x1000bf3b
1000ad88:	100073b9 	.word	0x100073b9
1000ad8c:	1000ab3b 	.word	0x1000ab3b
1000ad90:	1000bf37 	.word	0x1000bf37

1000ad94 <__sflush_r>:
1000ad94:	898a      	ldrh	r2, [r1, #12]
1000ad96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000ad9a:	4605      	mov	r5, r0
1000ad9c:	0710      	lsls	r0, r2, #28
1000ad9e:	460c      	mov	r4, r1
1000ada0:	d458      	bmi.n	1000ae54 <__sflush_r+0xc0>
1000ada2:	684b      	ldr	r3, [r1, #4]
1000ada4:	2b00      	cmp	r3, #0
1000ada6:	dc05      	bgt.n	1000adb4 <__sflush_r+0x20>
1000ada8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1000adaa:	2b00      	cmp	r3, #0
1000adac:	dc02      	bgt.n	1000adb4 <__sflush_r+0x20>
1000adae:	2000      	movs	r0, #0
1000adb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000adb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1000adb6:	2e00      	cmp	r6, #0
1000adb8:	d0f9      	beq.n	1000adae <__sflush_r+0x1a>
1000adba:	2300      	movs	r3, #0
1000adbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1000adc0:	682f      	ldr	r7, [r5, #0]
1000adc2:	6a21      	ldr	r1, [r4, #32]
1000adc4:	602b      	str	r3, [r5, #0]
1000adc6:	d032      	beq.n	1000ae2e <__sflush_r+0x9a>
1000adc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
1000adca:	89a3      	ldrh	r3, [r4, #12]
1000adcc:	075a      	lsls	r2, r3, #29
1000adce:	d505      	bpl.n	1000addc <__sflush_r+0x48>
1000add0:	6863      	ldr	r3, [r4, #4]
1000add2:	1ac0      	subs	r0, r0, r3
1000add4:	6b63      	ldr	r3, [r4, #52]	; 0x34
1000add6:	b10b      	cbz	r3, 1000addc <__sflush_r+0x48>
1000add8:	6c23      	ldr	r3, [r4, #64]	; 0x40
1000adda:	1ac0      	subs	r0, r0, r3
1000addc:	2300      	movs	r3, #0
1000adde:	4602      	mov	r2, r0
1000ade0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1000ade2:	6a21      	ldr	r1, [r4, #32]
1000ade4:	4628      	mov	r0, r5
1000ade6:	47b0      	blx	r6
1000ade8:	1c43      	adds	r3, r0, #1
1000adea:	89a3      	ldrh	r3, [r4, #12]
1000adec:	d106      	bne.n	1000adfc <__sflush_r+0x68>
1000adee:	6829      	ldr	r1, [r5, #0]
1000adf0:	291d      	cmp	r1, #29
1000adf2:	d82b      	bhi.n	1000ae4c <__sflush_r+0xb8>
1000adf4:	4a29      	ldr	r2, [pc, #164]	; (1000ae9c <__sflush_r+0x108>)
1000adf6:	410a      	asrs	r2, r1
1000adf8:	07d6      	lsls	r6, r2, #31
1000adfa:	d427      	bmi.n	1000ae4c <__sflush_r+0xb8>
1000adfc:	2200      	movs	r2, #0
1000adfe:	6062      	str	r2, [r4, #4]
1000ae00:	04d9      	lsls	r1, r3, #19
1000ae02:	6922      	ldr	r2, [r4, #16]
1000ae04:	6022      	str	r2, [r4, #0]
1000ae06:	d504      	bpl.n	1000ae12 <__sflush_r+0x7e>
1000ae08:	1c42      	adds	r2, r0, #1
1000ae0a:	d101      	bne.n	1000ae10 <__sflush_r+0x7c>
1000ae0c:	682b      	ldr	r3, [r5, #0]
1000ae0e:	b903      	cbnz	r3, 1000ae12 <__sflush_r+0x7e>
1000ae10:	6560      	str	r0, [r4, #84]	; 0x54
1000ae12:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000ae14:	602f      	str	r7, [r5, #0]
1000ae16:	2900      	cmp	r1, #0
1000ae18:	d0c9      	beq.n	1000adae <__sflush_r+0x1a>
1000ae1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
1000ae1e:	4299      	cmp	r1, r3
1000ae20:	d002      	beq.n	1000ae28 <__sflush_r+0x94>
1000ae22:	4628      	mov	r0, r5
1000ae24:	f7fe f8d6 	bl	10008fd4 <_free_r>
1000ae28:	2000      	movs	r0, #0
1000ae2a:	6360      	str	r0, [r4, #52]	; 0x34
1000ae2c:	e7c0      	b.n	1000adb0 <__sflush_r+0x1c>
1000ae2e:	2301      	movs	r3, #1
1000ae30:	4628      	mov	r0, r5
1000ae32:	47b0      	blx	r6
1000ae34:	1c41      	adds	r1, r0, #1
1000ae36:	d1c8      	bne.n	1000adca <__sflush_r+0x36>
1000ae38:	682b      	ldr	r3, [r5, #0]
1000ae3a:	2b00      	cmp	r3, #0
1000ae3c:	d0c5      	beq.n	1000adca <__sflush_r+0x36>
1000ae3e:	2b1d      	cmp	r3, #29
1000ae40:	d001      	beq.n	1000ae46 <__sflush_r+0xb2>
1000ae42:	2b16      	cmp	r3, #22
1000ae44:	d101      	bne.n	1000ae4a <__sflush_r+0xb6>
1000ae46:	602f      	str	r7, [r5, #0]
1000ae48:	e7b1      	b.n	1000adae <__sflush_r+0x1a>
1000ae4a:	89a3      	ldrh	r3, [r4, #12]
1000ae4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000ae50:	81a3      	strh	r3, [r4, #12]
1000ae52:	e7ad      	b.n	1000adb0 <__sflush_r+0x1c>
1000ae54:	690f      	ldr	r7, [r1, #16]
1000ae56:	2f00      	cmp	r7, #0
1000ae58:	d0a9      	beq.n	1000adae <__sflush_r+0x1a>
1000ae5a:	0793      	lsls	r3, r2, #30
1000ae5c:	680e      	ldr	r6, [r1, #0]
1000ae5e:	bf08      	it	eq
1000ae60:	694b      	ldreq	r3, [r1, #20]
1000ae62:	600f      	str	r7, [r1, #0]
1000ae64:	bf18      	it	ne
1000ae66:	2300      	movne	r3, #0
1000ae68:	eba6 0807 	sub.w	r8, r6, r7
1000ae6c:	608b      	str	r3, [r1, #8]
1000ae6e:	f1b8 0f00 	cmp.w	r8, #0
1000ae72:	dd9c      	ble.n	1000adae <__sflush_r+0x1a>
1000ae74:	6a21      	ldr	r1, [r4, #32]
1000ae76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1000ae78:	4643      	mov	r3, r8
1000ae7a:	463a      	mov	r2, r7
1000ae7c:	4628      	mov	r0, r5
1000ae7e:	47b0      	blx	r6
1000ae80:	2800      	cmp	r0, #0
1000ae82:	dc06      	bgt.n	1000ae92 <__sflush_r+0xfe>
1000ae84:	89a3      	ldrh	r3, [r4, #12]
1000ae86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1000ae8a:	81a3      	strh	r3, [r4, #12]
1000ae8c:	f04f 30ff 	mov.w	r0, #4294967295
1000ae90:	e78e      	b.n	1000adb0 <__sflush_r+0x1c>
1000ae92:	4407      	add	r7, r0
1000ae94:	eba8 0800 	sub.w	r8, r8, r0
1000ae98:	e7e9      	b.n	1000ae6e <__sflush_r+0xda>
1000ae9a:	bf00      	nop
1000ae9c:	dfbffffe 	.word	0xdfbffffe

1000aea0 <_fflush_r>:
1000aea0:	b538      	push	{r3, r4, r5, lr}
1000aea2:	690b      	ldr	r3, [r1, #16]
1000aea4:	4605      	mov	r5, r0
1000aea6:	460c      	mov	r4, r1
1000aea8:	b913      	cbnz	r3, 1000aeb0 <_fflush_r+0x10>
1000aeaa:	2500      	movs	r5, #0
1000aeac:	4628      	mov	r0, r5
1000aeae:	bd38      	pop	{r3, r4, r5, pc}
1000aeb0:	b118      	cbz	r0, 1000aeba <_fflush_r+0x1a>
1000aeb2:	6a03      	ldr	r3, [r0, #32]
1000aeb4:	b90b      	cbnz	r3, 1000aeba <_fflush_r+0x1a>
1000aeb6:	f7fd f8e1 	bl	1000807c <__sinit>
1000aeba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000aebe:	2b00      	cmp	r3, #0
1000aec0:	d0f3      	beq.n	1000aeaa <_fflush_r+0xa>
1000aec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
1000aec4:	07d0      	lsls	r0, r2, #31
1000aec6:	d404      	bmi.n	1000aed2 <_fflush_r+0x32>
1000aec8:	0599      	lsls	r1, r3, #22
1000aeca:	d402      	bmi.n	1000aed2 <_fflush_r+0x32>
1000aecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1000aece:	f7fd f9fe 	bl	100082ce <__retarget_lock_acquire_recursive>
1000aed2:	4628      	mov	r0, r5
1000aed4:	4621      	mov	r1, r4
1000aed6:	f7ff ff5d 	bl	1000ad94 <__sflush_r>
1000aeda:	6e63      	ldr	r3, [r4, #100]	; 0x64
1000aedc:	07da      	lsls	r2, r3, #31
1000aede:	4605      	mov	r5, r0
1000aee0:	d4e4      	bmi.n	1000aeac <_fflush_r+0xc>
1000aee2:	89a3      	ldrh	r3, [r4, #12]
1000aee4:	059b      	lsls	r3, r3, #22
1000aee6:	d4e1      	bmi.n	1000aeac <_fflush_r+0xc>
1000aee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1000aeea:	f7fd f9f1 	bl	100082d0 <__retarget_lock_release_recursive>
1000aeee:	e7dd      	b.n	1000aeac <_fflush_r+0xc>

1000aef0 <__swbuf_r>:
1000aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000aef2:	460e      	mov	r6, r1
1000aef4:	4614      	mov	r4, r2
1000aef6:	4605      	mov	r5, r0
1000aef8:	b118      	cbz	r0, 1000af02 <__swbuf_r+0x12>
1000aefa:	6a03      	ldr	r3, [r0, #32]
1000aefc:	b90b      	cbnz	r3, 1000af02 <__swbuf_r+0x12>
1000aefe:	f7fd f8bd 	bl	1000807c <__sinit>
1000af02:	69a3      	ldr	r3, [r4, #24]
1000af04:	60a3      	str	r3, [r4, #8]
1000af06:	89a3      	ldrh	r3, [r4, #12]
1000af08:	071a      	lsls	r2, r3, #28
1000af0a:	d525      	bpl.n	1000af58 <__swbuf_r+0x68>
1000af0c:	6923      	ldr	r3, [r4, #16]
1000af0e:	b31b      	cbz	r3, 1000af58 <__swbuf_r+0x68>
1000af10:	6823      	ldr	r3, [r4, #0]
1000af12:	6922      	ldr	r2, [r4, #16]
1000af14:	1a98      	subs	r0, r3, r2
1000af16:	6963      	ldr	r3, [r4, #20]
1000af18:	b2f6      	uxtb	r6, r6
1000af1a:	4283      	cmp	r3, r0
1000af1c:	4637      	mov	r7, r6
1000af1e:	dc04      	bgt.n	1000af2a <__swbuf_r+0x3a>
1000af20:	4621      	mov	r1, r4
1000af22:	4628      	mov	r0, r5
1000af24:	f7ff ffbc 	bl	1000aea0 <_fflush_r>
1000af28:	b9e0      	cbnz	r0, 1000af64 <__swbuf_r+0x74>
1000af2a:	68a3      	ldr	r3, [r4, #8]
1000af2c:	3b01      	subs	r3, #1
1000af2e:	60a3      	str	r3, [r4, #8]
1000af30:	6823      	ldr	r3, [r4, #0]
1000af32:	1c5a      	adds	r2, r3, #1
1000af34:	6022      	str	r2, [r4, #0]
1000af36:	701e      	strb	r6, [r3, #0]
1000af38:	6962      	ldr	r2, [r4, #20]
1000af3a:	1c43      	adds	r3, r0, #1
1000af3c:	429a      	cmp	r2, r3
1000af3e:	d004      	beq.n	1000af4a <__swbuf_r+0x5a>
1000af40:	89a3      	ldrh	r3, [r4, #12]
1000af42:	07db      	lsls	r3, r3, #31
1000af44:	d506      	bpl.n	1000af54 <__swbuf_r+0x64>
1000af46:	2e0a      	cmp	r6, #10
1000af48:	d104      	bne.n	1000af54 <__swbuf_r+0x64>
1000af4a:	4621      	mov	r1, r4
1000af4c:	4628      	mov	r0, r5
1000af4e:	f7ff ffa7 	bl	1000aea0 <_fflush_r>
1000af52:	b938      	cbnz	r0, 1000af64 <__swbuf_r+0x74>
1000af54:	4638      	mov	r0, r7
1000af56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000af58:	4621      	mov	r1, r4
1000af5a:	4628      	mov	r0, r5
1000af5c:	f000 f806 	bl	1000af6c <__swsetup_r>
1000af60:	2800      	cmp	r0, #0
1000af62:	d0d5      	beq.n	1000af10 <__swbuf_r+0x20>
1000af64:	f04f 37ff 	mov.w	r7, #4294967295
1000af68:	e7f4      	b.n	1000af54 <__swbuf_r+0x64>
	...

1000af6c <__swsetup_r>:
1000af6c:	b538      	push	{r3, r4, r5, lr}
1000af6e:	4b2a      	ldr	r3, [pc, #168]	; (1000b018 <__swsetup_r+0xac>)
1000af70:	4605      	mov	r5, r0
1000af72:	6818      	ldr	r0, [r3, #0]
1000af74:	460c      	mov	r4, r1
1000af76:	b118      	cbz	r0, 1000af80 <__swsetup_r+0x14>
1000af78:	6a03      	ldr	r3, [r0, #32]
1000af7a:	b90b      	cbnz	r3, 1000af80 <__swsetup_r+0x14>
1000af7c:	f7fd f87e 	bl	1000807c <__sinit>
1000af80:	89a3      	ldrh	r3, [r4, #12]
1000af82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000af86:	0718      	lsls	r0, r3, #28
1000af88:	d422      	bmi.n	1000afd0 <__swsetup_r+0x64>
1000af8a:	06d9      	lsls	r1, r3, #27
1000af8c:	d407      	bmi.n	1000af9e <__swsetup_r+0x32>
1000af8e:	2309      	movs	r3, #9
1000af90:	602b      	str	r3, [r5, #0]
1000af92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
1000af96:	81a3      	strh	r3, [r4, #12]
1000af98:	f04f 30ff 	mov.w	r0, #4294967295
1000af9c:	e034      	b.n	1000b008 <__swsetup_r+0x9c>
1000af9e:	0758      	lsls	r0, r3, #29
1000afa0:	d512      	bpl.n	1000afc8 <__swsetup_r+0x5c>
1000afa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
1000afa4:	b141      	cbz	r1, 1000afb8 <__swsetup_r+0x4c>
1000afa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
1000afaa:	4299      	cmp	r1, r3
1000afac:	d002      	beq.n	1000afb4 <__swsetup_r+0x48>
1000afae:	4628      	mov	r0, r5
1000afb0:	f7fe f810 	bl	10008fd4 <_free_r>
1000afb4:	2300      	movs	r3, #0
1000afb6:	6363      	str	r3, [r4, #52]	; 0x34
1000afb8:	89a3      	ldrh	r3, [r4, #12]
1000afba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1000afbe:	81a3      	strh	r3, [r4, #12]
1000afc0:	2300      	movs	r3, #0
1000afc2:	6063      	str	r3, [r4, #4]
1000afc4:	6923      	ldr	r3, [r4, #16]
1000afc6:	6023      	str	r3, [r4, #0]
1000afc8:	89a3      	ldrh	r3, [r4, #12]
1000afca:	f043 0308 	orr.w	r3, r3, #8
1000afce:	81a3      	strh	r3, [r4, #12]
1000afd0:	6923      	ldr	r3, [r4, #16]
1000afd2:	b94b      	cbnz	r3, 1000afe8 <__swsetup_r+0x7c>
1000afd4:	89a3      	ldrh	r3, [r4, #12]
1000afd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
1000afda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1000afde:	d003      	beq.n	1000afe8 <__swsetup_r+0x7c>
1000afe0:	4621      	mov	r1, r4
1000afe2:	4628      	mov	r0, r5
1000afe4:	f000 fc7e 	bl	1000b8e4 <__smakebuf_r>
1000afe8:	89a0      	ldrh	r0, [r4, #12]
1000afea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1000afee:	f010 0301 	ands.w	r3, r0, #1
1000aff2:	d00a      	beq.n	1000b00a <__swsetup_r+0x9e>
1000aff4:	2300      	movs	r3, #0
1000aff6:	60a3      	str	r3, [r4, #8]
1000aff8:	6963      	ldr	r3, [r4, #20]
1000affa:	425b      	negs	r3, r3
1000affc:	61a3      	str	r3, [r4, #24]
1000affe:	6923      	ldr	r3, [r4, #16]
1000b000:	b943      	cbnz	r3, 1000b014 <__swsetup_r+0xa8>
1000b002:	f010 0080 	ands.w	r0, r0, #128	; 0x80
1000b006:	d1c4      	bne.n	1000af92 <__swsetup_r+0x26>
1000b008:	bd38      	pop	{r3, r4, r5, pc}
1000b00a:	0781      	lsls	r1, r0, #30
1000b00c:	bf58      	it	pl
1000b00e:	6963      	ldrpl	r3, [r4, #20]
1000b010:	60a3      	str	r3, [r4, #8]
1000b012:	e7f4      	b.n	1000affe <__swsetup_r+0x92>
1000b014:	2000      	movs	r0, #0
1000b016:	e7f7      	b.n	1000b008 <__swsetup_r+0x9c>
1000b018:	10020064 	.word	0x10020064

1000b01c <memmove>:
1000b01c:	4288      	cmp	r0, r1
1000b01e:	b510      	push	{r4, lr}
1000b020:	eb01 0402 	add.w	r4, r1, r2
1000b024:	d902      	bls.n	1000b02c <memmove+0x10>
1000b026:	4284      	cmp	r4, r0
1000b028:	4623      	mov	r3, r4
1000b02a:	d807      	bhi.n	1000b03c <memmove+0x20>
1000b02c:	1e43      	subs	r3, r0, #1
1000b02e:	42a1      	cmp	r1, r4
1000b030:	d008      	beq.n	1000b044 <memmove+0x28>
1000b032:	f811 2b01 	ldrb.w	r2, [r1], #1
1000b036:	f803 2f01 	strb.w	r2, [r3, #1]!
1000b03a:	e7f8      	b.n	1000b02e <memmove+0x12>
1000b03c:	4402      	add	r2, r0
1000b03e:	4601      	mov	r1, r0
1000b040:	428a      	cmp	r2, r1
1000b042:	d100      	bne.n	1000b046 <memmove+0x2a>
1000b044:	bd10      	pop	{r4, pc}
1000b046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1000b04a:	f802 4d01 	strb.w	r4, [r2, #-1]!
1000b04e:	e7f7      	b.n	1000b040 <memmove+0x24>

1000b050 <strncmp>:
1000b050:	b510      	push	{r4, lr}
1000b052:	b16a      	cbz	r2, 1000b070 <strncmp+0x20>
1000b054:	3901      	subs	r1, #1
1000b056:	1884      	adds	r4, r0, r2
1000b058:	f810 2b01 	ldrb.w	r2, [r0], #1
1000b05c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
1000b060:	429a      	cmp	r2, r3
1000b062:	d103      	bne.n	1000b06c <strncmp+0x1c>
1000b064:	42a0      	cmp	r0, r4
1000b066:	d001      	beq.n	1000b06c <strncmp+0x1c>
1000b068:	2a00      	cmp	r2, #0
1000b06a:	d1f5      	bne.n	1000b058 <strncmp+0x8>
1000b06c:	1ad0      	subs	r0, r2, r3
1000b06e:	bd10      	pop	{r4, pc}
1000b070:	4610      	mov	r0, r2
1000b072:	e7fc      	b.n	1000b06e <strncmp+0x1e>

1000b074 <_sbrk_r>:
1000b074:	b538      	push	{r3, r4, r5, lr}
1000b076:	4d06      	ldr	r5, [pc, #24]	; (1000b090 <_sbrk_r+0x1c>)
1000b078:	2300      	movs	r3, #0
1000b07a:	4604      	mov	r4, r0
1000b07c:	4608      	mov	r0, r1
1000b07e:	602b      	str	r3, [r5, #0]
1000b080:	f7f6 f84e 	bl	10001120 <_sbrk>
1000b084:	1c43      	adds	r3, r0, #1
1000b086:	d102      	bne.n	1000b08e <_sbrk_r+0x1a>
1000b088:	682b      	ldr	r3, [r5, #0]
1000b08a:	b103      	cbz	r3, 1000b08e <_sbrk_r+0x1a>
1000b08c:	6023      	str	r3, [r4, #0]
1000b08e:	bd38      	pop	{r3, r4, r5, pc}
1000b090:	100203d0 	.word	0x100203d0

1000b094 <memcpy>:
1000b094:	440a      	add	r2, r1
1000b096:	4291      	cmp	r1, r2
1000b098:	f100 33ff 	add.w	r3, r0, #4294967295
1000b09c:	d100      	bne.n	1000b0a0 <memcpy+0xc>
1000b09e:	4770      	bx	lr
1000b0a0:	b510      	push	{r4, lr}
1000b0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
1000b0a6:	f803 4f01 	strb.w	r4, [r3, #1]!
1000b0aa:	4291      	cmp	r1, r2
1000b0ac:	d1f9      	bne.n	1000b0a2 <memcpy+0xe>
1000b0ae:	bd10      	pop	{r4, pc}

1000b0b0 <nan>:
1000b0b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1000b0b8 <nan+0x8>
1000b0b4:	4770      	bx	lr
1000b0b6:	bf00      	nop
1000b0b8:	00000000 	.word	0x00000000
1000b0bc:	7ff80000 	.word	0x7ff80000

1000b0c0 <__assert_func>:
1000b0c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1000b0c2:	4614      	mov	r4, r2
1000b0c4:	461a      	mov	r2, r3
1000b0c6:	4b09      	ldr	r3, [pc, #36]	; (1000b0ec <__assert_func+0x2c>)
1000b0c8:	681b      	ldr	r3, [r3, #0]
1000b0ca:	4605      	mov	r5, r0
1000b0cc:	68d8      	ldr	r0, [r3, #12]
1000b0ce:	b14c      	cbz	r4, 1000b0e4 <__assert_func+0x24>
1000b0d0:	4b07      	ldr	r3, [pc, #28]	; (1000b0f0 <__assert_func+0x30>)
1000b0d2:	9100      	str	r1, [sp, #0]
1000b0d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
1000b0d8:	4906      	ldr	r1, [pc, #24]	; (1000b0f4 <__assert_func+0x34>)
1000b0da:	462b      	mov	r3, r5
1000b0dc:	f000 fbca 	bl	1000b874 <fiprintf>
1000b0e0:	f000 fc5e 	bl	1000b9a0 <abort>
1000b0e4:	4b04      	ldr	r3, [pc, #16]	; (1000b0f8 <__assert_func+0x38>)
1000b0e6:	461c      	mov	r4, r3
1000b0e8:	e7f3      	b.n	1000b0d2 <__assert_func+0x12>
1000b0ea:	bf00      	nop
1000b0ec:	10020064 	.word	0x10020064
1000b0f0:	1000bf4a 	.word	0x1000bf4a
1000b0f4:	1000bf57 	.word	0x1000bf57
1000b0f8:	1000bf85 	.word	0x1000bf85

1000b0fc <_calloc_r>:
1000b0fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000b0fe:	fba1 2402 	umull	r2, r4, r1, r2
1000b102:	b94c      	cbnz	r4, 1000b118 <_calloc_r+0x1c>
1000b104:	4611      	mov	r1, r2
1000b106:	9201      	str	r2, [sp, #4]
1000b108:	f7fd ffd8 	bl	100090bc <_malloc_r>
1000b10c:	9a01      	ldr	r2, [sp, #4]
1000b10e:	4605      	mov	r5, r0
1000b110:	b930      	cbnz	r0, 1000b120 <_calloc_r+0x24>
1000b112:	4628      	mov	r0, r5
1000b114:	b003      	add	sp, #12
1000b116:	bd30      	pop	{r4, r5, pc}
1000b118:	220c      	movs	r2, #12
1000b11a:	6002      	str	r2, [r0, #0]
1000b11c:	2500      	movs	r5, #0
1000b11e:	e7f8      	b.n	1000b112 <_calloc_r+0x16>
1000b120:	4621      	mov	r1, r4
1000b122:	f7fd f856 	bl	100081d2 <memset>
1000b126:	e7f4      	b.n	1000b112 <_calloc_r+0x16>

1000b128 <rshift>:
1000b128:	6903      	ldr	r3, [r0, #16]
1000b12a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
1000b12e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1000b132:	ea4f 1261 	mov.w	r2, r1, asr #5
1000b136:	f100 0414 	add.w	r4, r0, #20
1000b13a:	dd45      	ble.n	1000b1c8 <rshift+0xa0>
1000b13c:	f011 011f 	ands.w	r1, r1, #31
1000b140:	eb04 0683 	add.w	r6, r4, r3, lsl #2
1000b144:	eb04 0582 	add.w	r5, r4, r2, lsl #2
1000b148:	d10c      	bne.n	1000b164 <rshift+0x3c>
1000b14a:	f100 0710 	add.w	r7, r0, #16
1000b14e:	4629      	mov	r1, r5
1000b150:	42b1      	cmp	r1, r6
1000b152:	d334      	bcc.n	1000b1be <rshift+0x96>
1000b154:	1a9b      	subs	r3, r3, r2
1000b156:	009b      	lsls	r3, r3, #2
1000b158:	1eea      	subs	r2, r5, #3
1000b15a:	4296      	cmp	r6, r2
1000b15c:	bf38      	it	cc
1000b15e:	2300      	movcc	r3, #0
1000b160:	4423      	add	r3, r4
1000b162:	e015      	b.n	1000b190 <rshift+0x68>
1000b164:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
1000b168:	f1c1 0820 	rsb	r8, r1, #32
1000b16c:	40cf      	lsrs	r7, r1
1000b16e:	f105 0e04 	add.w	lr, r5, #4
1000b172:	46a1      	mov	r9, r4
1000b174:	4576      	cmp	r6, lr
1000b176:	46f4      	mov	ip, lr
1000b178:	d815      	bhi.n	1000b1a6 <rshift+0x7e>
1000b17a:	1a9a      	subs	r2, r3, r2
1000b17c:	0092      	lsls	r2, r2, #2
1000b17e:	3a04      	subs	r2, #4
1000b180:	3501      	adds	r5, #1
1000b182:	42ae      	cmp	r6, r5
1000b184:	bf38      	it	cc
1000b186:	2200      	movcc	r2, #0
1000b188:	18a3      	adds	r3, r4, r2
1000b18a:	50a7      	str	r7, [r4, r2]
1000b18c:	b107      	cbz	r7, 1000b190 <rshift+0x68>
1000b18e:	3304      	adds	r3, #4
1000b190:	1b1a      	subs	r2, r3, r4
1000b192:	42a3      	cmp	r3, r4
1000b194:	ea4f 02a2 	mov.w	r2, r2, asr #2
1000b198:	bf08      	it	eq
1000b19a:	2300      	moveq	r3, #0
1000b19c:	6102      	str	r2, [r0, #16]
1000b19e:	bf08      	it	eq
1000b1a0:	6143      	streq	r3, [r0, #20]
1000b1a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1000b1a6:	f8dc c000 	ldr.w	ip, [ip]
1000b1aa:	fa0c fc08 	lsl.w	ip, ip, r8
1000b1ae:	ea4c 0707 	orr.w	r7, ip, r7
1000b1b2:	f849 7b04 	str.w	r7, [r9], #4
1000b1b6:	f85e 7b04 	ldr.w	r7, [lr], #4
1000b1ba:	40cf      	lsrs	r7, r1
1000b1bc:	e7da      	b.n	1000b174 <rshift+0x4c>
1000b1be:	f851 cb04 	ldr.w	ip, [r1], #4
1000b1c2:	f847 cf04 	str.w	ip, [r7, #4]!
1000b1c6:	e7c3      	b.n	1000b150 <rshift+0x28>
1000b1c8:	4623      	mov	r3, r4
1000b1ca:	e7e1      	b.n	1000b190 <rshift+0x68>

1000b1cc <__hexdig_fun>:
1000b1cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
1000b1d0:	2b09      	cmp	r3, #9
1000b1d2:	d802      	bhi.n	1000b1da <__hexdig_fun+0xe>
1000b1d4:	3820      	subs	r0, #32
1000b1d6:	b2c0      	uxtb	r0, r0
1000b1d8:	4770      	bx	lr
1000b1da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
1000b1de:	2b05      	cmp	r3, #5
1000b1e0:	d801      	bhi.n	1000b1e6 <__hexdig_fun+0x1a>
1000b1e2:	3847      	subs	r0, #71	; 0x47
1000b1e4:	e7f7      	b.n	1000b1d6 <__hexdig_fun+0xa>
1000b1e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
1000b1ea:	2b05      	cmp	r3, #5
1000b1ec:	d801      	bhi.n	1000b1f2 <__hexdig_fun+0x26>
1000b1ee:	3827      	subs	r0, #39	; 0x27
1000b1f0:	e7f1      	b.n	1000b1d6 <__hexdig_fun+0xa>
1000b1f2:	2000      	movs	r0, #0
1000b1f4:	4770      	bx	lr
	...

1000b1f8 <__gethex>:
1000b1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000b1fc:	4617      	mov	r7, r2
1000b1fe:	680a      	ldr	r2, [r1, #0]
1000b200:	b085      	sub	sp, #20
1000b202:	f102 0b02 	add.w	fp, r2, #2
1000b206:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
1000b20a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
1000b20e:	4681      	mov	r9, r0
1000b210:	468a      	mov	sl, r1
1000b212:	9302      	str	r3, [sp, #8]
1000b214:	32fe      	adds	r2, #254	; 0xfe
1000b216:	eb02 030b 	add.w	r3, r2, fp
1000b21a:	46d8      	mov	r8, fp
1000b21c:	f81b 0b01 	ldrb.w	r0, [fp], #1
1000b220:	9301      	str	r3, [sp, #4]
1000b222:	2830      	cmp	r0, #48	; 0x30
1000b224:	d0f7      	beq.n	1000b216 <__gethex+0x1e>
1000b226:	f7ff ffd1 	bl	1000b1cc <__hexdig_fun>
1000b22a:	4604      	mov	r4, r0
1000b22c:	2800      	cmp	r0, #0
1000b22e:	d138      	bne.n	1000b2a2 <__gethex+0xaa>
1000b230:	49a7      	ldr	r1, [pc, #668]	; (1000b4d0 <__gethex+0x2d8>)
1000b232:	2201      	movs	r2, #1
1000b234:	4640      	mov	r0, r8
1000b236:	f7ff ff0b 	bl	1000b050 <strncmp>
1000b23a:	4606      	mov	r6, r0
1000b23c:	2800      	cmp	r0, #0
1000b23e:	d169      	bne.n	1000b314 <__gethex+0x11c>
1000b240:	f898 0001 	ldrb.w	r0, [r8, #1]
1000b244:	465d      	mov	r5, fp
1000b246:	f7ff ffc1 	bl	1000b1cc <__hexdig_fun>
1000b24a:	2800      	cmp	r0, #0
1000b24c:	d064      	beq.n	1000b318 <__gethex+0x120>
1000b24e:	465a      	mov	r2, fp
1000b250:	7810      	ldrb	r0, [r2, #0]
1000b252:	2830      	cmp	r0, #48	; 0x30
1000b254:	4690      	mov	r8, r2
1000b256:	f102 0201 	add.w	r2, r2, #1
1000b25a:	d0f9      	beq.n	1000b250 <__gethex+0x58>
1000b25c:	f7ff ffb6 	bl	1000b1cc <__hexdig_fun>
1000b260:	2301      	movs	r3, #1
1000b262:	fab0 f480 	clz	r4, r0
1000b266:	0964      	lsrs	r4, r4, #5
1000b268:	465e      	mov	r6, fp
1000b26a:	9301      	str	r3, [sp, #4]
1000b26c:	4642      	mov	r2, r8
1000b26e:	4615      	mov	r5, r2
1000b270:	3201      	adds	r2, #1
1000b272:	7828      	ldrb	r0, [r5, #0]
1000b274:	f7ff ffaa 	bl	1000b1cc <__hexdig_fun>
1000b278:	2800      	cmp	r0, #0
1000b27a:	d1f8      	bne.n	1000b26e <__gethex+0x76>
1000b27c:	4994      	ldr	r1, [pc, #592]	; (1000b4d0 <__gethex+0x2d8>)
1000b27e:	2201      	movs	r2, #1
1000b280:	4628      	mov	r0, r5
1000b282:	f7ff fee5 	bl	1000b050 <strncmp>
1000b286:	b978      	cbnz	r0, 1000b2a8 <__gethex+0xb0>
1000b288:	b946      	cbnz	r6, 1000b29c <__gethex+0xa4>
1000b28a:	1c6e      	adds	r6, r5, #1
1000b28c:	4632      	mov	r2, r6
1000b28e:	4615      	mov	r5, r2
1000b290:	3201      	adds	r2, #1
1000b292:	7828      	ldrb	r0, [r5, #0]
1000b294:	f7ff ff9a 	bl	1000b1cc <__hexdig_fun>
1000b298:	2800      	cmp	r0, #0
1000b29a:	d1f8      	bne.n	1000b28e <__gethex+0x96>
1000b29c:	1b73      	subs	r3, r6, r5
1000b29e:	009e      	lsls	r6, r3, #2
1000b2a0:	e004      	b.n	1000b2ac <__gethex+0xb4>
1000b2a2:	2400      	movs	r4, #0
1000b2a4:	4626      	mov	r6, r4
1000b2a6:	e7e1      	b.n	1000b26c <__gethex+0x74>
1000b2a8:	2e00      	cmp	r6, #0
1000b2aa:	d1f7      	bne.n	1000b29c <__gethex+0xa4>
1000b2ac:	782b      	ldrb	r3, [r5, #0]
1000b2ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
1000b2b2:	2b50      	cmp	r3, #80	; 0x50
1000b2b4:	d13d      	bne.n	1000b332 <__gethex+0x13a>
1000b2b6:	786b      	ldrb	r3, [r5, #1]
1000b2b8:	2b2b      	cmp	r3, #43	; 0x2b
1000b2ba:	d02f      	beq.n	1000b31c <__gethex+0x124>
1000b2bc:	2b2d      	cmp	r3, #45	; 0x2d
1000b2be:	d031      	beq.n	1000b324 <__gethex+0x12c>
1000b2c0:	1c69      	adds	r1, r5, #1
1000b2c2:	f04f 0b00 	mov.w	fp, #0
1000b2c6:	7808      	ldrb	r0, [r1, #0]
1000b2c8:	f7ff ff80 	bl	1000b1cc <__hexdig_fun>
1000b2cc:	1e42      	subs	r2, r0, #1
1000b2ce:	b2d2      	uxtb	r2, r2
1000b2d0:	2a18      	cmp	r2, #24
1000b2d2:	d82e      	bhi.n	1000b332 <__gethex+0x13a>
1000b2d4:	f1a0 0210 	sub.w	r2, r0, #16
1000b2d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
1000b2dc:	f7ff ff76 	bl	1000b1cc <__hexdig_fun>
1000b2e0:	f100 3cff 	add.w	ip, r0, #4294967295
1000b2e4:	fa5f fc8c 	uxtb.w	ip, ip
1000b2e8:	f1bc 0f18 	cmp.w	ip, #24
1000b2ec:	d91d      	bls.n	1000b32a <__gethex+0x132>
1000b2ee:	f1bb 0f00 	cmp.w	fp, #0
1000b2f2:	d000      	beq.n	1000b2f6 <__gethex+0xfe>
1000b2f4:	4252      	negs	r2, r2
1000b2f6:	4416      	add	r6, r2
1000b2f8:	f8ca 1000 	str.w	r1, [sl]
1000b2fc:	b1dc      	cbz	r4, 1000b336 <__gethex+0x13e>
1000b2fe:	9b01      	ldr	r3, [sp, #4]
1000b300:	2b00      	cmp	r3, #0
1000b302:	bf14      	ite	ne
1000b304:	f04f 0800 	movne.w	r8, #0
1000b308:	f04f 0806 	moveq.w	r8, #6
1000b30c:	4640      	mov	r0, r8
1000b30e:	b005      	add	sp, #20
1000b310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1000b314:	4645      	mov	r5, r8
1000b316:	4626      	mov	r6, r4
1000b318:	2401      	movs	r4, #1
1000b31a:	e7c7      	b.n	1000b2ac <__gethex+0xb4>
1000b31c:	f04f 0b00 	mov.w	fp, #0
1000b320:	1ca9      	adds	r1, r5, #2
1000b322:	e7d0      	b.n	1000b2c6 <__gethex+0xce>
1000b324:	f04f 0b01 	mov.w	fp, #1
1000b328:	e7fa      	b.n	1000b320 <__gethex+0x128>
1000b32a:	230a      	movs	r3, #10
1000b32c:	fb03 0002 	mla	r0, r3, r2, r0
1000b330:	e7d0      	b.n	1000b2d4 <__gethex+0xdc>
1000b332:	4629      	mov	r1, r5
1000b334:	e7e0      	b.n	1000b2f8 <__gethex+0x100>
1000b336:	eba5 0308 	sub.w	r3, r5, r8
1000b33a:	3b01      	subs	r3, #1
1000b33c:	4621      	mov	r1, r4
1000b33e:	2b07      	cmp	r3, #7
1000b340:	dc0a      	bgt.n	1000b358 <__gethex+0x160>
1000b342:	4648      	mov	r0, r9
1000b344:	f7fd ff46 	bl	100091d4 <_Balloc>
1000b348:	4604      	mov	r4, r0
1000b34a:	b940      	cbnz	r0, 1000b35e <__gethex+0x166>
1000b34c:	4b61      	ldr	r3, [pc, #388]	; (1000b4d4 <__gethex+0x2dc>)
1000b34e:	4602      	mov	r2, r0
1000b350:	21e4      	movs	r1, #228	; 0xe4
1000b352:	4861      	ldr	r0, [pc, #388]	; (1000b4d8 <__gethex+0x2e0>)
1000b354:	f7ff feb4 	bl	1000b0c0 <__assert_func>
1000b358:	3101      	adds	r1, #1
1000b35a:	105b      	asrs	r3, r3, #1
1000b35c:	e7ef      	b.n	1000b33e <__gethex+0x146>
1000b35e:	f100 0a14 	add.w	sl, r0, #20
1000b362:	2300      	movs	r3, #0
1000b364:	495a      	ldr	r1, [pc, #360]	; (1000b4d0 <__gethex+0x2d8>)
1000b366:	f8cd a004 	str.w	sl, [sp, #4]
1000b36a:	469b      	mov	fp, r3
1000b36c:	45a8      	cmp	r8, r5
1000b36e:	d342      	bcc.n	1000b3f6 <__gethex+0x1fe>
1000b370:	9801      	ldr	r0, [sp, #4]
1000b372:	f840 bb04 	str.w	fp, [r0], #4
1000b376:	eba0 000a 	sub.w	r0, r0, sl
1000b37a:	1080      	asrs	r0, r0, #2
1000b37c:	6120      	str	r0, [r4, #16]
1000b37e:	ea4f 1840 	mov.w	r8, r0, lsl #5
1000b382:	4658      	mov	r0, fp
1000b384:	f7fe f818 	bl	100093b8 <__hi0bits>
1000b388:	683d      	ldr	r5, [r7, #0]
1000b38a:	eba8 0000 	sub.w	r0, r8, r0
1000b38e:	42a8      	cmp	r0, r5
1000b390:	dd59      	ble.n	1000b446 <__gethex+0x24e>
1000b392:	eba0 0805 	sub.w	r8, r0, r5
1000b396:	4641      	mov	r1, r8
1000b398:	4620      	mov	r0, r4
1000b39a:	f7fe fba7 	bl	10009aec <__any_on>
1000b39e:	4683      	mov	fp, r0
1000b3a0:	b1b8      	cbz	r0, 1000b3d2 <__gethex+0x1da>
1000b3a2:	f108 33ff 	add.w	r3, r8, #4294967295
1000b3a6:	1159      	asrs	r1, r3, #5
1000b3a8:	f003 021f 	and.w	r2, r3, #31
1000b3ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
1000b3b0:	f04f 0b01 	mov.w	fp, #1
1000b3b4:	fa0b f202 	lsl.w	r2, fp, r2
1000b3b8:	420a      	tst	r2, r1
1000b3ba:	d00a      	beq.n	1000b3d2 <__gethex+0x1da>
1000b3bc:	455b      	cmp	r3, fp
1000b3be:	dd06      	ble.n	1000b3ce <__gethex+0x1d6>
1000b3c0:	f1a8 0102 	sub.w	r1, r8, #2
1000b3c4:	4620      	mov	r0, r4
1000b3c6:	f7fe fb91 	bl	10009aec <__any_on>
1000b3ca:	2800      	cmp	r0, #0
1000b3cc:	d138      	bne.n	1000b440 <__gethex+0x248>
1000b3ce:	f04f 0b02 	mov.w	fp, #2
1000b3d2:	4641      	mov	r1, r8
1000b3d4:	4620      	mov	r0, r4
1000b3d6:	f7ff fea7 	bl	1000b128 <rshift>
1000b3da:	4446      	add	r6, r8
1000b3dc:	68bb      	ldr	r3, [r7, #8]
1000b3de:	42b3      	cmp	r3, r6
1000b3e0:	da41      	bge.n	1000b466 <__gethex+0x26e>
1000b3e2:	4621      	mov	r1, r4
1000b3e4:	4648      	mov	r0, r9
1000b3e6:	f7fd ff35 	bl	10009254 <_Bfree>
1000b3ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000b3ec:	2300      	movs	r3, #0
1000b3ee:	6013      	str	r3, [r2, #0]
1000b3f0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
1000b3f4:	e78a      	b.n	1000b30c <__gethex+0x114>
1000b3f6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
1000b3fa:	2a2e      	cmp	r2, #46	; 0x2e
1000b3fc:	d014      	beq.n	1000b428 <__gethex+0x230>
1000b3fe:	2b20      	cmp	r3, #32
1000b400:	d106      	bne.n	1000b410 <__gethex+0x218>
1000b402:	9b01      	ldr	r3, [sp, #4]
1000b404:	f843 bb04 	str.w	fp, [r3], #4
1000b408:	f04f 0b00 	mov.w	fp, #0
1000b40c:	9301      	str	r3, [sp, #4]
1000b40e:	465b      	mov	r3, fp
1000b410:	7828      	ldrb	r0, [r5, #0]
1000b412:	9303      	str	r3, [sp, #12]
1000b414:	f7ff feda 	bl	1000b1cc <__hexdig_fun>
1000b418:	9b03      	ldr	r3, [sp, #12]
1000b41a:	f000 000f 	and.w	r0, r0, #15
1000b41e:	4098      	lsls	r0, r3
1000b420:	ea4b 0b00 	orr.w	fp, fp, r0
1000b424:	3304      	adds	r3, #4
1000b426:	e7a1      	b.n	1000b36c <__gethex+0x174>
1000b428:	45a8      	cmp	r8, r5
1000b42a:	d8e8      	bhi.n	1000b3fe <__gethex+0x206>
1000b42c:	2201      	movs	r2, #1
1000b42e:	4628      	mov	r0, r5
1000b430:	9303      	str	r3, [sp, #12]
1000b432:	f7ff fe0d 	bl	1000b050 <strncmp>
1000b436:	4926      	ldr	r1, [pc, #152]	; (1000b4d0 <__gethex+0x2d8>)
1000b438:	9b03      	ldr	r3, [sp, #12]
1000b43a:	2800      	cmp	r0, #0
1000b43c:	d1df      	bne.n	1000b3fe <__gethex+0x206>
1000b43e:	e795      	b.n	1000b36c <__gethex+0x174>
1000b440:	f04f 0b03 	mov.w	fp, #3
1000b444:	e7c5      	b.n	1000b3d2 <__gethex+0x1da>
1000b446:	da0b      	bge.n	1000b460 <__gethex+0x268>
1000b448:	eba5 0800 	sub.w	r8, r5, r0
1000b44c:	4621      	mov	r1, r4
1000b44e:	4642      	mov	r2, r8
1000b450:	4648      	mov	r0, r9
1000b452:	f7fe f919 	bl	10009688 <__lshift>
1000b456:	eba6 0608 	sub.w	r6, r6, r8
1000b45a:	4604      	mov	r4, r0
1000b45c:	f100 0a14 	add.w	sl, r0, #20
1000b460:	f04f 0b00 	mov.w	fp, #0
1000b464:	e7ba      	b.n	1000b3dc <__gethex+0x1e4>
1000b466:	687b      	ldr	r3, [r7, #4]
1000b468:	42b3      	cmp	r3, r6
1000b46a:	dd73      	ble.n	1000b554 <__gethex+0x35c>
1000b46c:	1b9e      	subs	r6, r3, r6
1000b46e:	42b5      	cmp	r5, r6
1000b470:	dc34      	bgt.n	1000b4dc <__gethex+0x2e4>
1000b472:	68fb      	ldr	r3, [r7, #12]
1000b474:	2b02      	cmp	r3, #2
1000b476:	d023      	beq.n	1000b4c0 <__gethex+0x2c8>
1000b478:	2b03      	cmp	r3, #3
1000b47a:	d025      	beq.n	1000b4c8 <__gethex+0x2d0>
1000b47c:	2b01      	cmp	r3, #1
1000b47e:	d115      	bne.n	1000b4ac <__gethex+0x2b4>
1000b480:	42b5      	cmp	r5, r6
1000b482:	d113      	bne.n	1000b4ac <__gethex+0x2b4>
1000b484:	2d01      	cmp	r5, #1
1000b486:	d10b      	bne.n	1000b4a0 <__gethex+0x2a8>
1000b488:	9a02      	ldr	r2, [sp, #8]
1000b48a:	687b      	ldr	r3, [r7, #4]
1000b48c:	6013      	str	r3, [r2, #0]
1000b48e:	2301      	movs	r3, #1
1000b490:	6123      	str	r3, [r4, #16]
1000b492:	f8ca 3000 	str.w	r3, [sl]
1000b496:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b498:	f04f 0862 	mov.w	r8, #98	; 0x62
1000b49c:	601c      	str	r4, [r3, #0]
1000b49e:	e735      	b.n	1000b30c <__gethex+0x114>
1000b4a0:	1e69      	subs	r1, r5, #1
1000b4a2:	4620      	mov	r0, r4
1000b4a4:	f7fe fb22 	bl	10009aec <__any_on>
1000b4a8:	2800      	cmp	r0, #0
1000b4aa:	d1ed      	bne.n	1000b488 <__gethex+0x290>
1000b4ac:	4621      	mov	r1, r4
1000b4ae:	4648      	mov	r0, r9
1000b4b0:	f7fd fed0 	bl	10009254 <_Bfree>
1000b4b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1000b4b6:	2300      	movs	r3, #0
1000b4b8:	6013      	str	r3, [r2, #0]
1000b4ba:	f04f 0850 	mov.w	r8, #80	; 0x50
1000b4be:	e725      	b.n	1000b30c <__gethex+0x114>
1000b4c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000b4c2:	2b00      	cmp	r3, #0
1000b4c4:	d1f2      	bne.n	1000b4ac <__gethex+0x2b4>
1000b4c6:	e7df      	b.n	1000b488 <__gethex+0x290>
1000b4c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000b4ca:	2b00      	cmp	r3, #0
1000b4cc:	d1dc      	bne.n	1000b488 <__gethex+0x290>
1000b4ce:	e7ed      	b.n	1000b4ac <__gethex+0x2b4>
1000b4d0:	1000bddc 	.word	0x1000bddc
1000b4d4:	1000bc71 	.word	0x1000bc71
1000b4d8:	1000bf86 	.word	0x1000bf86
1000b4dc:	f106 38ff 	add.w	r8, r6, #4294967295
1000b4e0:	f1bb 0f00 	cmp.w	fp, #0
1000b4e4:	d133      	bne.n	1000b54e <__gethex+0x356>
1000b4e6:	f1b8 0f00 	cmp.w	r8, #0
1000b4ea:	d004      	beq.n	1000b4f6 <__gethex+0x2fe>
1000b4ec:	4641      	mov	r1, r8
1000b4ee:	4620      	mov	r0, r4
1000b4f0:	f7fe fafc 	bl	10009aec <__any_on>
1000b4f4:	4683      	mov	fp, r0
1000b4f6:	ea4f 1268 	mov.w	r2, r8, asr #5
1000b4fa:	2301      	movs	r3, #1
1000b4fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
1000b500:	f008 081f 	and.w	r8, r8, #31
1000b504:	fa03 f308 	lsl.w	r3, r3, r8
1000b508:	4213      	tst	r3, r2
1000b50a:	4631      	mov	r1, r6
1000b50c:	4620      	mov	r0, r4
1000b50e:	bf18      	it	ne
1000b510:	f04b 0b02 	orrne.w	fp, fp, #2
1000b514:	1bad      	subs	r5, r5, r6
1000b516:	f7ff fe07 	bl	1000b128 <rshift>
1000b51a:	687e      	ldr	r6, [r7, #4]
1000b51c:	f04f 0802 	mov.w	r8, #2
1000b520:	f1bb 0f00 	cmp.w	fp, #0
1000b524:	d04a      	beq.n	1000b5bc <__gethex+0x3c4>
1000b526:	68fb      	ldr	r3, [r7, #12]
1000b528:	2b02      	cmp	r3, #2
1000b52a:	d016      	beq.n	1000b55a <__gethex+0x362>
1000b52c:	2b03      	cmp	r3, #3
1000b52e:	d018      	beq.n	1000b562 <__gethex+0x36a>
1000b530:	2b01      	cmp	r3, #1
1000b532:	d109      	bne.n	1000b548 <__gethex+0x350>
1000b534:	f01b 0f02 	tst.w	fp, #2
1000b538:	d006      	beq.n	1000b548 <__gethex+0x350>
1000b53a:	f8da 3000 	ldr.w	r3, [sl]
1000b53e:	ea4b 0b03 	orr.w	fp, fp, r3
1000b542:	f01b 0f01 	tst.w	fp, #1
1000b546:	d10f      	bne.n	1000b568 <__gethex+0x370>
1000b548:	f048 0810 	orr.w	r8, r8, #16
1000b54c:	e036      	b.n	1000b5bc <__gethex+0x3c4>
1000b54e:	f04f 0b01 	mov.w	fp, #1
1000b552:	e7d0      	b.n	1000b4f6 <__gethex+0x2fe>
1000b554:	f04f 0801 	mov.w	r8, #1
1000b558:	e7e2      	b.n	1000b520 <__gethex+0x328>
1000b55a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000b55c:	f1c3 0301 	rsb	r3, r3, #1
1000b560:	930f      	str	r3, [sp, #60]	; 0x3c
1000b562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1000b564:	2b00      	cmp	r3, #0
1000b566:	d0ef      	beq.n	1000b548 <__gethex+0x350>
1000b568:	f8d4 b010 	ldr.w	fp, [r4, #16]
1000b56c:	f104 0214 	add.w	r2, r4, #20
1000b570:	ea4f 038b 	mov.w	r3, fp, lsl #2
1000b574:	9301      	str	r3, [sp, #4]
1000b576:	eb02 008b 	add.w	r0, r2, fp, lsl #2
1000b57a:	2300      	movs	r3, #0
1000b57c:	4694      	mov	ip, r2
1000b57e:	f852 1b04 	ldr.w	r1, [r2], #4
1000b582:	f1b1 3fff 	cmp.w	r1, #4294967295
1000b586:	d01e      	beq.n	1000b5c6 <__gethex+0x3ce>
1000b588:	3101      	adds	r1, #1
1000b58a:	f8cc 1000 	str.w	r1, [ip]
1000b58e:	f1b8 0f02 	cmp.w	r8, #2
1000b592:	f104 0214 	add.w	r2, r4, #20
1000b596:	d13d      	bne.n	1000b614 <__gethex+0x41c>
1000b598:	683b      	ldr	r3, [r7, #0]
1000b59a:	3b01      	subs	r3, #1
1000b59c:	42ab      	cmp	r3, r5
1000b59e:	d10b      	bne.n	1000b5b8 <__gethex+0x3c0>
1000b5a0:	1169      	asrs	r1, r5, #5
1000b5a2:	2301      	movs	r3, #1
1000b5a4:	f005 051f 	and.w	r5, r5, #31
1000b5a8:	fa03 f505 	lsl.w	r5, r3, r5
1000b5ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000b5b0:	421d      	tst	r5, r3
1000b5b2:	bf18      	it	ne
1000b5b4:	f04f 0801 	movne.w	r8, #1
1000b5b8:	f048 0820 	orr.w	r8, r8, #32
1000b5bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000b5be:	601c      	str	r4, [r3, #0]
1000b5c0:	9b02      	ldr	r3, [sp, #8]
1000b5c2:	601e      	str	r6, [r3, #0]
1000b5c4:	e6a2      	b.n	1000b30c <__gethex+0x114>
1000b5c6:	4290      	cmp	r0, r2
1000b5c8:	f842 3c04 	str.w	r3, [r2, #-4]
1000b5cc:	d8d6      	bhi.n	1000b57c <__gethex+0x384>
1000b5ce:	68a2      	ldr	r2, [r4, #8]
1000b5d0:	4593      	cmp	fp, r2
1000b5d2:	db17      	blt.n	1000b604 <__gethex+0x40c>
1000b5d4:	6861      	ldr	r1, [r4, #4]
1000b5d6:	4648      	mov	r0, r9
1000b5d8:	3101      	adds	r1, #1
1000b5da:	f7fd fdfb 	bl	100091d4 <_Balloc>
1000b5de:	4682      	mov	sl, r0
1000b5e0:	b918      	cbnz	r0, 1000b5ea <__gethex+0x3f2>
1000b5e2:	4b1b      	ldr	r3, [pc, #108]	; (1000b650 <__gethex+0x458>)
1000b5e4:	4602      	mov	r2, r0
1000b5e6:	2184      	movs	r1, #132	; 0x84
1000b5e8:	e6b3      	b.n	1000b352 <__gethex+0x15a>
1000b5ea:	6922      	ldr	r2, [r4, #16]
1000b5ec:	3202      	adds	r2, #2
1000b5ee:	f104 010c 	add.w	r1, r4, #12
1000b5f2:	0092      	lsls	r2, r2, #2
1000b5f4:	300c      	adds	r0, #12
1000b5f6:	f7ff fd4d 	bl	1000b094 <memcpy>
1000b5fa:	4621      	mov	r1, r4
1000b5fc:	4648      	mov	r0, r9
1000b5fe:	f7fd fe29 	bl	10009254 <_Bfree>
1000b602:	4654      	mov	r4, sl
1000b604:	6922      	ldr	r2, [r4, #16]
1000b606:	1c51      	adds	r1, r2, #1
1000b608:	eb04 0282 	add.w	r2, r4, r2, lsl #2
1000b60c:	6121      	str	r1, [r4, #16]
1000b60e:	2101      	movs	r1, #1
1000b610:	6151      	str	r1, [r2, #20]
1000b612:	e7bc      	b.n	1000b58e <__gethex+0x396>
1000b614:	6921      	ldr	r1, [r4, #16]
1000b616:	4559      	cmp	r1, fp
1000b618:	dd0b      	ble.n	1000b632 <__gethex+0x43a>
1000b61a:	2101      	movs	r1, #1
1000b61c:	4620      	mov	r0, r4
1000b61e:	f7ff fd83 	bl	1000b128 <rshift>
1000b622:	68bb      	ldr	r3, [r7, #8]
1000b624:	3601      	adds	r6, #1
1000b626:	42b3      	cmp	r3, r6
1000b628:	f6ff aedb 	blt.w	1000b3e2 <__gethex+0x1ea>
1000b62c:	f04f 0801 	mov.w	r8, #1
1000b630:	e7c2      	b.n	1000b5b8 <__gethex+0x3c0>
1000b632:	f015 051f 	ands.w	r5, r5, #31
1000b636:	d0f9      	beq.n	1000b62c <__gethex+0x434>
1000b638:	9b01      	ldr	r3, [sp, #4]
1000b63a:	441a      	add	r2, r3
1000b63c:	f1c5 0520 	rsb	r5, r5, #32
1000b640:	f852 0c04 	ldr.w	r0, [r2, #-4]
1000b644:	f7fd feb8 	bl	100093b8 <__hi0bits>
1000b648:	42a8      	cmp	r0, r5
1000b64a:	dbe6      	blt.n	1000b61a <__gethex+0x422>
1000b64c:	e7ee      	b.n	1000b62c <__gethex+0x434>
1000b64e:	bf00      	nop
1000b650:	1000bc71 	.word	0x1000bc71

1000b654 <L_shift>:
1000b654:	f1c2 0208 	rsb	r2, r2, #8
1000b658:	0092      	lsls	r2, r2, #2
1000b65a:	b570      	push	{r4, r5, r6, lr}
1000b65c:	f1c2 0620 	rsb	r6, r2, #32
1000b660:	6843      	ldr	r3, [r0, #4]
1000b662:	6804      	ldr	r4, [r0, #0]
1000b664:	fa03 f506 	lsl.w	r5, r3, r6
1000b668:	432c      	orrs	r4, r5
1000b66a:	40d3      	lsrs	r3, r2
1000b66c:	6004      	str	r4, [r0, #0]
1000b66e:	f840 3f04 	str.w	r3, [r0, #4]!
1000b672:	4288      	cmp	r0, r1
1000b674:	d3f4      	bcc.n	1000b660 <L_shift+0xc>
1000b676:	bd70      	pop	{r4, r5, r6, pc}

1000b678 <__match>:
1000b678:	b530      	push	{r4, r5, lr}
1000b67a:	6803      	ldr	r3, [r0, #0]
1000b67c:	3301      	adds	r3, #1
1000b67e:	f811 4b01 	ldrb.w	r4, [r1], #1
1000b682:	b914      	cbnz	r4, 1000b68a <__match+0x12>
1000b684:	6003      	str	r3, [r0, #0]
1000b686:	2001      	movs	r0, #1
1000b688:	bd30      	pop	{r4, r5, pc}
1000b68a:	f813 2b01 	ldrb.w	r2, [r3], #1
1000b68e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
1000b692:	2d19      	cmp	r5, #25
1000b694:	bf98      	it	ls
1000b696:	3220      	addls	r2, #32
1000b698:	42a2      	cmp	r2, r4
1000b69a:	d0f0      	beq.n	1000b67e <__match+0x6>
1000b69c:	2000      	movs	r0, #0
1000b69e:	e7f3      	b.n	1000b688 <__match+0x10>

1000b6a0 <__hexnan>:
1000b6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1000b6a4:	680b      	ldr	r3, [r1, #0]
1000b6a6:	6801      	ldr	r1, [r0, #0]
1000b6a8:	115e      	asrs	r6, r3, #5
1000b6aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
1000b6ae:	f013 031f 	ands.w	r3, r3, #31
1000b6b2:	b087      	sub	sp, #28
1000b6b4:	bf18      	it	ne
1000b6b6:	3604      	addne	r6, #4
1000b6b8:	2500      	movs	r5, #0
1000b6ba:	1f37      	subs	r7, r6, #4
1000b6bc:	4682      	mov	sl, r0
1000b6be:	4690      	mov	r8, r2
1000b6c0:	9301      	str	r3, [sp, #4]
1000b6c2:	f846 5c04 	str.w	r5, [r6, #-4]
1000b6c6:	46b9      	mov	r9, r7
1000b6c8:	463c      	mov	r4, r7
1000b6ca:	9502      	str	r5, [sp, #8]
1000b6cc:	46ab      	mov	fp, r5
1000b6ce:	784a      	ldrb	r2, [r1, #1]
1000b6d0:	1c4b      	adds	r3, r1, #1
1000b6d2:	9303      	str	r3, [sp, #12]
1000b6d4:	b342      	cbz	r2, 1000b728 <__hexnan+0x88>
1000b6d6:	4610      	mov	r0, r2
1000b6d8:	9105      	str	r1, [sp, #20]
1000b6da:	9204      	str	r2, [sp, #16]
1000b6dc:	f7ff fd76 	bl	1000b1cc <__hexdig_fun>
1000b6e0:	2800      	cmp	r0, #0
1000b6e2:	d14f      	bne.n	1000b784 <__hexnan+0xe4>
1000b6e4:	9a04      	ldr	r2, [sp, #16]
1000b6e6:	9905      	ldr	r1, [sp, #20]
1000b6e8:	2a20      	cmp	r2, #32
1000b6ea:	d818      	bhi.n	1000b71e <__hexnan+0x7e>
1000b6ec:	9b02      	ldr	r3, [sp, #8]
1000b6ee:	459b      	cmp	fp, r3
1000b6f0:	dd13      	ble.n	1000b71a <__hexnan+0x7a>
1000b6f2:	454c      	cmp	r4, r9
1000b6f4:	d206      	bcs.n	1000b704 <__hexnan+0x64>
1000b6f6:	2d07      	cmp	r5, #7
1000b6f8:	dc04      	bgt.n	1000b704 <__hexnan+0x64>
1000b6fa:	462a      	mov	r2, r5
1000b6fc:	4649      	mov	r1, r9
1000b6fe:	4620      	mov	r0, r4
1000b700:	f7ff ffa8 	bl	1000b654 <L_shift>
1000b704:	4544      	cmp	r4, r8
1000b706:	d950      	bls.n	1000b7aa <__hexnan+0x10a>
1000b708:	2300      	movs	r3, #0
1000b70a:	f1a4 0904 	sub.w	r9, r4, #4
1000b70e:	f844 3c04 	str.w	r3, [r4, #-4]
1000b712:	f8cd b008 	str.w	fp, [sp, #8]
1000b716:	464c      	mov	r4, r9
1000b718:	461d      	mov	r5, r3
1000b71a:	9903      	ldr	r1, [sp, #12]
1000b71c:	e7d7      	b.n	1000b6ce <__hexnan+0x2e>
1000b71e:	2a29      	cmp	r2, #41	; 0x29
1000b720:	d155      	bne.n	1000b7ce <__hexnan+0x12e>
1000b722:	3102      	adds	r1, #2
1000b724:	f8ca 1000 	str.w	r1, [sl]
1000b728:	f1bb 0f00 	cmp.w	fp, #0
1000b72c:	d04f      	beq.n	1000b7ce <__hexnan+0x12e>
1000b72e:	454c      	cmp	r4, r9
1000b730:	d206      	bcs.n	1000b740 <__hexnan+0xa0>
1000b732:	2d07      	cmp	r5, #7
1000b734:	dc04      	bgt.n	1000b740 <__hexnan+0xa0>
1000b736:	462a      	mov	r2, r5
1000b738:	4649      	mov	r1, r9
1000b73a:	4620      	mov	r0, r4
1000b73c:	f7ff ff8a 	bl	1000b654 <L_shift>
1000b740:	4544      	cmp	r4, r8
1000b742:	d934      	bls.n	1000b7ae <__hexnan+0x10e>
1000b744:	f1a8 0204 	sub.w	r2, r8, #4
1000b748:	4623      	mov	r3, r4
1000b74a:	f853 1b04 	ldr.w	r1, [r3], #4
1000b74e:	f842 1f04 	str.w	r1, [r2, #4]!
1000b752:	429f      	cmp	r7, r3
1000b754:	d2f9      	bcs.n	1000b74a <__hexnan+0xaa>
1000b756:	1b3b      	subs	r3, r7, r4
1000b758:	f023 0303 	bic.w	r3, r3, #3
1000b75c:	3304      	adds	r3, #4
1000b75e:	3e03      	subs	r6, #3
1000b760:	3401      	adds	r4, #1
1000b762:	42a6      	cmp	r6, r4
1000b764:	bf38      	it	cc
1000b766:	2304      	movcc	r3, #4
1000b768:	4443      	add	r3, r8
1000b76a:	2200      	movs	r2, #0
1000b76c:	f843 2b04 	str.w	r2, [r3], #4
1000b770:	429f      	cmp	r7, r3
1000b772:	d2fb      	bcs.n	1000b76c <__hexnan+0xcc>
1000b774:	683b      	ldr	r3, [r7, #0]
1000b776:	b91b      	cbnz	r3, 1000b780 <__hexnan+0xe0>
1000b778:	4547      	cmp	r7, r8
1000b77a:	d126      	bne.n	1000b7ca <__hexnan+0x12a>
1000b77c:	2301      	movs	r3, #1
1000b77e:	603b      	str	r3, [r7, #0]
1000b780:	2005      	movs	r0, #5
1000b782:	e025      	b.n	1000b7d0 <__hexnan+0x130>
1000b784:	3501      	adds	r5, #1
1000b786:	2d08      	cmp	r5, #8
1000b788:	f10b 0b01 	add.w	fp, fp, #1
1000b78c:	dd06      	ble.n	1000b79c <__hexnan+0xfc>
1000b78e:	4544      	cmp	r4, r8
1000b790:	d9c3      	bls.n	1000b71a <__hexnan+0x7a>
1000b792:	2300      	movs	r3, #0
1000b794:	f844 3c04 	str.w	r3, [r4, #-4]
1000b798:	2501      	movs	r5, #1
1000b79a:	3c04      	subs	r4, #4
1000b79c:	6822      	ldr	r2, [r4, #0]
1000b79e:	f000 000f 	and.w	r0, r0, #15
1000b7a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
1000b7a6:	6020      	str	r0, [r4, #0]
1000b7a8:	e7b7      	b.n	1000b71a <__hexnan+0x7a>
1000b7aa:	2508      	movs	r5, #8
1000b7ac:	e7b5      	b.n	1000b71a <__hexnan+0x7a>
1000b7ae:	9b01      	ldr	r3, [sp, #4]
1000b7b0:	2b00      	cmp	r3, #0
1000b7b2:	d0df      	beq.n	1000b774 <__hexnan+0xd4>
1000b7b4:	f1c3 0320 	rsb	r3, r3, #32
1000b7b8:	f04f 32ff 	mov.w	r2, #4294967295
1000b7bc:	40da      	lsrs	r2, r3
1000b7be:	f856 3c04 	ldr.w	r3, [r6, #-4]
1000b7c2:	4013      	ands	r3, r2
1000b7c4:	f846 3c04 	str.w	r3, [r6, #-4]
1000b7c8:	e7d4      	b.n	1000b774 <__hexnan+0xd4>
1000b7ca:	3f04      	subs	r7, #4
1000b7cc:	e7d2      	b.n	1000b774 <__hexnan+0xd4>
1000b7ce:	2004      	movs	r0, #4
1000b7d0:	b007      	add	sp, #28
1000b7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1000b7d6 <__ascii_mbtowc>:
1000b7d6:	b082      	sub	sp, #8
1000b7d8:	b901      	cbnz	r1, 1000b7dc <__ascii_mbtowc+0x6>
1000b7da:	a901      	add	r1, sp, #4
1000b7dc:	b142      	cbz	r2, 1000b7f0 <__ascii_mbtowc+0x1a>
1000b7de:	b14b      	cbz	r3, 1000b7f4 <__ascii_mbtowc+0x1e>
1000b7e0:	7813      	ldrb	r3, [r2, #0]
1000b7e2:	600b      	str	r3, [r1, #0]
1000b7e4:	7812      	ldrb	r2, [r2, #0]
1000b7e6:	1e10      	subs	r0, r2, #0
1000b7e8:	bf18      	it	ne
1000b7ea:	2001      	movne	r0, #1
1000b7ec:	b002      	add	sp, #8
1000b7ee:	4770      	bx	lr
1000b7f0:	4610      	mov	r0, r2
1000b7f2:	e7fb      	b.n	1000b7ec <__ascii_mbtowc+0x16>
1000b7f4:	f06f 0001 	mvn.w	r0, #1
1000b7f8:	e7f8      	b.n	1000b7ec <__ascii_mbtowc+0x16>

1000b7fa <_realloc_r>:
1000b7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1000b7fe:	4680      	mov	r8, r0
1000b800:	4614      	mov	r4, r2
1000b802:	460e      	mov	r6, r1
1000b804:	b921      	cbnz	r1, 1000b810 <_realloc_r+0x16>
1000b806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1000b80a:	4611      	mov	r1, r2
1000b80c:	f7fd bc56 	b.w	100090bc <_malloc_r>
1000b810:	b92a      	cbnz	r2, 1000b81e <_realloc_r+0x24>
1000b812:	f7fd fbdf 	bl	10008fd4 <_free_r>
1000b816:	4625      	mov	r5, r4
1000b818:	4628      	mov	r0, r5
1000b81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1000b81e:	f000 f8c6 	bl	1000b9ae <_malloc_usable_size_r>
1000b822:	4284      	cmp	r4, r0
1000b824:	4607      	mov	r7, r0
1000b826:	d802      	bhi.n	1000b82e <_realloc_r+0x34>
1000b828:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1000b82c:	d812      	bhi.n	1000b854 <_realloc_r+0x5a>
1000b82e:	4621      	mov	r1, r4
1000b830:	4640      	mov	r0, r8
1000b832:	f7fd fc43 	bl	100090bc <_malloc_r>
1000b836:	4605      	mov	r5, r0
1000b838:	2800      	cmp	r0, #0
1000b83a:	d0ed      	beq.n	1000b818 <_realloc_r+0x1e>
1000b83c:	42bc      	cmp	r4, r7
1000b83e:	4622      	mov	r2, r4
1000b840:	4631      	mov	r1, r6
1000b842:	bf28      	it	cs
1000b844:	463a      	movcs	r2, r7
1000b846:	f7ff fc25 	bl	1000b094 <memcpy>
1000b84a:	4631      	mov	r1, r6
1000b84c:	4640      	mov	r0, r8
1000b84e:	f7fd fbc1 	bl	10008fd4 <_free_r>
1000b852:	e7e1      	b.n	1000b818 <_realloc_r+0x1e>
1000b854:	4635      	mov	r5, r6
1000b856:	e7df      	b.n	1000b818 <_realloc_r+0x1e>

1000b858 <__ascii_wctomb>:
1000b858:	b149      	cbz	r1, 1000b86e <__ascii_wctomb+0x16>
1000b85a:	2aff      	cmp	r2, #255	; 0xff
1000b85c:	bf85      	ittet	hi
1000b85e:	238a      	movhi	r3, #138	; 0x8a
1000b860:	6003      	strhi	r3, [r0, #0]
1000b862:	700a      	strbls	r2, [r1, #0]
1000b864:	f04f 30ff 	movhi.w	r0, #4294967295
1000b868:	bf98      	it	ls
1000b86a:	2001      	movls	r0, #1
1000b86c:	4770      	bx	lr
1000b86e:	4608      	mov	r0, r1
1000b870:	4770      	bx	lr
	...

1000b874 <fiprintf>:
1000b874:	b40e      	push	{r1, r2, r3}
1000b876:	b503      	push	{r0, r1, lr}
1000b878:	4601      	mov	r1, r0
1000b87a:	ab03      	add	r3, sp, #12
1000b87c:	4805      	ldr	r0, [pc, #20]	; (1000b894 <fiprintf+0x20>)
1000b87e:	f853 2b04 	ldr.w	r2, [r3], #4
1000b882:	6800      	ldr	r0, [r0, #0]
1000b884:	9301      	str	r3, [sp, #4]
1000b886:	f7ff f96b 	bl	1000ab60 <_vfiprintf_r>
1000b88a:	b002      	add	sp, #8
1000b88c:	f85d eb04 	ldr.w	lr, [sp], #4
1000b890:	b003      	add	sp, #12
1000b892:	4770      	bx	lr
1000b894:	10020064 	.word	0x10020064

1000b898 <__swhatbuf_r>:
1000b898:	b570      	push	{r4, r5, r6, lr}
1000b89a:	460c      	mov	r4, r1
1000b89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1000b8a0:	2900      	cmp	r1, #0
1000b8a2:	b096      	sub	sp, #88	; 0x58
1000b8a4:	4615      	mov	r5, r2
1000b8a6:	461e      	mov	r6, r3
1000b8a8:	da0d      	bge.n	1000b8c6 <__swhatbuf_r+0x2e>
1000b8aa:	89a3      	ldrh	r3, [r4, #12]
1000b8ac:	f013 0f80 	tst.w	r3, #128	; 0x80
1000b8b0:	f04f 0100 	mov.w	r1, #0
1000b8b4:	bf0c      	ite	eq
1000b8b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
1000b8ba:	2340      	movne	r3, #64	; 0x40
1000b8bc:	2000      	movs	r0, #0
1000b8be:	6031      	str	r1, [r6, #0]
1000b8c0:	602b      	str	r3, [r5, #0]
1000b8c2:	b016      	add	sp, #88	; 0x58
1000b8c4:	bd70      	pop	{r4, r5, r6, pc}
1000b8c6:	466a      	mov	r2, sp
1000b8c8:	f000 f848 	bl	1000b95c <_fstat_r>
1000b8cc:	2800      	cmp	r0, #0
1000b8ce:	dbec      	blt.n	1000b8aa <__swhatbuf_r+0x12>
1000b8d0:	9901      	ldr	r1, [sp, #4]
1000b8d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
1000b8d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
1000b8da:	4259      	negs	r1, r3
1000b8dc:	4159      	adcs	r1, r3
1000b8de:	f44f 6380 	mov.w	r3, #1024	; 0x400
1000b8e2:	e7eb      	b.n	1000b8bc <__swhatbuf_r+0x24>

1000b8e4 <__smakebuf_r>:
1000b8e4:	898b      	ldrh	r3, [r1, #12]
1000b8e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000b8e8:	079d      	lsls	r5, r3, #30
1000b8ea:	4606      	mov	r6, r0
1000b8ec:	460c      	mov	r4, r1
1000b8ee:	d507      	bpl.n	1000b900 <__smakebuf_r+0x1c>
1000b8f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
1000b8f4:	6023      	str	r3, [r4, #0]
1000b8f6:	6123      	str	r3, [r4, #16]
1000b8f8:	2301      	movs	r3, #1
1000b8fa:	6163      	str	r3, [r4, #20]
1000b8fc:	b002      	add	sp, #8
1000b8fe:	bd70      	pop	{r4, r5, r6, pc}
1000b900:	ab01      	add	r3, sp, #4
1000b902:	466a      	mov	r2, sp
1000b904:	f7ff ffc8 	bl	1000b898 <__swhatbuf_r>
1000b908:	9900      	ldr	r1, [sp, #0]
1000b90a:	4605      	mov	r5, r0
1000b90c:	4630      	mov	r0, r6
1000b90e:	f7fd fbd5 	bl	100090bc <_malloc_r>
1000b912:	b948      	cbnz	r0, 1000b928 <__smakebuf_r+0x44>
1000b914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1000b918:	059a      	lsls	r2, r3, #22
1000b91a:	d4ef      	bmi.n	1000b8fc <__smakebuf_r+0x18>
1000b91c:	f023 0303 	bic.w	r3, r3, #3
1000b920:	f043 0302 	orr.w	r3, r3, #2
1000b924:	81a3      	strh	r3, [r4, #12]
1000b926:	e7e3      	b.n	1000b8f0 <__smakebuf_r+0xc>
1000b928:	89a3      	ldrh	r3, [r4, #12]
1000b92a:	6020      	str	r0, [r4, #0]
1000b92c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1000b930:	81a3      	strh	r3, [r4, #12]
1000b932:	9b00      	ldr	r3, [sp, #0]
1000b934:	6163      	str	r3, [r4, #20]
1000b936:	9b01      	ldr	r3, [sp, #4]
1000b938:	6120      	str	r0, [r4, #16]
1000b93a:	b15b      	cbz	r3, 1000b954 <__smakebuf_r+0x70>
1000b93c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1000b940:	4630      	mov	r0, r6
1000b942:	f000 f81d 	bl	1000b980 <_isatty_r>
1000b946:	b128      	cbz	r0, 1000b954 <__smakebuf_r+0x70>
1000b948:	89a3      	ldrh	r3, [r4, #12]
1000b94a:	f023 0303 	bic.w	r3, r3, #3
1000b94e:	f043 0301 	orr.w	r3, r3, #1
1000b952:	81a3      	strh	r3, [r4, #12]
1000b954:	89a3      	ldrh	r3, [r4, #12]
1000b956:	431d      	orrs	r5, r3
1000b958:	81a5      	strh	r5, [r4, #12]
1000b95a:	e7cf      	b.n	1000b8fc <__smakebuf_r+0x18>

1000b95c <_fstat_r>:
1000b95c:	b538      	push	{r3, r4, r5, lr}
1000b95e:	4d07      	ldr	r5, [pc, #28]	; (1000b97c <_fstat_r+0x20>)
1000b960:	2300      	movs	r3, #0
1000b962:	4604      	mov	r4, r0
1000b964:	4608      	mov	r0, r1
1000b966:	4611      	mov	r1, r2
1000b968:	602b      	str	r3, [r5, #0]
1000b96a:	f7f5 fbb1 	bl	100010d0 <_fstat>
1000b96e:	1c43      	adds	r3, r0, #1
1000b970:	d102      	bne.n	1000b978 <_fstat_r+0x1c>
1000b972:	682b      	ldr	r3, [r5, #0]
1000b974:	b103      	cbz	r3, 1000b978 <_fstat_r+0x1c>
1000b976:	6023      	str	r3, [r4, #0]
1000b978:	bd38      	pop	{r3, r4, r5, pc}
1000b97a:	bf00      	nop
1000b97c:	100203d0 	.word	0x100203d0

1000b980 <_isatty_r>:
1000b980:	b538      	push	{r3, r4, r5, lr}
1000b982:	4d06      	ldr	r5, [pc, #24]	; (1000b99c <_isatty_r+0x1c>)
1000b984:	2300      	movs	r3, #0
1000b986:	4604      	mov	r4, r0
1000b988:	4608      	mov	r0, r1
1000b98a:	602b      	str	r3, [r5, #0]
1000b98c:	f7f5 fbb0 	bl	100010f0 <_isatty>
1000b990:	1c43      	adds	r3, r0, #1
1000b992:	d102      	bne.n	1000b99a <_isatty_r+0x1a>
1000b994:	682b      	ldr	r3, [r5, #0]
1000b996:	b103      	cbz	r3, 1000b99a <_isatty_r+0x1a>
1000b998:	6023      	str	r3, [r4, #0]
1000b99a:	bd38      	pop	{r3, r4, r5, pc}
1000b99c:	100203d0 	.word	0x100203d0

1000b9a0 <abort>:
1000b9a0:	b508      	push	{r3, lr}
1000b9a2:	2006      	movs	r0, #6
1000b9a4:	f000 f834 	bl	1000ba10 <raise>
1000b9a8:	2001      	movs	r0, #1
1000b9aa:	f7f5 fb42 	bl	10001032 <_exit>

1000b9ae <_malloc_usable_size_r>:
1000b9ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
1000b9b2:	1f18      	subs	r0, r3, #4
1000b9b4:	2b00      	cmp	r3, #0
1000b9b6:	bfbc      	itt	lt
1000b9b8:	580b      	ldrlt	r3, [r1, r0]
1000b9ba:	18c0      	addlt	r0, r0, r3
1000b9bc:	4770      	bx	lr

1000b9be <_raise_r>:
1000b9be:	291f      	cmp	r1, #31
1000b9c0:	b538      	push	{r3, r4, r5, lr}
1000b9c2:	4604      	mov	r4, r0
1000b9c4:	460d      	mov	r5, r1
1000b9c6:	d904      	bls.n	1000b9d2 <_raise_r+0x14>
1000b9c8:	2316      	movs	r3, #22
1000b9ca:	6003      	str	r3, [r0, #0]
1000b9cc:	f04f 30ff 	mov.w	r0, #4294967295
1000b9d0:	bd38      	pop	{r3, r4, r5, pc}
1000b9d2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
1000b9d4:	b112      	cbz	r2, 1000b9dc <_raise_r+0x1e>
1000b9d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
1000b9da:	b94b      	cbnz	r3, 1000b9f0 <_raise_r+0x32>
1000b9dc:	4620      	mov	r0, r4
1000b9de:	f000 f831 	bl	1000ba44 <_getpid_r>
1000b9e2:	462a      	mov	r2, r5
1000b9e4:	4601      	mov	r1, r0
1000b9e6:	4620      	mov	r0, r4
1000b9e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1000b9ec:	f000 b818 	b.w	1000ba20 <_kill_r>
1000b9f0:	2b01      	cmp	r3, #1
1000b9f2:	d00a      	beq.n	1000ba0a <_raise_r+0x4c>
1000b9f4:	1c59      	adds	r1, r3, #1
1000b9f6:	d103      	bne.n	1000ba00 <_raise_r+0x42>
1000b9f8:	2316      	movs	r3, #22
1000b9fa:	6003      	str	r3, [r0, #0]
1000b9fc:	2001      	movs	r0, #1
1000b9fe:	e7e7      	b.n	1000b9d0 <_raise_r+0x12>
1000ba00:	2400      	movs	r4, #0
1000ba02:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
1000ba06:	4628      	mov	r0, r5
1000ba08:	4798      	blx	r3
1000ba0a:	2000      	movs	r0, #0
1000ba0c:	e7e0      	b.n	1000b9d0 <_raise_r+0x12>
	...

1000ba10 <raise>:
1000ba10:	4b02      	ldr	r3, [pc, #8]	; (1000ba1c <raise+0xc>)
1000ba12:	4601      	mov	r1, r0
1000ba14:	6818      	ldr	r0, [r3, #0]
1000ba16:	f7ff bfd2 	b.w	1000b9be <_raise_r>
1000ba1a:	bf00      	nop
1000ba1c:	10020064 	.word	0x10020064

1000ba20 <_kill_r>:
1000ba20:	b538      	push	{r3, r4, r5, lr}
1000ba22:	4d07      	ldr	r5, [pc, #28]	; (1000ba40 <_kill_r+0x20>)
1000ba24:	2300      	movs	r3, #0
1000ba26:	4604      	mov	r4, r0
1000ba28:	4608      	mov	r0, r1
1000ba2a:	4611      	mov	r1, r2
1000ba2c:	602b      	str	r3, [r5, #0]
1000ba2e:	f7f5 faf0 	bl	10001012 <_kill>
1000ba32:	1c43      	adds	r3, r0, #1
1000ba34:	d102      	bne.n	1000ba3c <_kill_r+0x1c>
1000ba36:	682b      	ldr	r3, [r5, #0]
1000ba38:	b103      	cbz	r3, 1000ba3c <_kill_r+0x1c>
1000ba3a:	6023      	str	r3, [r4, #0]
1000ba3c:	bd38      	pop	{r3, r4, r5, pc}
1000ba3e:	bf00      	nop
1000ba40:	100203d0 	.word	0x100203d0

1000ba44 <_getpid_r>:
1000ba44:	f7f5 badd 	b.w	10001002 <_getpid>

1000ba48 <_init>:
1000ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ba4a:	bf00      	nop
1000ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000ba4e:	bc08      	pop	{r3}
1000ba50:	469e      	mov	lr, r3
1000ba52:	4770      	bx	lr

1000ba54 <_fini>:
1000ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ba56:	bf00      	nop
1000ba58:	bcf8      	pop	{r3, r4, r5, r6, r7}
1000ba5a:	bc08      	pop	{r3}
1000ba5c:	469e      	mov	lr, r3
1000ba5e:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

1000ba60 <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
1000ba60:	f8df d034 	ldr.w	sp, [pc, #52]	; 1000ba98 <LoopForever+0x2>
  movs  r1, #0
1000ba64:	2100      	movs	r1, #0
  b  LoopCopyDataInit
1000ba66:	e003      	b.n	1000ba70 <LoopCopyDataInit>

1000ba68 <CopyDataInit>:
  ldr  r3, =_sidata
1000ba68:	4b0c      	ldr	r3, [pc, #48]	; (1000ba9c <LoopForever+0x6>)
  ldr  r3, [r3, r1]
1000ba6a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
1000ba6c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
1000ba6e:	3104      	adds	r1, #4

1000ba70 <LoopCopyDataInit>:
  ldr  r0, =_sdata
1000ba70:	480b      	ldr	r0, [pc, #44]	; (1000baa0 <LoopForever+0xa>)
  ldr  r3, =_edata
1000ba72:	4b0c      	ldr	r3, [pc, #48]	; (1000baa4 <LoopForever+0xe>)
  adds  r2, r0, r1
1000ba74:	1842      	adds	r2, r0, r1
  cmp  r2, r3
1000ba76:	429a      	cmp	r2, r3
  bcc  CopyDataInit
1000ba78:	d3f6      	bcc.n	1000ba68 <CopyDataInit>
  ldr  r2, =_sbss
1000ba7a:	4a0b      	ldr	r2, [pc, #44]	; (1000baa8 <LoopForever+0x12>)
  b  LoopFillZerobss
1000ba7c:	e002      	b.n	1000ba84 <LoopFillZerobss>

1000ba7e <FillZerobss>:
  movs  r3, #0
1000ba7e:	2300      	movs	r3, #0
  str  r3, [r2], #4
1000ba80:	f842 3b04 	str.w	r3, [r2], #4

1000ba84 <LoopFillZerobss>:
  ldr  r3, = _ebss
1000ba84:	4b09      	ldr	r3, [pc, #36]	; (1000baac <LoopForever+0x16>)
  cmp  r2, r3
1000ba86:	429a      	cmp	r2, r3
  bcc  FillZerobss
1000ba88:	d3f9      	bcc.n	1000ba7e <FillZerobss>
  bl  SystemInit
1000ba8a:	f7f5 f86b 	bl	10000b64 <SystemInit>
 bl __libc_init_array
1000ba8e:	f7fc fbf9 	bl	10008284 <__libc_init_array>
  bl main
1000ba92:	f7f5 f8f5 	bl	10000c80 <main>

1000ba96 <LoopForever>:
    b LoopForever
1000ba96:	e7fe      	b.n	1000ba96 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
1000ba98:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
1000ba9c:	1000bff0 	.word	0x1000bff0
  ldr  r0, =_sdata
1000baa0:	10020000 	.word	0x10020000
  ldr  r3, =_edata
1000baa4:	100201d4 	.word	0x100201d4
  ldr  r2, =_sbss
1000baa8:	100201d4 	.word	0x100201d4
  ldr  r3, = _ebss
1000baac:	100203e0 	.word	0x100203e0
